{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Kalliope's documentation\n\n\nKalliope is a framework that will help you to create your own personal assistant.\n\n\nThe concept is to create the \nbrain\n of your assistant by attaching an input \nsignal\n (vocal order, scheduled event, MQTT message, GPIO event, etc..) to one or multiple actions called \nneurons\n.\n\n\nYou can create your own Kalliope bot, by simply choosing and composing the \nexisting neurons\n without writing any code. But, if you need a particular module, you can write it by yourself, add it to your project and propose it to the community.\n\n\nKalliope can run on all Linux Debian based distribution including a Raspberry Pi and it's multi-lang. The only thing you need is a microphone.\n\n\nKalliope is easy-peasy to use, see the hello world\n\n\n  \n-\n \nname\n:\n \nHello-world\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nsay\n \nhello\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nHello\n \nworld!\n\n\n\n\n\n\nIf you want an idea of what you can do with Kalliope, click on the image below", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-kalliopes-documentation", 
            "text": "Kalliope is a framework that will help you to create your own personal assistant.  The concept is to create the  brain  of your assistant by attaching an input  signal  (vocal order, scheduled event, MQTT message, GPIO event, etc..) to one or multiple actions called  neurons .  You can create your own Kalliope bot, by simply choosing and composing the  existing neurons  without writing any code. But, if you need a particular module, you can write it by yourself, add it to your project and propose it to the community.  Kalliope can run on all Linux Debian based distribution including a Raspberry Pi and it's multi-lang. The only thing you need is a microphone.  Kalliope is easy-peasy to use, see the hello world     -   name :   Hello-world \n     signals : \n       -   order :   say   hello \n     neurons : \n       -   say : \n           message :   Hello   world!   If you want an idea of what you can do with Kalliope, click on the image below", 
            "title": "Welcome to Kalliope's documentation"
        }, 
        {
            "location": "/installation/raspbian/", 
            "text": "Kalliope requirements for Raspbian\n\n\nKalliope can be installed:\n\n\n\n\nVia the pre-compiled disk image\n\n\nVia script\n\n\nManually\n\n\n\n\nInstall via the pre-compiled disk image\n\n\nDownload the last image \nfrom the release page\n of Kalliope and load it as usual onto an SD card.\n\n\n\n\nLogin:\n pi\n\n\nPassword:\n raspberry\n\n\n\n\nOnce installed, use the \nraspi-config\n command to expand the file system and fill the available space on the SD card.\nThe SSH server is enable by default. Get the IP of your Rpi via the command \nip a\n and then connect via your favourite SSH client.\n\n\nYou'll find a couple folders named \"starter_kit_\n\" located in \n/home/pi\n. Those folders are basic configuration that will help you to start with Kalliope.\n\n\nInstall via script\n\n\nJust run the following bash command to install Kalliope on a freshly installed Raspberry Pi:\n\n\nbash -c \n$(curl -sL https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh)\n\n\n\n\n\n\nManual installation\n\n\n\n\nNote:\n It is recommended to use a \nlite\n installation of Raspbian without any graphical interface for a better experience.\n\n\nNote:\n The first Raspberry Pi is not officially supported. The installation will works but a single core with only 700Mhz may produce latency.\n\n\n\n\nDebian packages requirements\n\n\nInstall the required system libraries and software:\n\n\nsudo apt-get update\nsudo apt-get install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac libffi-dev libffi-dev libssl-dev portaudio19-dev build-essential libssl-dev libffi-dev sox libatlas3-base mplayer libyaml-dev libpython2.7-dev libav-tools\n\n\n\n\n\nInstall the last release of python-pip:\n\n\nwget https://bootstrap.pypa.io/get-pip.py\nsudo python get-pip.py\n\n\n\n\n\nMethod 1 - User install using the PIP package\n\n\nYou can install kalliope on your system by using Pypi:\n\n\nsudo pip install kalliope\n\n\n\n\n\nMethod 2 - Manual setup using sources\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nInstall the project:\n\n\nsudo python setup.py install\n\n\n\n\n\nMethod 3 - Developer install using Virtualenv\n\n\nInstall the \npython-virtualenv\n package:\n\n\nsudo apt-get install python-virtualenv\n\n\n\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nGenerate a local python environment:\n\n\nvirtualenv venv\n\n\n\n\n\nInstall the project using the local environment:\n\n\nvenv/bin/pip install --editable .\n\n\n\n\n\nActivate the local environment:\n\n\nsource\n venv/bin/activate\n\n\n\n\n\nMethod 4 - Developer, dependencies install only\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nInstall the python dependencies directly:\n\n\nsudo pip install -r install/files/python_requirements.txt\n\n\n\n\n\nRaspberry Pi configuration\n\n\nThis section deals with the special configuration needed to get kalliope working on a RPi.\n\n\nMicrophone configuration\n\n\nGet the output card:\n\n\naplay -l\n\n\n\n\n\nOutput example with a USB headset connected:\n\n\n**** List of PLAYBACK Hardware Devices ****\ncard \n0\n: ALSA \n[\nbcm2835 ALSA\n]\n, device \n0\n: bcm2835 ALSA \n[\nbcm2835 ALSA\n]\n\n  Subdevices: \n7\n/8\n  Subdevice \n#0: subdevice #0\n\n  Subdevice \n#1: subdevice #1\n\n  Subdevice \n#2: subdevice #2\n\n  Subdevice \n#3: subdevice #3\n\n  Subdevice \n#4: subdevice #4\n\n  Subdevice \n#5: subdevice #5\n\n  Subdevice \n#6: subdevice #6\n\n  Subdevice \n#7: subdevice #7\n\ncard \n0\n: ALSA \n[\nbcm2835 ALSA\n]\n, device \n1\n: bcm2835 ALSA \n[\nbcm2835 IEC958/HDMI\n]\n\n  Subdevices: \n1\n/1\n  Subdevice \n#0: subdevice #0\n\ncard \n1\n: Headset \n[\nLogitech USB Headset\n]\n, device \n0\n: USB Audio \n[\nUSB Audio\n]\n\n  Subdevices: \n0\n/1\n  Subdevice \n#0: subdevice #0\n\n\n\n\n\n\nHere we see that:\n\n\n\n\nthe analog audio (where the jack is connected) on card 0 and device 1\n\n\nusb audio on card 1 and device 1\n\n\n\n\nGet the input (microphone card):\n\n\narecord -l\n\n\n\n\n\nOutput example with a USB headset connected:\n\n\n**** List of CAPTURE Hardware Devices ****\ncard \n1\n: Headset \n[\nLogitech USB Headset\n]\n, device \n0\n: USB Audio \n[\nUSB Audio\n]\n\n  Subdevices: \n0\n/1\n  Subdevice \n#0: subdevice #0\n\n\n\n\n\n\nHere one shall see one peripheral on card 1 and device 0\n\n\nCreate a configuration file that applies the following configuration:\n- output audio (what Kalliope says) on the analog audio (via speakers connected to the jack)\n- input audio (what is said to Kalliope) on the USB microphone\n\n\nCreate a file in \n/home/pi/.asoundrc\n with the content below\n\n\npcm.!default {\n   type asym\n   playback.pcm {\n     type plug\n     slave.pcm \nhw:0,0\n\n   }\n   capture.pcm {\n     type plug\n     slave.pcm \nhw:1,0\n\n   }\n}\n\n\n\n\n\nWhere \nplayback.pcm\n is the output audio and the \ncapture.pcm\n is the input audio.\n\n\nRestart alsa to apply changes:\n\n\nsudo /etc/init.d/alsa-utils restart\n\n\n\n\n\nAdjust the microphone sensibility by running alsamixer:\n\n\nalsamixer\n\n\n\n\n\nSelect the microphone device by pressing F6 and move up the \nmic\n sensibility level:\n\n\n\nHDMI / Analog audio\n\n\nBy default, the audio stream will use HDMI if something is plugged into this port.\nCheck the \nofficial documentation\n to switch from HDMI to analog.\n\n\nsudo raspi-config\n\n\n\n\n\nTest your env\n\n\nCheck your microphone and speaker config\n\n\nTo ensure that you can record your voice, run the following command to capture audio input from your microphone:\n\n\nrec test.wav\n\n\n\n\n\nPress CTRL-C after capturing a sample of your voice.\n\n\nThen play the recorded audio file\n\n\nmplayer test.wav\n\n\n\n\n\nYour installation is now complete, let's take a look now to the \ngetting started documentation\n to learn how to use Kalliope.\n\n\n(Optional) Start Kalliope automatically after a reboot\n\n\nIf you want to start Kalliope automatically Place the script bellow in \n/etc/systemd/system/kalliope.service\n.\n\n\nUpdate the path \nmy_config_path\n with the path where you've placed your \nbrain.yml\n and \nsettings.yml\n.\n\n\nUpdate the \nusername\n with a non root user. For example, on Raspbian you can set \npi\n.\n\n\n[\nUnit\n]\n\n\nDescription\n=\nKalliope\n\n\n[\nService\n]\n\n\nWorkingDirectory\n=\nmy_config_path\n\n\n\nEnvironment\n=\nSTDOUT=/var/log/kalliope.log\n\n\nEnvironment\n=\nSTDERR=/var/log/kalliope.err.log\n\n\nExecStart\n=\n/bin/bash -c \n/usr/local/bin/kalliope start \n \n${\nSTDOUT\n}\n 2\n \n${\nSTDERR\n}\n\n\nUser\n=\nusername\n\n\n\n[\nInstall\n]\n\n\nWantedBy\n=\nmulti-user.target\n\n\n\n\n\nE.g\n\n\n[\nUnit\n]\n\n\nDescription\n=\nKalliope\n\n\n[\nService\n]\n\n\nWorkingDirectory\n=\n/home/pi/my_kalliope_config\n\n\nEnvironment\n=\nSTDOUT=/var/log/kalliope.log\n\n\nEnvironment\n=\nSTDERR=/var/log/kalliope.err.log\n\n\nExecStart\n=\n/bin/bash -c \n/usr/local/bin/kalliope start \n \n${\nSTDOUT\n}\n 2\n \n${\nSTDERR\n}\n\n\nUser\n=\npi\n\n\n[\nInstall\n]\n\n\nWantedBy\n=\nmulti-user.target\n\n\n\n\n\nThen, reload systemctl, start the service and enable it at startup\n\n\nsudo systemctl daemon-reload\nsudo systemctl start kalliope\nsudo systemctl \nenable\n kalliope", 
            "title": "Raspberry"
        }, 
        {
            "location": "/installation/raspbian/#kalliope-requirements-for-raspbian", 
            "text": "Kalliope can be installed:   Via the pre-compiled disk image  Via script  Manually", 
            "title": "Kalliope requirements for Raspbian"
        }, 
        {
            "location": "/installation/raspbian/#install-via-the-pre-compiled-disk-image", 
            "text": "Download the last image  from the release page  of Kalliope and load it as usual onto an SD card.   Login:  pi  Password:  raspberry   Once installed, use the  raspi-config  command to expand the file system and fill the available space on the SD card.\nThe SSH server is enable by default. Get the IP of your Rpi via the command  ip a  and then connect via your favourite SSH client.  You'll find a couple folders named \"starter_kit_ \" located in  /home/pi . Those folders are basic configuration that will help you to start with Kalliope.", 
            "title": "Install via the pre-compiled disk image"
        }, 
        {
            "location": "/installation/raspbian/#install-via-script", 
            "text": "Just run the following bash command to install Kalliope on a freshly installed Raspberry Pi:  bash -c  $(curl -sL https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh)", 
            "title": "Install via script"
        }, 
        {
            "location": "/installation/raspbian/#manual-installation", 
            "text": "Note:  It is recommended to use a  lite  installation of Raspbian without any graphical interface for a better experience.  Note:  The first Raspberry Pi is not officially supported. The installation will works but a single core with only 700Mhz may produce latency.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/raspbian/#debian-packages-requirements", 
            "text": "Install the required system libraries and software:  sudo apt-get update\nsudo apt-get install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac libffi-dev libffi-dev libssl-dev portaudio19-dev build-essential libssl-dev libffi-dev sox libatlas3-base mplayer libyaml-dev libpython2.7-dev libav-tools  Install the last release of python-pip:  wget https://bootstrap.pypa.io/get-pip.py\nsudo python get-pip.py", 
            "title": "Debian packages requirements"
        }, 
        {
            "location": "/installation/raspbian/#method-1-user-install-using-the-pip-package", 
            "text": "You can install kalliope on your system by using Pypi:  sudo pip install kalliope", 
            "title": "Method 1 - User install using the PIP package"
        }, 
        {
            "location": "/installation/raspbian/#method-2-manual-setup-using-sources", 
            "text": "Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Install the project:  sudo python setup.py install", 
            "title": "Method 2 - Manual setup using sources"
        }, 
        {
            "location": "/installation/raspbian/#method-3-developer-install-using-virtualenv", 
            "text": "Install the  python-virtualenv  package:  sudo apt-get install python-virtualenv  Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Generate a local python environment:  virtualenv venv  Install the project using the local environment:  venv/bin/pip install --editable .  Activate the local environment:  source  venv/bin/activate", 
            "title": "Method 3 - Developer install using Virtualenv"
        }, 
        {
            "location": "/installation/raspbian/#method-4-developer-dependencies-install-only", 
            "text": "Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Install the python dependencies directly:  sudo pip install -r install/files/python_requirements.txt", 
            "title": "Method 4 - Developer, dependencies install only"
        }, 
        {
            "location": "/installation/raspbian/#raspberry-pi-configuration", 
            "text": "This section deals with the special configuration needed to get kalliope working on a RPi.", 
            "title": "Raspberry Pi configuration"
        }, 
        {
            "location": "/installation/raspbian/#microphone-configuration", 
            "text": "Get the output card:  aplay -l  Output example with a USB headset connected:  **** List of PLAYBACK Hardware Devices ****\ncard  0 : ALSA  [ bcm2835 ALSA ] , device  0 : bcm2835 ALSA  [ bcm2835 ALSA ] \n  Subdevices:  7 /8\n  Subdevice  #0: subdevice #0 \n  Subdevice  #1: subdevice #1 \n  Subdevice  #2: subdevice #2 \n  Subdevice  #3: subdevice #3 \n  Subdevice  #4: subdevice #4 \n  Subdevice  #5: subdevice #5 \n  Subdevice  #6: subdevice #6 \n  Subdevice  #7: subdevice #7 \ncard  0 : ALSA  [ bcm2835 ALSA ] , device  1 : bcm2835 ALSA  [ bcm2835 IEC958/HDMI ] \n  Subdevices:  1 /1\n  Subdevice  #0: subdevice #0 \ncard  1 : Headset  [ Logitech USB Headset ] , device  0 : USB Audio  [ USB Audio ] \n  Subdevices:  0 /1\n  Subdevice  #0: subdevice #0   Here we see that:   the analog audio (where the jack is connected) on card 0 and device 1  usb audio on card 1 and device 1   Get the input (microphone card):  arecord -l  Output example with a USB headset connected:  **** List of CAPTURE Hardware Devices ****\ncard  1 : Headset  [ Logitech USB Headset ] , device  0 : USB Audio  [ USB Audio ] \n  Subdevices:  0 /1\n  Subdevice  #0: subdevice #0   Here one shall see one peripheral on card 1 and device 0  Create a configuration file that applies the following configuration:\n- output audio (what Kalliope says) on the analog audio (via speakers connected to the jack)\n- input audio (what is said to Kalliope) on the USB microphone  Create a file in  /home/pi/.asoundrc  with the content below  pcm.!default {\n   type asym\n   playback.pcm {\n     type plug\n     slave.pcm  hw:0,0 \n   }\n   capture.pcm {\n     type plug\n     slave.pcm  hw:1,0 \n   }\n}  Where  playback.pcm  is the output audio and the  capture.pcm  is the input audio.  Restart alsa to apply changes:  sudo /etc/init.d/alsa-utils restart  Adjust the microphone sensibility by running alsamixer:  alsamixer  Select the microphone device by pressing F6 and move up the  mic  sensibility level:", 
            "title": "Microphone configuration"
        }, 
        {
            "location": "/installation/raspbian/#hdmi-analog-audio", 
            "text": "By default, the audio stream will use HDMI if something is plugged into this port.\nCheck the  official documentation  to switch from HDMI to analog.  sudo raspi-config", 
            "title": "HDMI / Analog audio"
        }, 
        {
            "location": "/installation/raspbian/#test-your-env", 
            "text": "", 
            "title": "Test your env"
        }, 
        {
            "location": "/installation/raspbian/#check-your-microphone-and-speaker-config", 
            "text": "To ensure that you can record your voice, run the following command to capture audio input from your microphone:  rec test.wav  Press CTRL-C after capturing a sample of your voice.  Then play the recorded audio file  mplayer test.wav  Your installation is now complete, let's take a look now to the  getting started documentation  to learn how to use Kalliope.", 
            "title": "Check your microphone and speaker config"
        }, 
        {
            "location": "/installation/raspbian/#optional-start-kalliope-automatically-after-a-reboot", 
            "text": "If you want to start Kalliope automatically Place the script bellow in  /etc/systemd/system/kalliope.service .  Update the path  my_config_path  with the path where you've placed your  brain.yml  and  settings.yml .  Update the  username  with a non root user. For example, on Raspbian you can set  pi .  [ Unit ]  Description = Kalliope [ Service ]  WorkingDirectory = my_config_path  Environment = STDOUT=/var/log/kalliope.log  Environment = STDERR=/var/log/kalliope.err.log  ExecStart = /bin/bash -c  /usr/local/bin/kalliope start    ${ STDOUT }  2   ${ STDERR }  User = username  [ Install ]  WantedBy = multi-user.target  E.g  [ Unit ]  Description = Kalliope [ Service ]  WorkingDirectory = /home/pi/my_kalliope_config Environment = STDOUT=/var/log/kalliope.log  Environment = STDERR=/var/log/kalliope.err.log  ExecStart = /bin/bash -c  /usr/local/bin/kalliope start    ${ STDOUT }  2   ${ STDERR }  User = pi [ Install ]  WantedBy = multi-user.target  Then, reload systemctl, start the service and enable it at startup  sudo systemctl daemon-reload\nsudo systemctl start kalliope\nsudo systemctl  enable  kalliope", 
            "title": "(Optional) Start Kalliope automatically after a reboot"
        }, 
        {
            "location": "/installation/debian/", 
            "text": "Kalliope requirements for Debian Jessie/Strech\n\n\nDebian packages requirements\n\n\nEdit \n/etc/apt/sources.list\n and check that you have \ncontrib\n and \nnon-free\n are enabled:\n\n\nOn Debian Jessie:\n\n\ndeb http://httpredir.debian.org/debian jessie main contrib non-free\ndeb-src http://httpredir.debian.org/debian jessie main contrib non-free\n\n\n\n\n\nOn Debian Strech:\n\n\ndeb http://httpredir.debian.org/debian strech main contrib non-free\ndeb-src http://httpredir.debian.org/debian strech main contrib non-free\n\n\n\n\n\nInstall some required system libraries and softwares:\n\n\nsudo apt-get update\nsudo apt-get install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac libffi-dev libffi-dev libssl-dev portaudio19-dev build-essential libssl-dev libffi-dev sox libatlas3-base mplayer libav-tools\n\n\n\n\n\nLet's install the last release of python-pip\n\n\nwget https://bootstrap.pypa.io/get-pip.py\nsudo python get-pip.py\n\n\n\n\n\nThen, with pip, the last release of setuptools\n\n\nsudo pip install -U setuptools\n\n\n\n\n\nKalliope installation\n\n\nMethod 1 - User install using the PIP package\n\n\nYou can install kalliope on your system by using Pypi:\n\n\nsudo pip install kalliope\n\n\n\n\n\nMethod 2 - Manual setup using sources\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nInstall the project:\n\n\nsudo python setup.py install\n\n\n\n\n\nMethod 3 - Developer install using Virtualenv\n\n\nInstall the \npython-virtualenv\n package:\n\n\nsudo apt-get install python-virtualenv\n\n\n\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nGenerate a local python environment:\n\n\nvirtualenv venv\n\n\n\n\n\nInstall the project using the local environment:\n\n\nvenv/bin/pip install --editable .\n\n\n\n\n\nActivate the local environment:\n\n\nsource\n venv/bin/activate\n\n\n\n\n\nMethod 4 - Developer, dependencies install only\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nInstall the python dependencies directly:\n\n\nsudo pip install -r install/files/python_requirements.txt\n\n\n\n\n\nTest your env\n\n\nCheck your microphone and speaker config\n\n\nTo ensure that you can record your voice, run the following command to capture audio input from your microphone:\n\n\nrec test.wav\n\n\n\n\n\nPress CTRL-C after capturing a sample of your voice.\n\n\nThen play the recorded audio file\n\n\nmplayer test.wav\n\n\n\n\n\nYour installation is now complete, let's take a look now to the \ngetting started documentation\n to learn how to use Kalliope.\n\n\n(Optional) Start Kalliope automatically after a reboot\n\n\nIf you want to start Kalliope automatically Place the script bellow in \n/etc/systemd/system/kalliope.service\n.\n\n\nUpdate the path \nmy_config_path\n with the path where you've placed your \nbrain.yml\n and \nsettings.yml\n.\n\n\nUpdate the \nusername\n with a non root user. For example, on Raspbian you can set \npi\n.\n\n\n[\nUnit\n]\n\n\nDescription\n=\nKalliope\n\n\n[\nService\n]\n\n\nWorkingDirectory\n=\nmy_config_path\n\n\n\nEnvironment\n=\nSTDOUT=/var/log/kalliope.log\n\n\nEnvironment\n=\nSTDERR=/var/log/kalliope.err.log\n\n\nExecStart\n=\n/bin/bash -c \n/usr/local/bin/kalliope start \n \n${\nSTDOUT\n}\n 2\n \n${\nSTDERR\n}\n\n\nUser\n=\nusername\n\n\n\n[\nInstall\n]\n\n\nWantedBy\n=\nmulti-user.target\n\n\n\n\n\nE.g\n\n\n[\nUnit\n]\n\n\nDescription\n=\nKalliope\n\n\n[\nService\n]\n\n\nWorkingDirectory\n=\n/home/pi/my_kalliope_config\n\n\nEnvironment\n=\nSTDOUT=/var/log/kalliope.log\n\n\nEnvironment\n=\nSTDERR=/var/log/kalliope.err.log\n\n\nExecStart\n=\n/bin/bash -c \n/usr/local/bin/kalliope start \n \n${\nSTDOUT\n}\n 2\n \n${\nSTDERR\n}\n\n\nUser\n=\npi\n\n\n[\nInstall\n]\n\n\nWantedBy\n=\nmulti-user.target\n\n\n\n\n\nThen, reload systemctl, start the service and enable it at startup\n\n\nsudo systemctl daemon-reload\nsudo systemctl start kalliope\nsudo systemctl \nenable\n kalliope", 
            "title": "Debian"
        }, 
        {
            "location": "/installation/debian/#kalliope-requirements-for-debian-jessiestrech", 
            "text": "", 
            "title": "Kalliope requirements for Debian Jessie/Strech"
        }, 
        {
            "location": "/installation/debian/#debian-packages-requirements", 
            "text": "Edit  /etc/apt/sources.list  and check that you have  contrib  and  non-free  are enabled:  On Debian Jessie:  deb http://httpredir.debian.org/debian jessie main contrib non-free\ndeb-src http://httpredir.debian.org/debian jessie main contrib non-free  On Debian Strech:  deb http://httpredir.debian.org/debian strech main contrib non-free\ndeb-src http://httpredir.debian.org/debian strech main contrib non-free  Install some required system libraries and softwares:  sudo apt-get update\nsudo apt-get install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac libffi-dev libffi-dev libssl-dev portaudio19-dev build-essential libssl-dev libffi-dev sox libatlas3-base mplayer libav-tools  Let's install the last release of python-pip  wget https://bootstrap.pypa.io/get-pip.py\nsudo python get-pip.py  Then, with pip, the last release of setuptools  sudo pip install -U setuptools", 
            "title": "Debian packages requirements"
        }, 
        {
            "location": "/installation/debian/#kalliope-installation", 
            "text": "", 
            "title": "Kalliope installation"
        }, 
        {
            "location": "/installation/debian/#method-1-user-install-using-the-pip-package", 
            "text": "You can install kalliope on your system by using Pypi:  sudo pip install kalliope", 
            "title": "Method 1 - User install using the PIP package"
        }, 
        {
            "location": "/installation/debian/#method-2-manual-setup-using-sources", 
            "text": "Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Install the project:  sudo python setup.py install", 
            "title": "Method 2 - Manual setup using sources"
        }, 
        {
            "location": "/installation/debian/#method-3-developer-install-using-virtualenv", 
            "text": "Install the  python-virtualenv  package:  sudo apt-get install python-virtualenv  Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Generate a local python environment:  virtualenv venv  Install the project using the local environment:  venv/bin/pip install --editable .  Activate the local environment:  source  venv/bin/activate", 
            "title": "Method 3 - Developer install using Virtualenv"
        }, 
        {
            "location": "/installation/debian/#method-4-developer-dependencies-install-only", 
            "text": "Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Install the python dependencies directly:  sudo pip install -r install/files/python_requirements.txt", 
            "title": "Method 4 - Developer, dependencies install only"
        }, 
        {
            "location": "/installation/debian/#test-your-env", 
            "text": "", 
            "title": "Test your env"
        }, 
        {
            "location": "/installation/debian/#check-your-microphone-and-speaker-config", 
            "text": "To ensure that you can record your voice, run the following command to capture audio input from your microphone:  rec test.wav  Press CTRL-C after capturing a sample of your voice.  Then play the recorded audio file  mplayer test.wav  Your installation is now complete, let's take a look now to the  getting started documentation  to learn how to use Kalliope.", 
            "title": "Check your microphone and speaker config"
        }, 
        {
            "location": "/installation/debian/#optional-start-kalliope-automatically-after-a-reboot", 
            "text": "If you want to start Kalliope automatically Place the script bellow in  /etc/systemd/system/kalliope.service .  Update the path  my_config_path  with the path where you've placed your  brain.yml  and  settings.yml .  Update the  username  with a non root user. For example, on Raspbian you can set  pi .  [ Unit ]  Description = Kalliope [ Service ]  WorkingDirectory = my_config_path  Environment = STDOUT=/var/log/kalliope.log  Environment = STDERR=/var/log/kalliope.err.log  ExecStart = /bin/bash -c  /usr/local/bin/kalliope start    ${ STDOUT }  2   ${ STDERR }  User = username  [ Install ]  WantedBy = multi-user.target  E.g  [ Unit ]  Description = Kalliope [ Service ]  WorkingDirectory = /home/pi/my_kalliope_config Environment = STDOUT=/var/log/kalliope.log  Environment = STDERR=/var/log/kalliope.err.log  ExecStart = /bin/bash -c  /usr/local/bin/kalliope start    ${ STDOUT }  2   ${ STDERR }  User = pi [ Install ]  WantedBy = multi-user.target  Then, reload systemctl, start the service and enable it at startup  sudo systemctl daemon-reload\nsudo systemctl start kalliope\nsudo systemctl  enable  kalliope", 
            "title": "(Optional) Start Kalliope automatically after a reboot"
        }, 
        {
            "location": "/installation/ubuntu/", 
            "text": "Kalliope requirements for Ubuntu\n\n\nPre requisite\n\n\nUbuntu 14.04\n\n\nInstall some required system libraries and softwares:\n\n\nsudo apt-get update\nsudo apt-get install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac libffi-dev libffi-dev libssl-dev libjack0 libjack-dev portaudio19-dev build-essential libssl-dev libffi-dev sox libatlas3-base mplayer libav-tools\n\n\n\n\n\nRecent version of GCC is needed\n\n\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\nsudo apt-get update -q\nsudo apt-get install gcc-4.9\n\n\n\n\n\nUbuntu 16.04\n\n\nInstall some required system libraries and softwares:\n\n\nsudo apt-get update\nsudo apt-get install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac libffi-dev libffi-dev libssl-dev portaudio19-dev build-essential libssl-dev libffi-dev sox libatlas3-base mplayer libav-tools\n\n\n\n\n\nUbuntu 18.04\n\n\nInstall some required system libraries and software:\n\n\nsudo apt update\nsudo apt install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac dialog libffi-dev libssl-dev portaudio19-dev build-essential libssl-dev sox libatlas3-base mplayer\n\n\n\n\n\nNote, if you are using python 3,\n\n\nsudo apt install python3-dev python3-dialog\n\n\n\n\n\nInstall lasted version of the python package manager\n\n\nInstall the last release of python-pip\n\n\nwget https://bootstrap.pypa.io/get-pip.py\nsudo python get-pip.py\n\n\n\n\n\nKalliope installation\n\n\nMethod 1 - User install using the PIP package\n\n\nYou can install kalliope on your system by using Pypi:\n\n\nsudo pip install kalliope\n\n\n\n\n\nMethod 2 - Manual setup using sources\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nInstall the project:\n\n\nsudo python setup.py install\n\n\n\n\n\nMethod 3 - Developer install using Virtualenv\n\n\nInstall the \npython-virtualenv\n package:\n\n\nsudo apt-get install python-virtualenv\n\n\n\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nGenerate a local python environment:\n\n\nvirtualenv venv\n\n\n\n\n\nInstall the project using the local environment:\n\n\nvenv/bin/pip install --editable .\n\n\n\n\n\nActivate the local environment:\n\n\nsource\n venv/bin/activate\n\n\n\n\n\nMethod 4 - Developer, dependencies install only\n\n\nClone the project:\n\n\ngit clone https://github.com/kalliope-project/kalliope.git\n\ncd\n kalliope\n\n\n\n\n\nInstall the python dependencies directly:\n\n\nsudo pip install -r install/files/python_requirements.txt\n\n\n\n\n\nTest your env\n\n\nCheck your microphone and speaker config\n\n\nTo ensure that you can record your voice, run the following command to capture audio input from your microphone:\n\n\nrec test.wav\n\n\n\n\n\nPress CTRL-C after capturing a sample of your voice.\n\n\nThen play the recorded audio file\n\n\nmplayer test.wav\n\n\n\n\n\nYour installation is now complete, let's take a look now to the \ngetting started documentation\n to learn how to use Kalliope.\n\n\n(Optional) Start Kalliope automatically after a reboot\n\n\nIf you want to start Kalliope automatically Place the script bellow in \n/etc/systemd/system/kalliope.service\n.\n\n\nUpdate the path \nmy_config_path\n with the path where you've placed your \nbrain.yml\n and \nsettings.yml\n.\n\n\nUpdate the \nusername\n with a non root user. For example, on Raspbian you can set \npi\n.\n\n\n[\nUnit\n]\n\n\nDescription\n=\nKalliope\n\n\n[\nService\n]\n\n\nWorkingDirectory\n=\nmy_config_path\n\n\n\nEnvironment\n=\nSTDOUT=/var/log/kalliope.log\n\n\nEnvironment\n=\nSTDERR=/var/log/kalliope.err.log\n\n\nExecStart\n=\n/bin/bash -c \n/usr/local/bin/kalliope start \n \n${\nSTDOUT\n}\n 2\n \n${\nSTDERR\n}\n\n\nUser\n=\nusername\n\n\n\n[\nInstall\n]\n\n\nWantedBy\n=\nmulti-user.target\n\n\n\n\n\nE.g\n\n\n[\nUnit\n]\n\n\nDescription\n=\nKalliope\n\n\n[\nService\n]\n\n\nWorkingDirectory\n=\n/home/pi/my_kalliope_config\n\n\nEnvironment\n=\nSTDOUT=/var/log/kalliope.log\n\n\nEnvironment\n=\nSTDERR=/var/log/kalliope.err.log\n\n\nExecStart\n=\n/bin/bash -c \n/usr/local/bin/kalliope start \n \n${\nSTDOUT\n}\n 2\n \n${\nSTDERR\n}\n\n\nUser\n=\npi\n\n\n[\nInstall\n]\n\n\nWantedBy\n=\nmulti-user.target\n\n\n\n\n\nThen, reload systemctl, start the service and enable it at startup\n\n\nsudo systemctl daemon-reload\nsudo systemctl start kalliope\nsudo systemctl \nenable\n kalliope", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/installation/ubuntu/#kalliope-requirements-for-ubuntu", 
            "text": "", 
            "title": "Kalliope requirements for Ubuntu"
        }, 
        {
            "location": "/installation/ubuntu/#pre-requisite", 
            "text": "", 
            "title": "Pre requisite"
        }, 
        {
            "location": "/installation/ubuntu/#ubuntu-1404", 
            "text": "Install some required system libraries and softwares:  sudo apt-get update\nsudo apt-get install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac libffi-dev libffi-dev libssl-dev libjack0 libjack-dev portaudio19-dev build-essential libssl-dev libffi-dev sox libatlas3-base mplayer libav-tools  Recent version of GCC is needed  sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\nsudo apt-get update -q\nsudo apt-get install gcc-4.9", 
            "title": "Ubuntu 14.04"
        }, 
        {
            "location": "/installation/ubuntu/#ubuntu-1604", 
            "text": "Install some required system libraries and softwares:  sudo apt-get update\nsudo apt-get install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac libffi-dev libffi-dev libssl-dev portaudio19-dev build-essential libssl-dev libffi-dev sox libatlas3-base mplayer libav-tools", 
            "title": "Ubuntu 16.04"
        }, 
        {
            "location": "/installation/ubuntu/#ubuntu-1804", 
            "text": "Install some required system libraries and software:  sudo apt update\nsudo apt install git python-dev libsmpeg0 libttspico-utils libsmpeg0 flac dialog libffi-dev libssl-dev portaudio19-dev build-essential libssl-dev sox libatlas3-base mplayer  Note, if you are using python 3,  sudo apt install python3-dev python3-dialog", 
            "title": "Ubuntu 18.04"
        }, 
        {
            "location": "/installation/ubuntu/#install-lasted-version-of-the-python-package-manager", 
            "text": "Install the last release of python-pip  wget https://bootstrap.pypa.io/get-pip.py\nsudo python get-pip.py", 
            "title": "Install lasted version of the python package manager"
        }, 
        {
            "location": "/installation/ubuntu/#kalliope-installation", 
            "text": "", 
            "title": "Kalliope installation"
        }, 
        {
            "location": "/installation/ubuntu/#method-1-user-install-using-the-pip-package", 
            "text": "You can install kalliope on your system by using Pypi:  sudo pip install kalliope", 
            "title": "Method 1 - User install using the PIP package"
        }, 
        {
            "location": "/installation/ubuntu/#method-2-manual-setup-using-sources", 
            "text": "Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Install the project:  sudo python setup.py install", 
            "title": "Method 2 - Manual setup using sources"
        }, 
        {
            "location": "/installation/ubuntu/#method-3-developer-install-using-virtualenv", 
            "text": "Install the  python-virtualenv  package:  sudo apt-get install python-virtualenv  Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Generate a local python environment:  virtualenv venv  Install the project using the local environment:  venv/bin/pip install --editable .  Activate the local environment:  source  venv/bin/activate", 
            "title": "Method 3 - Developer install using Virtualenv"
        }, 
        {
            "location": "/installation/ubuntu/#method-4-developer-dependencies-install-only", 
            "text": "Clone the project:  git clone https://github.com/kalliope-project/kalliope.git cd  kalliope  Install the python dependencies directly:  sudo pip install -r install/files/python_requirements.txt", 
            "title": "Method 4 - Developer, dependencies install only"
        }, 
        {
            "location": "/installation/ubuntu/#test-your-env", 
            "text": "", 
            "title": "Test your env"
        }, 
        {
            "location": "/installation/ubuntu/#check-your-microphone-and-speaker-config", 
            "text": "To ensure that you can record your voice, run the following command to capture audio input from your microphone:  rec test.wav  Press CTRL-C after capturing a sample of your voice.  Then play the recorded audio file  mplayer test.wav  Your installation is now complete, let's take a look now to the  getting started documentation  to learn how to use Kalliope.", 
            "title": "Check your microphone and speaker config"
        }, 
        {
            "location": "/installation/ubuntu/#optional-start-kalliope-automatically-after-a-reboot", 
            "text": "If you want to start Kalliope automatically Place the script bellow in  /etc/systemd/system/kalliope.service .  Update the path  my_config_path  with the path where you've placed your  brain.yml  and  settings.yml .  Update the  username  with a non root user. For example, on Raspbian you can set  pi .  [ Unit ]  Description = Kalliope [ Service ]  WorkingDirectory = my_config_path  Environment = STDOUT=/var/log/kalliope.log  Environment = STDERR=/var/log/kalliope.err.log  ExecStart = /bin/bash -c  /usr/local/bin/kalliope start    ${ STDOUT }  2   ${ STDERR }  User = username  [ Install ]  WantedBy = multi-user.target  E.g  [ Unit ]  Description = Kalliope [ Service ]  WorkingDirectory = /home/pi/my_kalliope_config Environment = STDOUT=/var/log/kalliope.log  Environment = STDERR=/var/log/kalliope.err.log  ExecStart = /bin/bash -c  /usr/local/bin/kalliope start    ${ STDOUT }  2   ${ STDERR }  User = pi [ Install ]  WantedBy = multi-user.target  Then, reload systemctl, start the service and enable it at startup  sudo systemctl daemon-reload\nsudo systemctl start kalliope\nsudo systemctl  enable  kalliope", 
            "title": "(Optional) Start Kalliope automatically after a reboot"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started with Kalliope\n\n\nKalliope needs two files to works, a \nsettings.yml\n and a \nbrain.yml\n.\nAs files are written on YAML syntax, we strongly recommend you to use an editor(IDE) like \nVS Code\n or \nAtom\n.\n\n\nIf you are using kalliope from a Rpi, the idea would be to configure your assistant from your main computer with an IDE and then push your config folder into your Rpi.\n\n\nWhen you start kalliope using the CLI (\nkalliope start\n), the program will try to load your \nsettings.yml\n and \nbrain.yml\n in the following order:\n\n\n\n\nFrom your current folder, E.g \n/home/pi/my_kalliope/\n\n\nFrom \n/etc/kalliope/\n\n\nFrom the default \nsettings.yml\n and \nbrain.yml\n which are located in the root of the Kalliope project tree.\n\n\n\n\nThis is a common tree of a Kalliope configuration folder:\n\n\nkalliope_config/\n\u251c\u2500\u2500 brains\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 included_brain.yml\n\u251c\u2500\u2500 brain.yml\n\u251c\u2500\u2500 files\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 kalliope-EN-13samples.pmdl\n\u2514\u2500\u2500 settings.yml\n\n\n\n\n\nWe made starter kits that only needs to be cloned, placed into the Rpi and launched. You'll find the whole list of available start kits on the \nKalliope's website\n.\nThose repositories provide you a structure to start playing and learning basics of Kalliope.\nDownload the starter kit of your choice and open the folder with your IDE.\n\n\nAll files are expressed in YAML format (see \nYAML Syntax\n) and has a minimum of syntax, which intentionally tries to not be a programming language or script,\nbut rather a model of a configuration or a process.\n\n\nLet's open the main brain file of the English starter kit. You'll see there are some included sub brains file.\n\n\n-\n \nincludes\n:\n\n    \n-\n \nbrains/say.yml\n\n\n\n\n\n\nIf you open the \nsay.yml\n file from the brains folder, you'll see a basic \nsynapse\n that uses the \nneuron\n \"\nSay\n\" and make Kalliope speaks out loud \"Hello sir\" when you say \"hello\".\n\n\n-\n \nname\n:\n \nsay-hello-en\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nHello\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n \nHello\n \nsir\n\n\n\n\n\n\nLet's break this down in sections so we can understand how the file is built and what each part means.\n\n\nItems that begin with a \n-\n are considered as list items. Items have the format of \nkey: value\n where value can be a simple string or a sequence of other items.\n\n\nAt the top level we have a \"name\" tag. This is the \nunique identifier\n of the synapse. It must be an unique word with the only accepted values : alphanumerics and dash. ([a - zA - Z0 - 9-])\n\n\n-\n \nname\n:\n \nSay-hello\n\n\n\n\n\n\nThe first part, called \nsignals\n is a list of input actions.\nYou can add as many signal as you want in the \"signals\" section. If one of them is triggered, te neuron list will be executed.\n\n\nsignals\n:\n\n  \n-\n \norder\n:\n \nsay-hello\n\n\n\n\n\n\nIn the following example, we use just one signal, an \"order\", but it an can be:\n\n\n\n\nan order:\n Something that has been spoke out loud by the user.\n\n\nan event:\n A date or a frequency (E.G: repeat each morning at 8:30)\n\n\na mqtt message\n A message received on a MQTT topic\n\n\na geolocation\n From the position of your smartphone\n\n\na community signal\n E.g: GPIO signal allow you to trigger actions from a button\n\n\nNo signal\n. Then the synapse can be only called from another synapse or by the API\n\n\n\n\nThen we have the \nneurons\n declaration. Neurons are modules that will be executed when the input action(signal) is triggered. You can define as many neurons as you want to the same input action (for example: say something, then do something etc...). This declaration contains a list (because it starts with a \"-\") of neurons\n\n\nneurons\n:\n\n  \n-\n \nneuron_1_name\n\n  \n-\n \nneuron_2_name\n\n  \n-\n \nanother_neuron\n\n\n\n\n\n\nThe order of execution of neurons is defined by the order in which they are listed in neurons declaration.\n\n\nSome neurons need parameters that can be passed as arguments following the syntax bellow:\n\n\nneurons\n:\n\n  \n-\n \nneuron_name\n:\n\n      \nparameter1\n:\n \nvalue1\n\n      \nparameter2\n:\n \nvalue2\n\n\n\n\n\n\nNote here that parameters are indented with one tabulation bellow the neuron's name (YAML syntax requirement).\n\n\nIn this example, the neuron called \"say\" will make Kalliope speak out loud the sentence in parameter \nmessage\n.\n\n\nNeurons can be Core (installed by default) or community based (need to be installed).\n\n\nTime to start Kalliope. Move into the folder and then start Kalliope:\n\n\ncd\n /path/to/the/starter_kit\nkalliope start\n\n\n\n\n\n\n\nNote:\n Do not start Kalliope as root user or with sudo\n\n\n\n\nKalliope will load settings and brain, the output should looks the following\n\n\nStarting event manager\nEvents loaded\nStarting Kalliope\nPress Ctrl+C \nfor\n stopping\nStarting REST API Listening port: \n5000\n\nWaiting \nfor\n trigger detection\n\n\n\n\n\nThen speak the hotwork out loud to wake up Kalliope (with the right pronunciation depending on your starter kit. \"Kalliop\u00e9\" in french, \"Kalliopee\" in English, etc..).\nIf the trigger is successfully raised, you'll see \"say something\" into the console.\n\n\nSay something!\n\n\n\n\n\nThen you can say \"hello\" and listen the Kalliope response.\n\n\nSay something!\nGoogle Speech Recognition thinks you said hello\nOrder matched in the brain. Running synapse \nsay-hello\n\nWaiting \nfor\n trigger detection\n\n\n\n\n\nThat's it! You are ready to customize your assistant!", 
            "title": "Getting-started"
        }, 
        {
            "location": "/getting-started/#getting-started-with-kalliope", 
            "text": "Kalliope needs two files to works, a  settings.yml  and a  brain.yml .\nAs files are written on YAML syntax, we strongly recommend you to use an editor(IDE) like  VS Code  or  Atom .  If you are using kalliope from a Rpi, the idea would be to configure your assistant from your main computer with an IDE and then push your config folder into your Rpi.  When you start kalliope using the CLI ( kalliope start ), the program will try to load your  settings.yml  and  brain.yml  in the following order:   From your current folder, E.g  /home/pi/my_kalliope/  From  /etc/kalliope/  From the default  settings.yml  and  brain.yml  which are located in the root of the Kalliope project tree.   This is a common tree of a Kalliope configuration folder:  kalliope_config/\n\u251c\u2500\u2500 brains\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 included_brain.yml\n\u251c\u2500\u2500 brain.yml\n\u251c\u2500\u2500 files\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 kalliope-EN-13samples.pmdl\n\u2514\u2500\u2500 settings.yml  We made starter kits that only needs to be cloned, placed into the Rpi and launched. You'll find the whole list of available start kits on the  Kalliope's website .\nThose repositories provide you a structure to start playing and learning basics of Kalliope.\nDownload the starter kit of your choice and open the folder with your IDE.  All files are expressed in YAML format (see  YAML Syntax ) and has a minimum of syntax, which intentionally tries to not be a programming language or script,\nbut rather a model of a configuration or a process.  Let's open the main brain file of the English starter kit. You'll see there are some included sub brains file.  -   includes : \n     -   brains/say.yml   If you open the  say.yml  file from the brains folder, you'll see a basic  synapse  that uses the  neuron  \" Say \" and make Kalliope speaks out loud \"Hello sir\" when you say \"hello\".  -   name :   say-hello-en \n   signals : \n     -   order :   Hello \n   neurons : \n     -   say : \n         message :   Hello   sir   Let's break this down in sections so we can understand how the file is built and what each part means.  Items that begin with a  -  are considered as list items. Items have the format of  key: value  where value can be a simple string or a sequence of other items.  At the top level we have a \"name\" tag. This is the  unique identifier  of the synapse. It must be an unique word with the only accepted values : alphanumerics and dash. ([a - zA - Z0 - 9-])  -   name :   Say-hello   The first part, called  signals  is a list of input actions.\nYou can add as many signal as you want in the \"signals\" section. If one of them is triggered, te neuron list will be executed.  signals : \n   -   order :   say-hello   In the following example, we use just one signal, an \"order\", but it an can be:   an order:  Something that has been spoke out loud by the user.  an event:  A date or a frequency (E.G: repeat each morning at 8:30)  a mqtt message  A message received on a MQTT topic  a geolocation  From the position of your smartphone  a community signal  E.g: GPIO signal allow you to trigger actions from a button  No signal . Then the synapse can be only called from another synapse or by the API   Then we have the  neurons  declaration. Neurons are modules that will be executed when the input action(signal) is triggered. You can define as many neurons as you want to the same input action (for example: say something, then do something etc...). This declaration contains a list (because it starts with a \"-\") of neurons  neurons : \n   -   neuron_1_name \n   -   neuron_2_name \n   -   another_neuron   The order of execution of neurons is defined by the order in which they are listed in neurons declaration.  Some neurons need parameters that can be passed as arguments following the syntax bellow:  neurons : \n   -   neuron_name : \n       parameter1 :   value1 \n       parameter2 :   value2   Note here that parameters are indented with one tabulation bellow the neuron's name (YAML syntax requirement).  In this example, the neuron called \"say\" will make Kalliope speak out loud the sentence in parameter  message .  Neurons can be Core (installed by default) or community based (need to be installed).  Time to start Kalliope. Move into the folder and then start Kalliope:  cd  /path/to/the/starter_kit\nkalliope start   Note:  Do not start Kalliope as root user or with sudo   Kalliope will load settings and brain, the output should looks the following  Starting event manager\nEvents loaded\nStarting Kalliope\nPress Ctrl+C  for  stopping\nStarting REST API Listening port:  5000 \nWaiting  for  trigger detection  Then speak the hotwork out loud to wake up Kalliope (with the right pronunciation depending on your starter kit. \"Kalliop\u00e9\" in french, \"Kalliopee\" in English, etc..).\nIf the trigger is successfully raised, you'll see \"say something\" into the console.  Say something!  Then you can say \"hello\" and listen the Kalliope response.  Say something!\nGoogle Speech Recognition thinks you said hello\nOrder matched in the brain. Running synapse  say-hello \nWaiting  for  trigger detection  That's it! You are ready to customize your assistant!", 
            "title": "Getting started with Kalliope"
        }, 
        {
            "location": "/settings/settings/", 
            "text": "settings.yml\n\n\nThis part of the documentation explains the main configuration of Kalliope placed in the \nsettings.yml\n file.\n\n\nKalliope will look for the settings file in the order bellow:\n\n\n\n\nFrom you current folder, E.g \n/home/pi/my_kalliope/settings.yml\n\n\nFrom \n/etc/kalliope/settings.yml\n\n\nFrom the default \nsettings.yml\n located in the root of the project tree.\n\n\n\n\nTriggers configuration\n\n\ndefault_trigger\n\n\nThe trigger is the engine in charge of detecting the hotword that will wake up Kalliope.\nCommon usage of hotword include \"Alexa\" on Amazon Echo, \"OK Google\" on some Android devices and \"Hey Siri\" on iPhones.\n\n\nSpecify the name of the trigger module you want to use.\n\n\ndefault_trigger\n:\n \ntrigger_name\n\n\n\n\n\n\nE.g\n\n\ndefault_trigger\n:\n \nsnowboy\n\n\n\n\n\n\ntriggers\n\n\nThe hotword (also called a wake word or trigger word) detector is the engine in charge of waking up Kalliope.\n\n\nEach Trigger has it own configuration. This configuration is passed as argument following the syntax bellow\n\n\ntriggers\n:\n\n  \n-\n \ntrigger_name\n:\n\n      \nparameter_name\n:\n \nvalue\n\n\n\n\n\n\nE.g, the default Snowboy trigger configuration is\n\n\ntriggers\n:\n\n  \n-\n \nsnowboy\n:\n\n      \npmdl_file\n:\n \ntrigger/snowboy/resources/model.pmdl\n\n\n\n\n\n\nSettings example\n\n\ndefault_trigger\n:\n \nsnowboy\n\n\ntriggers\n:\n\n  \n-\n \nsnowboy\n:\n\n      \npmdl_file\n:\n \ntrigger/snowboy/resources/model.pmdl\n\n\n\n\n\n\nAvailable trigger engine\n\n\n\n\n\n\n\n\nDoc\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nsnowboy\n\n\nBased on \nSnowboy software\n\n\n\n\n\n\n\n\nPlayers configuration\n\n\nThe player is the library/software used to make Kalliope talk.\nWith Kalliope project, you can set whatever sound player you want to use.\n\n\ndefault_player\n\n\nSpecify the name of the player module you want to use.\n\n\ndefault_player\n:\n \nplayer_name\n\n\n\n\n\n\nE.g\n\n\ndefault_player\n:\n \nmplayer\n\n\n\n\n\n\nplayers\n\n\nEach Players has it own configuration.\nThis configuration is passed as argument following the syntax bellow\n\n\nplayers\n:\n\n  \n-\n \nplayer_name\n:\n\n      \nparameter_name\n:\n \nvalue\n\n\n\n\n\n\nWhen no parameters are required set an empty object:\n\n\nplayers\n:\n\n  \n-\n \nmplayer\n:\n \n{}\n\n\n\n\n\n\nSettings example\n\n\nplayers\n:\n\n  \n-\n \nmplayer\n:\n \n{}\n\n  \n-\n \npyalsaaudio\n:\n\n     \ndevice\n:\n \ndefault\n\n     \nconvert_to_wav\n:\n \nTrue\n\n  \n-\n \npyaudioplayer\n:\n\n     \nconvert_to_wav\n:\n \nTrue\n\n  \n-\n \nsounddeviceplayer\n:\n\n     \nconvert_to_wav\n:\n \nTrue\n\n\n\n\n\n\n\n\nNote:\n Sometime, parameters will be necessary to use an engine.\nClick on a Player engine link in the \nCurrent CORE Available Players\n section to know which parameter are required.\n\n\nNote:\n A player which does not ask for input parameters need to be declared as an empty dict. E.g: \n- player_name: {}\n\n\nNote:\n Core players are already packaged with the installation of Kalliope an can be used out of the box.\n\n\nNote:\n Most cloud based TTS generate a file in MP3 format. Some players are not able to read this format and then a conversion to wav is needed.\n\n\n\n\nAvailable players\n\n\nCore Players are already packaged with the installation of Kalliope an can be used out of the box.\n\n\n\n\n\n\n\n\nDoc\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nmplayer\n\n\nBased on \nmplayer software\n\n\n\n\n\n\npyalsaaudio\n\n\nBased on [pyalsaaudio](https://larsimmisch.github.io/pyalsaaudio/libalsaaudio.html lib\n\n\n\n\n\n\npyaudioplayer\n\n\nBased on \npyaudio\n lib\n\n\n\n\n\n\nsounddeviceplayer\n\n\nBased on \nsounddevice\n lib\n\n\n\n\n\n\n\n\nSpeech to text configuration\n\n\ndefault_speech_to_text\n\n\nA Speech To Text(STT) is an engine used to translate what you say into a text that can be processed by Kalliope core.\nBy default, Kalliope uses google STT engine.\n\n\nThe following syntax is used to provide the engine name:\n\n\ndefault_speech_to_text\n:\n \nstt_name\n\n\n\n\n\n\nE.g\n\n\ndefault_speech_to_text\n:\n \ngoogle\n\n\n\n\n\n\nspeech_to_text\n\n\nEach STT has it own configuration. This configuration is passed as argument as shown bellow\n\n\nspeech_to_text\n:\n\n  \n-\n \nstt_name\n:\n\n      \nparameter_name\n:\n \nvalue\n\n\n\n\n\n\nE.g:\n\n\nspeech_to_text\n:\n\n  \n-\n \ngoogle\n:\n\n      \nlanguage\n:\n \nfr-FR\n\n  \n-\n \nbing\n\n\n\n\n\n\nSettings example\n\n\ndefault_speech_to_text: \ngoogle\n\nspeech_to_text:\n  - google:\n      language: \nfr-FR\n\n  - wit:\n      key: \nB5JI3YUSLYOYWNIZRNBVM34XUODME2K\n\n  - bing:\n      key: \n9e48dert65904838bedc11aea6b36fb0\n\n  - apiai:\n      key: \ne0cbff145af44944a6b9f82c0668b527\n\n      language: \nfr\n\n  - houndify:\n      key: \n6ej90T7qAV74OYXk4X4vI2Xhk7wPsJu4aEZ0G5Ll-BMmV1JGtFpCxtSH9SmTY4G3bpEJ7a5y_GTQid-CAKI6vw==\n\n      client_id: \nlM2JXeaSticbSo9-llczbA==\n\n\n\n\n\n\nAvailable STT\n\n\nCore STTs are already packaged with the installation of Kalliope an can be used out of the box.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\napiai\n\n\nCloud based\n\n\n\n\n\n\nBing\n\n\nCloud based\n\n\n\n\n\n\nCMUSphinx\n\n\nSelf hosted\n\n\n\n\n\n\nGoogle\n\n\nCloud based\n\n\n\n\n\n\nHoundify\n\n\nCloud based\n\n\n\n\n\n\nwit.ai\n\n\nCloud based\n\n\n\n\n\n\n\n\nText to speech configuration\n\n\ndefault_text_to_speech\n\n\nA Text To Speech is an engine used to translate written text into a speech, into an audio stream.\nBy default, Kalliope use Pico2wave TTS engine.\n\n\nThe following syntax is used to provide the TTS engine name\n\n\ndefault_text_to_speech\n:\n \ntts_name\n\n\n\n\n\n\nEg\n\n\ndefault_text_to_speech: \npico2wave\n\n\n\n\n\n\ntext_to_speech\n\n\nEach TTS has it own configuration. This configuration is passed as argument following the syntax bellow\n\n\ntext_to_speech\n:\n\n  \n-\n \ntts_name\n:\n\n      \nparameter_name\n:\n \nvalue\n\n\n\n\n\n\nE.g\n\n\ntext_to_speech\n:\n\n  \n-\n \npico2wave\n:\n\n      \nlanguage\n:\n \nfr-FR\n\n  \n-\n \ngoogletts\n:\n\n      \nlanguage\n:\n \nfr\n\n\n\n\n\n\ncache_path\n\n\nTTS engines work all the same, we give them a text, they give back an audio file and we play the audio file. The generated audio file is placed in cache until it\nis played by the audio player. Before generating a new audio file, Kalliope will take a look to the cache to load it directly without having to call the\nTSS engine if the file has been generated before.\n\n\nYou must set a path where the cache will be saved in the tag \ncache_path\n. This one is placed in /tmp by default.\n\n\ncache_path: \n/tmp/kalliope_tts_cache\n\n\n\n\n\n\n\n\nNote:\n The path must be a valid path, and the current user must has enough right to read and write in it.\n\n\nNote:\n The consumed disk space can dramatically increase in the cache path folder. It is recommended to set your neuron correctly to clean up automatically\ngenerated audio files that will not be played more than once.\n\n\n\n\nSettings example\n\n\ndefault_text_to_speech\n:\n \nvoicerss\n\n\n\ncache_path\n:\n \n/tmp/kalliope_tts_cache\n\n\n\ntext_to_speech\n:\n\n  \n-\n \npico2wave\n:\n\n      \nlanguage\n:\n \nfr-FR\n\n      \ncache\n:\n \nTrue\n\n  \n-\n \nacapela\n:\n\n      \nlanguage\n:\n \nsonid15\n\n      \nvoice\n:\n \nManon\n\n      \ncache\n:\n \nFalse\n\n  \n-\n \ngoogletts\n:\n\n      \nlanguage\n:\n \nfr\n\n  \n-\n \nvoicerss\n:\n\n      \nlanguage\n:\n \nfr-fr\n\n      \ncache\n:\n \nTrue\n\n\n\n\n\n\nAvailable TTS\n\n\nCore TTSs are already packaged with the installation of Kalliope an can be used out of the box.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nespeak\n\n\nSelf hosted\n\n\n\n\n\n\ngoogletts\n\n\nCloud based\n\n\n\n\n\n\npico2wave\n\n\nSelf hosted\n\n\n\n\n\n\nvoicerss\n\n\nCloud based\n\n\n\n\n\n\nwatson\n\n\nCloud based\n\n\n\n\n\n\n\n\nHooks\n\n\nHooking allow to bind actions to events based on the lifecycle of Kalliope.\nFor example, it's useful to know when Kalliope has detected the hotword from the trigger engine and make her spell out loud that she's ready to listen your order.\n\n\nTo use a hook, attach the name of the hook to a synapse (or list of synapse) which exists in your brain.\n\n\nSyntax:\n\n\nhooks\n:\n\n  \nhook_name1\n:\n \nsynapse_name\n\n  \nhook_name2\n:\n\n    \n-\n \nsynapse_name_1\n\n    \n-\n \nsynapse_name_2\n\n\n\n\n\n\nE.g.\n\n\nhooks\n:\n\n  \non_start\n:\n \non-start-synapse\n\n\n\n\n\n\nList of available hook\n\n\n\n\n\n\n\n\nHook name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\non_start\n\n\nWhen kalliope is started. This hook will only be triggered once\n\n\n\n\n\n\non_waiting_for_trigger\n\n\nWhen Kalliope waits for the hotword detection\n\n\n\n\n\n\non_triggered\n\n\nWhen the hotword has been detected\n\n\n\n\n\n\non_start_listening\n\n\nWhen the Speech to Text engine is listening for an order\n\n\n\n\n\n\non_stop_listening\n\n\nWhen the Speech to Text engine stop listening for an order\n\n\n\n\n\n\non_order_found\n\n\nWhen the pronounced order has been found in the brain\n\n\n\n\n\n\non_order_not_found\n\n\nWhen the pronounced order has not been found in the brain\n\n\n\n\n\n\non_processed_synapses\n\n\nWhen all neurons in synapses have been processed\n\n\n\n\n\n\non_deaf\n\n\nWhen Kalliope switches from non deaf to deaf\n\n\n\n\n\n\non_undeaf\n\n\nWhen Kalliope switches from deaf to non deaf\n\n\n\n\n\n\non_mute\n\n\nWhen Kalliope switches from non mute to mute\n\n\n\n\n\n\non_unmute\n\n\nWhen Kalliope switches from mute to non mute\n\n\n\n\n\n\non_start_speaking\n\n\nWhen Kalliope starts speaking via the text to speech engine\n\n\n\n\n\n\non_stop_speaking\n\n\nWhen Kalliope stops speaking\n\n\n\n\n\n\non_stt_error\n\n\nWhen an error appeared during the STT processing\n\n\n\n\n\n\n\n\nSettings example\n\n\nExample: You want to hear a random answer when the hotword has been triggered\n\n\nsettings.yml\n\n\nhooks\n:\n\n  \non_triggered\n:\n \non-triggered-synapse\n\n\n\n\n\n\nbrain.yml\n\n\n-\n \nname\n:\n \non-triggered-synapse\n\n  \nsignals\n:\n \n[]\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nyes\n \nsir?\n\n          \n-\n \nI\nm\n \nlistening\n\n          \n-\n \nI\nm\n \nlistening\n \nto\n \nyou\n\n          \n-\n \nsir?\n\n          \n-\n \nwhat\n \ncan\n \ni\n \ndo\n \nfor\n \nyou?\n\n          \n-\n \nSpeaking\n\n          \n-\n \nhow\n \ncan\n \ni\n \nhelp\n \nyou?\n\n\n\n\n\n\nExample: You want to know that your order has not been found\n\n\nsettings.yml\n\n\nhooks\n:\n\n  \non_order_not_found\n:\n \norder-not-found-synapse\n\n\n\n\n\n\nbrain.yml\n\n\n-\n \nname\n:\n \norder-not-found-synapse\n\n    \nsignals\n:\n \n[]\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nI\n \nhaven\nt\n \nunderstood\n\n            \n-\n \nI\n \ndon\nt\n \nknow\n \nthis\n \norder\n\n            \n-\n \nPlease\n \nrenew\n \nyour\n \norder\n\n            \n-\n \nWould\n \nyou\n \nplease\n \nreword\n \nyour\n \norder\n\n            \n-\n \nCan\n \nou\n \nplease\n \nreformulate\n \nyour\n \norder\n\n            \n-\n \nI\n \ndon\nt\n \nrecognize\n \nthat\n \norder\n\n\n\n\n\n\nExample: You are running Kalliope on a Rpi. You've made a script that turn on or off a led.\nYou can call this script every time kalliope start or stop speaking\n\n\nsettings.yaml\n\n\nhooks\n:\n\n  \non_start_speaking\n:\n \nturn-on-led\n\n  \non_stop_speaking\n:\n \nturn-off-led\n\n\n\n\n\n\nbrain.yml\n\n\n-\n \nname\n:\n \nturn-on-led\n\n  \nsignals\n:\n \n[]\n\n  \nneurons\n:\n\n    \n-\n \nscript\n:\n\n        \npath\n:\n \n/path/to/script.sh\n \non\n\n\n\n-\n \nname\n:\n \nturn-off-led\n\n  \nsignals\n:\n \n[]\n\n  \nneurons\n:\n\n    \n-\n \nscript\n:\n\n        \npath\n:\n \n/path/to/script.sh\n \noff\n\n\n\n\n\n\n\n\nNote:\n You cannot use a neurotransmitter neuron inside a synapse called from a hook.\nYou cannot use the \"say\" neuron inside the \"on_start_speaking\" or \"on_stop_speaking\" or it will create an infinite loop\n\n\n\n\nRest API\n\n\nA Rest API can be activated in order to:\n- List synapses\n- Get synapse's detail\n- Run a synapse\n\n\nFor the complete API ref see the \nREST API documentation\n\n\nSettings examples:\n\n\nrest_api\n:\n\n  \nactive\n:\n \nTrue\n\n  \nport\n:\n \n5000\n\n  \npassword_protected\n:\n \nTrue\n\n  \nlogin\n:\n \nadmin\n\n  \npassword\n:\n \nsecret\n\n  \nallowed_cors_origin\n:\n \n*\n\n\n\n\n\n\n\n\n\n\n\n\nparameter\n\n\ntype\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nactive\n\n\nboolean\n\n\nTo enable the rest api server\n\n\n\n\n\n\nport\n\n\ninteger\n\n\nTThe listening port of the web server. Must be an integer in range 1024-65535\n\n\n\n\n\n\npassword_protected\n\n\nboolean\n\n\nIf \nTrue\n, the whole api will be password protected\n\n\n\n\n\n\nlogin\n\n\nstring\n\n\nLogin used by the basic HTTP authentication. Must be provided if \npassword_protected\n is \nTrue\n\n\n\n\n\n\npassword\n\n\nstring\n\n\nPassword used by the basic HTTP authentication. Must be provided if \npassword_protected\n is \nTrue\n\n\n\n\n\n\nallowed_cors_origin\n\n\nstring\n\n\nAllow request from external application. See examples bellow\n\n\n\n\n\n\n\n\nCors request\n\n\nIf you want to allow request from external application, you'll need to enable the CORS requests settings by defining authorized origins.\nTo do so, just indicated the origins that are allowed to leverage the API. The authorize values are:\n\n\nFalse to forbid CORS request.\n\n\nallowed_cors_origin\n:\n \nFalse\n\n\n\n\n\n\nor either a string or a list:\n\n\nallowed_cors_origin: \n*\n\n\n\n\n\n\n(in case of \"*\", all origins are accepted).\nor\n\n\nallowed_cors_origin:\n  - \nhttp://mydomain.com/*\n\n  - \nhttp://localhost:4200/*\n\n\n\n\n\n\nRemember that an origin is composed of the scheme (http(s)), the port (eg: 80, 4200,\u2026) and the domain (mydomain.com, localhost).\n\n\nResources directory\n\n\nThe resources directory is the path where Kalliope will try to load community modules like Neurons, STTs or TTSs.\nSet a valid path is required if you want to install community neuron. The path can be relative or absolute.\n\n\nresource_directory\n:\n\n  \nresource_name\n:\n \npath\n\n\n\n\n\n\nE.g\n\n\nresource_directory\n:\n\n  \nneuron\n:\n \nresources/neurons\n\n  \nstt\n:\n \nresources/stt\n\n  \ntts\n:\n \nresources/tts\n\n  \ntrigger\n:\n \n/full/path/to/trigger\n\n\n\n\n\n\nGlobal Variables\n\n\nThe Global Variables paths list where to load the global variables.\nThose variables can be reused in neuron parameters within double brackets.\n\n\nE.g\n\n\nvar_files:\n  - variables.yml\n  - variables2.yml\n\n\n\n\n\n\n\nNote:\n If a variable is defined in different files, the last file defines the value.\n\n\n\n\nIn the files the variables are defined by key/value:\n\n\nvariable\n:\n \n60\n\n\nbaseURL\n:\n \nhttp://blabla.com/\n\n\npassword\n:\n \nsecret\n\n\n\n\n\n\nAnd use variables in your neurons:\n\n\n  - name: \nrun-simple-sleep\n\n\n    signals:\n\n\n      - order: \nWait for me \n\n\n    neurons:\n\n\n      - uri:\n\n\n          url: \n{{\nbaseURL\n}}\nget/1\n\n\n          user: \nadmin\n\n\n          password: \n{{\npassword\n}}\n\n\n\n\n\n\n\n\nNote:\n Because YAML format does no allow double braces not surrounded by quotes: you must use the variable between double quotes.\n\n\n\n\nA global variable can be a dictionary. Example:\n\n\ncontacts\n:\n\n  \nnico\n:\n \n1234\n\n  \ntibo\n:\n \n5678\n\n\n\n\n\n\nAnd a synapse that use this dict:\n\n\n- name: \ntest-var\n\n\n  signals:\n\n\n    - order: \ngive me the number of \n{{\n \ncontact_to_search\n \n}}\n\n\n  neurons:\n\n\n    - say:\n\n\n        message:\n\n\n        - \nthe number is \n{{\n \ncontacts\n[\ncontact_to_search\n]\n \n}}\n\n\n\n\n\n\nOptions\n\n\nOptions that can be defined for Kalliope.\n\n\nExample config\n\n\noptions\n:\n\n  \nmute\n:\n \nTrue\n\n  \ndeaf\n:\n \nFalse\n\n\n\n\n\n\nAvailable options:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmute\n\n\nWhen mute, the STT engine will not be used to make Kalliope talking during neurons execution\n\n\n\n\n\n\ndeaf\n\n\nWhen deaf, the trigger engine is not started. Kalliope will not listen for a wake up word\n\n\n\n\n\n\nenergy_threshold\n\n\nenergy_threshold\n\n\n\n\n\n\nadjust_for_ambient_noise_second\n\n\nadjust_for_ambient_noise_second\n\n\n\n\n\n\nstt_timeout\n\n\nNumber of seconds before stop the STT process automatically\n\n\n\n\n\n\n\n\nenergy_threshold\n\n\nRepresents the energy level threshold for sounds. By default set to \n4000\n.\nValues below this threshold are considered silence, and values above this threshold are considered speech.\nThis is adjusted automatically if dynamic thresholds are enabled with \nadjust_for_ambient_noise_second\n parameter.\n\n\nThis threshold is associated with the perceived loudness of the sound, but it is a nonlinear relationship.\nThe actual energy threshold you will need depends on your microphone sensitivity or audio data.\nTypical values for a silent room are 0 to 100, and typical values for speaking are between 150 and 3500.\nAmbient (non-speaking) noise has a significant impact on what values will work best.\n\n\nIf you're having trouble with the recognizer trying to recognize words even when you're not speaking, try tweaking this to a higher value.\nIf you're having trouble with the recognizer not recognizing your words when you are speaking, try tweaking this to a lower value.\nFor example, a sensitive microphone or microphones in louder rooms might have a ambient energy level of up to 4000.\n\n\noptions\n:\n\n  \nenergy_threshold\n:\n \n4000\n\n\n\n\n\n\n\n\nNote:\n The default value is 4000 if not set\n\n\n\n\nadjust_for_ambient_noise_second\n\n\nIf defined, will adjusts the energy threshold dynamically by capturing the current ambient noise of the room during the number of second set in the parameter.\nWhen set, the \nenergy_threshold\n parameter is overridden by the returned value of the noise calibration.\nThis value should be at least 0.5 in order to get a representative sample of the ambient noise.\n\n\noptions\n:\n\n  \nadjust_for_ambient_noise_second\n:\n \n1\n\n\n\n\n\n\n\n\nNote:\n The number of second here represents the time between kalliope's awakening and the moment when you can give her your order.", 
            "title": "settings.yml"
        }, 
        {
            "location": "/settings/settings/#settingsyml", 
            "text": "This part of the documentation explains the main configuration of Kalliope placed in the  settings.yml  file.  Kalliope will look for the settings file in the order bellow:   From you current folder, E.g  /home/pi/my_kalliope/settings.yml  From  /etc/kalliope/settings.yml  From the default  settings.yml  located in the root of the project tree.", 
            "title": "settings.yml"
        }, 
        {
            "location": "/settings/settings/#triggers-configuration", 
            "text": "", 
            "title": "Triggers configuration"
        }, 
        {
            "location": "/settings/settings/#default_trigger", 
            "text": "The trigger is the engine in charge of detecting the hotword that will wake up Kalliope.\nCommon usage of hotword include \"Alexa\" on Amazon Echo, \"OK Google\" on some Android devices and \"Hey Siri\" on iPhones.  Specify the name of the trigger module you want to use.  default_trigger :   trigger_name   E.g  default_trigger :   snowboy", 
            "title": "default_trigger"
        }, 
        {
            "location": "/settings/settings/#triggers", 
            "text": "The hotword (also called a wake word or trigger word) detector is the engine in charge of waking up Kalliope.  Each Trigger has it own configuration. This configuration is passed as argument following the syntax bellow  triggers : \n   -   trigger_name : \n       parameter_name :   value   E.g, the default Snowboy trigger configuration is  triggers : \n   -   snowboy : \n       pmdl_file :   trigger/snowboy/resources/model.pmdl", 
            "title": "triggers"
        }, 
        {
            "location": "/settings/settings/#settings-example", 
            "text": "default_trigger :   snowboy  triggers : \n   -   snowboy : \n       pmdl_file :   trigger/snowboy/resources/model.pmdl", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/settings/#available-trigger-engine", 
            "text": "Doc  Note      snowboy  Based on  Snowboy software", 
            "title": "Available trigger engine"
        }, 
        {
            "location": "/settings/settings/#players-configuration", 
            "text": "The player is the library/software used to make Kalliope talk.\nWith Kalliope project, you can set whatever sound player you want to use.", 
            "title": "Players configuration"
        }, 
        {
            "location": "/settings/settings/#default_player", 
            "text": "Specify the name of the player module you want to use.  default_player :   player_name   E.g  default_player :   mplayer", 
            "title": "default_player"
        }, 
        {
            "location": "/settings/settings/#players", 
            "text": "Each Players has it own configuration.\nThis configuration is passed as argument following the syntax bellow  players : \n   -   player_name : \n       parameter_name :   value   When no parameters are required set an empty object:  players : \n   -   mplayer :   {}", 
            "title": "players"
        }, 
        {
            "location": "/settings/settings/#settings-example_1", 
            "text": "players : \n   -   mplayer :   {} \n   -   pyalsaaudio : \n      device :   default \n      convert_to_wav :   True \n   -   pyaudioplayer : \n      convert_to_wav :   True \n   -   sounddeviceplayer : \n      convert_to_wav :   True    Note:  Sometime, parameters will be necessary to use an engine.\nClick on a Player engine link in the  Current CORE Available Players  section to know which parameter are required.  Note:  A player which does not ask for input parameters need to be declared as an empty dict. E.g:  - player_name: {}  Note:  Core players are already packaged with the installation of Kalliope an can be used out of the box.  Note:  Most cloud based TTS generate a file in MP3 format. Some players are not able to read this format and then a conversion to wav is needed.", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/settings/#available-players", 
            "text": "Core Players are already packaged with the installation of Kalliope an can be used out of the box.     Doc  Note      mplayer  Based on  mplayer software    pyalsaaudio  Based on [pyalsaaudio](https://larsimmisch.github.io/pyalsaaudio/libalsaaudio.html lib    pyaudioplayer  Based on  pyaudio  lib    sounddeviceplayer  Based on  sounddevice  lib", 
            "title": "Available players"
        }, 
        {
            "location": "/settings/settings/#speech-to-text-configuration", 
            "text": "", 
            "title": "Speech to text configuration"
        }, 
        {
            "location": "/settings/settings/#default_speech_to_text", 
            "text": "A Speech To Text(STT) is an engine used to translate what you say into a text that can be processed by Kalliope core.\nBy default, Kalliope uses google STT engine.  The following syntax is used to provide the engine name:  default_speech_to_text :   stt_name   E.g  default_speech_to_text :   google", 
            "title": "default_speech_to_text"
        }, 
        {
            "location": "/settings/settings/#speech_to_text", 
            "text": "Each STT has it own configuration. This configuration is passed as argument as shown bellow  speech_to_text : \n   -   stt_name : \n       parameter_name :   value   E.g:  speech_to_text : \n   -   google : \n       language :   fr-FR \n   -   bing", 
            "title": "speech_to_text"
        }, 
        {
            "location": "/settings/settings/#settings-example_2", 
            "text": "default_speech_to_text:  google \nspeech_to_text:\n  - google:\n      language:  fr-FR \n  - wit:\n      key:  B5JI3YUSLYOYWNIZRNBVM34XUODME2K \n  - bing:\n      key:  9e48dert65904838bedc11aea6b36fb0 \n  - apiai:\n      key:  e0cbff145af44944a6b9f82c0668b527 \n      language:  fr \n  - houndify:\n      key:  6ej90T7qAV74OYXk4X4vI2Xhk7wPsJu4aEZ0G5Ll-BMmV1JGtFpCxtSH9SmTY4G3bpEJ7a5y_GTQid-CAKI6vw== \n      client_id:  lM2JXeaSticbSo9-llczbA==", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/settings/#available-stt", 
            "text": "Core STTs are already packaged with the installation of Kalliope an can be used out of the box.     Name  Type      apiai  Cloud based    Bing  Cloud based    CMUSphinx  Self hosted    Google  Cloud based    Houndify  Cloud based    wit.ai  Cloud based", 
            "title": "Available STT"
        }, 
        {
            "location": "/settings/settings/#text-to-speech-configuration", 
            "text": "", 
            "title": "Text to speech configuration"
        }, 
        {
            "location": "/settings/settings/#default_text_to_speech", 
            "text": "A Text To Speech is an engine used to translate written text into a speech, into an audio stream.\nBy default, Kalliope use Pico2wave TTS engine.  The following syntax is used to provide the TTS engine name  default_text_to_speech :   tts_name   Eg  default_text_to_speech:  pico2wave", 
            "title": "default_text_to_speech"
        }, 
        {
            "location": "/settings/settings/#text_to_speech", 
            "text": "Each TTS has it own configuration. This configuration is passed as argument following the syntax bellow  text_to_speech : \n   -   tts_name : \n       parameter_name :   value   E.g  text_to_speech : \n   -   pico2wave : \n       language :   fr-FR \n   -   googletts : \n       language :   fr", 
            "title": "text_to_speech"
        }, 
        {
            "location": "/settings/settings/#cache_path", 
            "text": "TTS engines work all the same, we give them a text, they give back an audio file and we play the audio file. The generated audio file is placed in cache until it\nis played by the audio player. Before generating a new audio file, Kalliope will take a look to the cache to load it directly without having to call the\nTSS engine if the file has been generated before.  You must set a path where the cache will be saved in the tag  cache_path . This one is placed in /tmp by default.  cache_path:  /tmp/kalliope_tts_cache    Note:  The path must be a valid path, and the current user must has enough right to read and write in it.  Note:  The consumed disk space can dramatically increase in the cache path folder. It is recommended to set your neuron correctly to clean up automatically\ngenerated audio files that will not be played more than once.", 
            "title": "cache_path"
        }, 
        {
            "location": "/settings/settings/#settings-example_3", 
            "text": "default_text_to_speech :   voicerss  cache_path :   /tmp/kalliope_tts_cache  text_to_speech : \n   -   pico2wave : \n       language :   fr-FR \n       cache :   True \n   -   acapela : \n       language :   sonid15 \n       voice :   Manon \n       cache :   False \n   -   googletts : \n       language :   fr \n   -   voicerss : \n       language :   fr-fr \n       cache :   True", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/settings/#available-tts", 
            "text": "Core TTSs are already packaged with the installation of Kalliope an can be used out of the box.     Name  Type      espeak  Self hosted    googletts  Cloud based    pico2wave  Self hosted    voicerss  Cloud based    watson  Cloud based", 
            "title": "Available TTS"
        }, 
        {
            "location": "/settings/settings/#hooks", 
            "text": "Hooking allow to bind actions to events based on the lifecycle of Kalliope.\nFor example, it's useful to know when Kalliope has detected the hotword from the trigger engine and make her spell out loud that she's ready to listen your order.  To use a hook, attach the name of the hook to a synapse (or list of synapse) which exists in your brain.  Syntax:  hooks : \n   hook_name1 :   synapse_name \n   hook_name2 : \n     -   synapse_name_1 \n     -   synapse_name_2   E.g.  hooks : \n   on_start :   on-start-synapse   List of available hook     Hook name  Description      on_start  When kalliope is started. This hook will only be triggered once    on_waiting_for_trigger  When Kalliope waits for the hotword detection    on_triggered  When the hotword has been detected    on_start_listening  When the Speech to Text engine is listening for an order    on_stop_listening  When the Speech to Text engine stop listening for an order    on_order_found  When the pronounced order has been found in the brain    on_order_not_found  When the pronounced order has not been found in the brain    on_processed_synapses  When all neurons in synapses have been processed    on_deaf  When Kalliope switches from non deaf to deaf    on_undeaf  When Kalliope switches from deaf to non deaf    on_mute  When Kalliope switches from non mute to mute    on_unmute  When Kalliope switches from mute to non mute    on_start_speaking  When Kalliope starts speaking via the text to speech engine    on_stop_speaking  When Kalliope stops speaking    on_stt_error  When an error appeared during the STT processing", 
            "title": "Hooks"
        }, 
        {
            "location": "/settings/settings/#settings-example_4", 
            "text": "Example: You want to hear a random answer when the hotword has been triggered  settings.yml  hooks : \n   on_triggered :   on-triggered-synapse   brain.yml  -   name :   on-triggered-synapse \n   signals :   [] \n   neurons : \n     -   say : \n         message : \n           -   yes   sir? \n           -   I m   listening \n           -   I m   listening   to   you \n           -   sir? \n           -   what   can   i   do   for   you? \n           -   Speaking \n           -   how   can   i   help   you?   Example: You want to know that your order has not been found  settings.yml  hooks : \n   on_order_not_found :   order-not-found-synapse   brain.yml  -   name :   order-not-found-synapse \n     signals :   [] \n     neurons : \n       -   say : \n           message : \n             -   I   haven t   understood \n             -   I   don t   know   this   order \n             -   Please   renew   your   order \n             -   Would   you   please   reword   your   order \n             -   Can   ou   please   reformulate   your   order \n             -   I   don t   recognize   that   order   Example: You are running Kalliope on a Rpi. You've made a script that turn on or off a led.\nYou can call this script every time kalliope start or stop speaking  settings.yaml  hooks : \n   on_start_speaking :   turn-on-led \n   on_stop_speaking :   turn-off-led   brain.yml  -   name :   turn-on-led \n   signals :   [] \n   neurons : \n     -   script : \n         path :   /path/to/script.sh   on  -   name :   turn-off-led \n   signals :   [] \n   neurons : \n     -   script : \n         path :   /path/to/script.sh   off    Note:  You cannot use a neurotransmitter neuron inside a synapse called from a hook.\nYou cannot use the \"say\" neuron inside the \"on_start_speaking\" or \"on_stop_speaking\" or it will create an infinite loop", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/settings/#rest-api", 
            "text": "A Rest API can be activated in order to:\n- List synapses\n- Get synapse's detail\n- Run a synapse  For the complete API ref see the  REST API documentation  Settings examples:  rest_api : \n   active :   True \n   port :   5000 \n   password_protected :   True \n   login :   admin \n   password :   secret \n   allowed_cors_origin :   *      parameter  type  comment      active  boolean  To enable the rest api server    port  integer  TThe listening port of the web server. Must be an integer in range 1024-65535    password_protected  boolean  If  True , the whole api will be password protected    login  string  Login used by the basic HTTP authentication. Must be provided if  password_protected  is  True    password  string  Password used by the basic HTTP authentication. Must be provided if  password_protected  is  True    allowed_cors_origin  string  Allow request from external application. See examples bellow     Cors request  If you want to allow request from external application, you'll need to enable the CORS requests settings by defining authorized origins.\nTo do so, just indicated the origins that are allowed to leverage the API. The authorize values are:  False to forbid CORS request.  allowed_cors_origin :   False   or either a string or a list:  allowed_cors_origin:  *   (in case of \"*\", all origins are accepted).\nor  allowed_cors_origin:\n  -  http://mydomain.com/* \n  -  http://localhost:4200/*   Remember that an origin is composed of the scheme (http(s)), the port (eg: 80, 4200,\u2026) and the domain (mydomain.com, localhost).", 
            "title": "Rest API"
        }, 
        {
            "location": "/settings/settings/#resources-directory", 
            "text": "The resources directory is the path where Kalliope will try to load community modules like Neurons, STTs or TTSs.\nSet a valid path is required if you want to install community neuron. The path can be relative or absolute.  resource_directory : \n   resource_name :   path   E.g  resource_directory : \n   neuron :   resources/neurons \n   stt :   resources/stt \n   tts :   resources/tts \n   trigger :   /full/path/to/trigger", 
            "title": "Resources directory"
        }, 
        {
            "location": "/settings/settings/#global-variables", 
            "text": "The Global Variables paths list where to load the global variables.\nThose variables can be reused in neuron parameters within double brackets.  E.g  var_files:\n  - variables.yml\n  - variables2.yml   Note:  If a variable is defined in different files, the last file defines the value.   In the files the variables are defined by key/value:  variable :   60  baseURL :   http://blabla.com/  password :   secret   And use variables in your neurons:    - name:  run-simple-sleep      signals:        - order:  Wait for me       neurons:        - uri:            url:  {{ baseURL }} get/1            user:  admin            password:  {{ password }}    Note:  Because YAML format does no allow double braces not surrounded by quotes: you must use the variable between double quotes.   A global variable can be a dictionary. Example:  contacts : \n   nico :   1234 \n   tibo :   5678   And a synapse that use this dict:  - name:  test-var    signals:      - order:  give me the number of  {{   contact_to_search   }}    neurons:      - say:          message:          -  the number is  {{   contacts [ contact_to_search ]   }}", 
            "title": "Global Variables"
        }, 
        {
            "location": "/settings/settings/#options", 
            "text": "Options that can be defined for Kalliope.  Example config  options : \n   mute :   True \n   deaf :   False   Available options:     Option  Description      mute  When mute, the STT engine will not be used to make Kalliope talking during neurons execution    deaf  When deaf, the trigger engine is not started. Kalliope will not listen for a wake up word    energy_threshold  energy_threshold    adjust_for_ambient_noise_second  adjust_for_ambient_noise_second    stt_timeout  Number of seconds before stop the STT process automatically", 
            "title": "Options"
        }, 
        {
            "location": "/settings/settings/#energy_threshold", 
            "text": "Represents the energy level threshold for sounds. By default set to  4000 .\nValues below this threshold are considered silence, and values above this threshold are considered speech.\nThis is adjusted automatically if dynamic thresholds are enabled with  adjust_for_ambient_noise_second  parameter.  This threshold is associated with the perceived loudness of the sound, but it is a nonlinear relationship.\nThe actual energy threshold you will need depends on your microphone sensitivity or audio data.\nTypical values for a silent room are 0 to 100, and typical values for speaking are between 150 and 3500.\nAmbient (non-speaking) noise has a significant impact on what values will work best.  If you're having trouble with the recognizer trying to recognize words even when you're not speaking, try tweaking this to a higher value.\nIf you're having trouble with the recognizer not recognizing your words when you are speaking, try tweaking this to a lower value.\nFor example, a sensitive microphone or microphones in louder rooms might have a ambient energy level of up to 4000.  options : \n   energy_threshold :   4000    Note:  The default value is 4000 if not set", 
            "title": "energy_threshold"
        }, 
        {
            "location": "/settings/settings/#adjust_for_ambient_noise_second", 
            "text": "If defined, will adjusts the energy threshold dynamically by capturing the current ambient noise of the room during the number of second set in the parameter.\nWhen set, the  energy_threshold  parameter is overridden by the returned value of the noise calibration.\nThis value should be at least 0.5 in order to get a representative sample of the ambient noise.  options : \n   adjust_for_ambient_noise_second :   1    Note:  The number of second here represents the time between kalliope's awakening and the moment when you can give her your order.", 
            "title": "adjust_for_ambient_noise_second"
        }, 
        {
            "location": "/settings/triggers/snowboy/", 
            "text": "Parameters\n\n\nYou can create your magic word by connecting to \nSnowboy\n and then download the trained model file.\n\n\nOnce downloaded, place the file in your personal config folder and configure snowboy in your \nyour settings\n following the table bellow\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ntype\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\npmdl_file\n\n\nTRUE\n\n\nstring\n\n\n\n\n\n\nPath to the snowboy model file. The path can be absolute or relative to the brain file\n\n\n\n\n\n\nsensitivity\n\n\nFALSE\n\n\nstring\n\n\n0.5\n\n\nbetween 0 and 1\n\n\nIncreasing the sensitivity value lead to better detection rate, but also higher false alarm rate\n\n\n\n\n\n\n\n\nExample settings\n\n\n# This is the trigger engine that will catch your magic work to wake up Kalliope. Only Snowboy is available so far\n\n\ndefault_trigger\n:\n \nsnowboy\n\n\n\n# Trigger engine configuration\n\n\ntriggers\n:\n\n  \n-\n \nsnowboy\n:\n\n      \npmdl_file\n:\n \ntrigger/snowboy/resources/kalliope-FR-40samples.pmdl\n\n\n\n\n\n\nAvailable Snowboy models\n\n\nIf you want to keep \"Kalliope\" as the name of your bot, we recommend you to \nenhance the existing Snowboy model for your language\n.\n\n\nWe will update the following list with all Kalliope model created by the community. If the model doesn't exist, please create one with the following syntax:\n\n\nkalliope-\nlanguage_code\n\n\n\n\n\n\nE.g\n\n\nkalliope-FR\nkalliope-EN\nkalliope-RU\nkalliope-DE\nkalliope-IT\n\n\n\n\n\nThen, open an issue or create a pull request to add the model to the list bellow.\n\n\n\n\nImportant note:\n Do not enhance a model in the wrong language. Check the pronunciation before recording your voice!\n\n\n\n\n\n\n\n\n\n\nName\n\n\nlanguage\n\n\nPronounced\n\n\n\n\n\n\n\n\n\n\nkalliope-FR\n\n\nFrench\n\n\nKa-lio-p\u00e9\n\n\n\n\n\n\nkalliope-EN\n\n\nEnglish\n\n\nk\u0259-LIE-\u0259-pee\n\n\n\n\n\n\nkalliope-RU\n\n\nRussian\n\n\n\u043a\u0430\u043b\u043b\u0438\u043e\u043f\u0430\n\n\n\n\n\n\nkalliope-DE\n\n\nGerman\n\n\nKa-lio-pe\n\n\n\n\n\n\nkalliope-IT\n\n\nItalian\n\n\nKa-lljo-pe", 
            "title": "Snowboy"
        }, 
        {
            "location": "/settings/triggers/snowboy/#parameters", 
            "text": "You can create your magic word by connecting to  Snowboy  and then download the trained model file.  Once downloaded, place the file in your personal config folder and configure snowboy in your  your settings  following the table bellow     parameter  required  type  default  choices  comment      pmdl_file  TRUE  string    Path to the snowboy model file. The path can be absolute or relative to the brain file    sensitivity  FALSE  string  0.5  between 0 and 1  Increasing the sensitivity value lead to better detection rate, but also higher false alarm rate", 
            "title": "Parameters"
        }, 
        {
            "location": "/settings/triggers/snowboy/#example-settings", 
            "text": "# This is the trigger engine that will catch your magic work to wake up Kalliope. Only Snowboy is available so far  default_trigger :   snowboy  # Trigger engine configuration  triggers : \n   -   snowboy : \n       pmdl_file :   trigger/snowboy/resources/kalliope-FR-40samples.pmdl", 
            "title": "Example settings"
        }, 
        {
            "location": "/settings/triggers/snowboy/#available-snowboy-models", 
            "text": "If you want to keep \"Kalliope\" as the name of your bot, we recommend you to  enhance the existing Snowboy model for your language .  We will update the following list with all Kalliope model created by the community. If the model doesn't exist, please create one with the following syntax:  kalliope- language_code   E.g  kalliope-FR\nkalliope-EN\nkalliope-RU\nkalliope-DE\nkalliope-IT  Then, open an issue or create a pull request to add the model to the list bellow.   Important note:  Do not enhance a model in the wrong language. Check the pronunciation before recording your voice!      Name  language  Pronounced      kalliope-FR  French  Ka-lio-p\u00e9    kalliope-EN  English  k\u0259-LIE-\u0259-pee    kalliope-RU  Russian  \u043a\u0430\u043b\u043b\u0438\u043e\u043f\u0430    kalliope-DE  German  Ka-lio-pe    kalliope-IT  Italian  Ka-lljo-pe", 
            "title": "Available Snowboy models"
        }, 
        {
            "location": "/settings/players/mplayer/", 
            "text": "Default player of kalliope.\nThis Player is based on the \nmplayer engine\n\n\nInput parameters\n\n\nNo parameter required\n\n\nSettings example\n\n\ndefault_player\n:\n \nmplayer\n\n\n\nplayers\n:\n\n  \n-\n \nmplayer\n:\n \n{}\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n This Player handles mp3 and wav format.", 
            "title": "mplayer"
        }, 
        {
            "location": "/settings/players/mplayer/#input-parameters", 
            "text": "No parameter required", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/players/mplayer/#settings-example", 
            "text": "default_player :   mplayer  players : \n   -   mplayer :   {}", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/players/mplayer/#notes", 
            "text": "Note:  This Player handles mp3 and wav format.", 
            "title": "Notes"
        }, 
        {
            "location": "/settings/players/pyalsaaudio/", 
            "text": "This Player is based on the \nalsa engine\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\ndevice\n\n\nno\n\n\n\"default\"\n\n\n\n\nSelect the device to use for alsa\n\n\n\n\n\n\nconvert_to_wav\n\n\nno\n\n\nTRUE\n\n\nTrue, False\n\n\nConvert the generated file from the TTS into wav before reading\n\n\n\n\n\n\n\n\nSettings example\n\n\nHere is n example of configuration you would use if your TTS was acapela. As this TTS generate an MP3 file, this last need to be converted into wav.\n\n\ndefault_player\n:\n \npyalsaaudio\n\n\n\nplayers\n:\n\n  \n-\n \npyalsaaudio\n:\n\n     \ndevice\n:\n \ndefault\n\n     \nconvert_to_wav\n:\n \nTrue\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n Define the default card to use in the \ndevice\n parameter.\nFor example, on a Raspberry Pi, the default card can be \nsysdefault:CARD=ALSA\n\n\nNote:\n This Player does not handle mp3 format, converting mp3 to wav might be required if the selected TTS engine generate mp3 file.", 
            "title": "pyalsaaudio"
        }, 
        {
            "location": "/settings/players/pyalsaaudio/#input-parameters", 
            "text": "parameter  required  default  choices  comment      device  no  \"default\"   Select the device to use for alsa    convert_to_wav  no  TRUE  True, False  Convert the generated file from the TTS into wav before reading", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/players/pyalsaaudio/#settings-example", 
            "text": "Here is n example of configuration you would use if your TTS was acapela. As this TTS generate an MP3 file, this last need to be converted into wav.  default_player :   pyalsaaudio  players : \n   -   pyalsaaudio : \n      device :   default \n      convert_to_wav :   True", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/players/pyalsaaudio/#notes", 
            "text": "Note:  Define the default card to use in the  device  parameter.\nFor example, on a Raspberry Pi, the default card can be  sysdefault:CARD=ALSA  Note:  This Player does not handle mp3 format, converting mp3 to wav might be required if the selected TTS engine generate mp3 file.", 
            "title": "Notes"
        }, 
        {
            "location": "/settings/players/pyaudioplayer/", 
            "text": "This Player is based on the \npyaudio engine\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nconvert_to_wav\n\n\nno\n\n\nTRUE\n\n\nTrue, False\n\n\nConvert the generated file from the TTS into wav before reading\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_player\n:\n \npyaudioplayer\n\n\n\nplayers\n:\n\n  \n-\n \npyaudioplayer\n:\n\n     \nconvert_to_wav\n:\n \nTrue\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n This Player does not handle mp3 format, converting mp3 to wav might be required.", 
            "title": "pyaudioplayer"
        }, 
        {
            "location": "/settings/players/pyaudioplayer/#input-parameters", 
            "text": "parameter  required  default  choices  comment      convert_to_wav  no  TRUE  True, False  Convert the generated file from the TTS into wav before reading", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/players/pyaudioplayer/#settings-example", 
            "text": "default_player :   pyaudioplayer  players : \n   -   pyaudioplayer : \n      convert_to_wav :   True", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/players/pyaudioplayer/#notes", 
            "text": "Note:  This Player does not handle mp3 format, converting mp3 to wav might be required.", 
            "title": "Notes"
        }, 
        {
            "location": "/settings/players/sounddeviceplayer/", 
            "text": "This Player is based on the \nsounddevice and soundfile engines\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nconvert_to_wav\n\n\nno\n\n\nTRUE\n\n\nTrue, False\n\n\nConvert the generated file from the TTS into wav before reading\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_player\n:\n \nsounddeviceplayer\n\n\n\nplayers\n:\n\n  \n-\n \nsounddeviceplayer\n:\n\n     \nconvert_to_wav\n:\n \nTrue\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n This Player does not handle mp3 format, converting mp3 to wav might be required.", 
            "title": "sounddeviceplayer"
        }, 
        {
            "location": "/settings/players/sounddeviceplayer/#input-parameters", 
            "text": "parameter  required  default  choices  comment      convert_to_wav  no  TRUE  True, False  Convert the generated file from the TTS into wav before reading", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/players/sounddeviceplayer/#settings-example", 
            "text": "default_player :   sounddeviceplayer  players : \n   -   sounddeviceplayer : \n      convert_to_wav :   True", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/players/sounddeviceplayer/#notes", 
            "text": "Note:  This Player does not handle mp3 format, converting mp3 to wav might be required.", 
            "title": "Notes"
        }, 
        {
            "location": "/settings/stt/api.ai/", 
            "text": "The api.ai STT is based on the \napi.ai API\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nyes\n\n\nNone\n\n\n\n\nUser info\n\n\n\n\n\n\nlanguage\n\n\nno\n\n\nen-US\n\n\nlang\n\n\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_speech_to_text\n:\n \napiai\n\n\n\nspeech_to_text\n:\n\n  \n-\n \napiai\n:\n\n      \nkey\n:\n \n0cbff154af44944a6\n\n      \nlanguage\n:\n \nen", 
            "title": "api.ai"
        }, 
        {
            "location": "/settings/stt/api.ai/#input-parameters", 
            "text": "parameter  required  default  choices  comment      key  yes  None   User info    language  no  en-US  lang", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/stt/api.ai/#settings-example", 
            "text": "default_speech_to_text :   apiai  speech_to_text : \n   -   apiai : \n       key :   0cbff154af44944a6 \n       language :   en", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/stt/bing/", 
            "text": "The Bing STT is based on the \nMicrosoft Bing Voice Recognition API\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nYES\n\n\nNone\n\n\n\n\nUser info\n\n\n\n\n\n\nlanguage\n\n\nNo\n\n\nen-US\n\n\nlang\n\n\n7 languages\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_speech_to_text\n:\n \nbing\n\n\n\nspeech_to_text\n:\n\n  \n-\n \nbing\n:\n\n      \nkey\n:\n \n9e48ddaf75904838bedc11aea6b36fb0\n\n      \nlanguage\n:\n \nen-US", 
            "title": "Bing"
        }, 
        {
            "location": "/settings/stt/bing/#input-parameters", 
            "text": "parameter  required  default  choices  comment      key  YES  None   User info    language  No  en-US  lang  7 languages", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/stt/bing/#settings-example", 
            "text": "default_speech_to_text :   bing  speech_to_text : \n   -   bing : \n       key :   9e48ddaf75904838bedc11aea6b36fb0 \n       language :   en-US", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/stt/CMUSphinx/", 
            "text": "This module is based on the self hosted STT solution \nCMUSPhinx engine\n.\nBy default, only english language is available. You can download \nanother language model\n from the main repository and install it following \nthe official documentation\n.\n\n\nInstallation\n\n\nInstall packages\n\n\nsudo apt-get install swig libpulse-dev\n\n\n\n\n\nThen install the python lib\n\n\nsudo pip install pocketsphinx\n\n\n\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ntype\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nlanguage\n\n\nno\n\n\nstring\n\n\nen-US\n\n\n\n\nInstalling other languages\n\n\n\n\n\n\nkeyword_entries\n\n\nno\n\n\nlist\n\n\n\n\n\n\nList of tuples of the form (keyword, sensitivity), where keyword is a phrase, and sensitivity is how sensitive to this phrase the recognizer should be\n\n\n\n\n\n\ngrammar_file\n\n\nno\n\n\nstring\n\n\n\n\n\n\nFSG or JSGF grammars file path. Note: If \nkeyword_entries\n are passed, \ngrammar_file\n will be ignored\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_speech_to_text\n:\n \ncmusphinx\n\n\n\nspeech_to_text\n:\n\n  \n-\n \ncmusphinx\n:\n\n      \nlanguage\n:\n \nen-US\n\n\n\n\n\n\nUsing keywords\n\n\nSphinx usually operates in 'transcription mode' and will return whatever words it recognizes.\nAdding \nkeyword_entries\n to the settings narrows down its search space and is more accurate than just looking for those same keywords in non-keyword-based transcriptions, because Sphinx knows specifically what sounds to look for.\nThe parameter \nkeyword_entries\n expects a list of tuples consisting of a phrase and a sensitivity level defining how sensitive to this phrase the recognizer should be, on a scale from 0 (very insensitive, more false negatives) to 1 (very sensitive, more false positives).\n\n\ndefault_speech_to_text\n:\n \ncmusphinx\n\n\n\nspeech_to_text\n:\n\n  \n-\n \ncmusphinx\n:\n\n      \nlanguage\n:\n \nen-US\n\n      \nkeyword_entries\n:\n\n        \n-\n \n[\nhello\n,\n \n0.8\n]\n\n        \n-\n \n[\nstop\n \nthe\n \nmusic\n,\n \n0.6\n]", 
            "title": "CMUSphinx"
        }, 
        {
            "location": "/settings/stt/CMUSphinx/#installation", 
            "text": "Install packages  sudo apt-get install swig libpulse-dev  Then install the python lib  sudo pip install pocketsphinx", 
            "title": "Installation"
        }, 
        {
            "location": "/settings/stt/CMUSphinx/#input-parameters", 
            "text": "parameter  required  type  default  choices  comment      language  no  string  en-US   Installing other languages    keyword_entries  no  list    List of tuples of the form (keyword, sensitivity), where keyword is a phrase, and sensitivity is how sensitive to this phrase the recognizer should be    grammar_file  no  string    FSG or JSGF grammars file path. Note: If  keyword_entries  are passed,  grammar_file  will be ignored", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/stt/CMUSphinx/#settings-example", 
            "text": "default_speech_to_text :   cmusphinx  speech_to_text : \n   -   cmusphinx : \n       language :   en-US", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/stt/CMUSphinx/#using-keywords", 
            "text": "Sphinx usually operates in 'transcription mode' and will return whatever words it recognizes.\nAdding  keyword_entries  to the settings narrows down its search space and is more accurate than just looking for those same keywords in non-keyword-based transcriptions, because Sphinx knows specifically what sounds to look for.\nThe parameter  keyword_entries  expects a list of tuples consisting of a phrase and a sensitivity level defining how sensitive to this phrase the recognizer should be, on a scale from 0 (very insensitive, more false negatives) to 1 (very sensitive, more false positives).  default_speech_to_text :   cmusphinx  speech_to_text : \n   -   cmusphinx : \n       language :   en-US \n       keyword_entries : \n         -   [ hello ,   0.8 ] \n         -   [ stop   the   music ,   0.6 ]", 
            "title": "Using keywords"
        }, 
        {
            "location": "/settings/stt/google/", 
            "text": "The google STT is based on the \nGoogle Speech Recognition API\n.\nThis STT is free for less than 60 minutes of usage per month. After that you need a subscription.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nNo\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nlanguage\n\n\nNo\n\n\nen-US\n\n\nlang\n\n\nLCID string\n\n\n\n\n\n\n\n\nSettings example\n\n\nFree usage\n\n\ndefault_speech_to_text\n:\n \ngoogle\n\n\n\nspeech_to_text\n:\n\n  \n-\n \ngoogle\n:\n\n      \nlanguage\n:\n \nfr-FR\n\n\n\n\n\n\nFor paying users\n\n\ndefault_speech_to_text\n:\n \ngoogle\n\n\n\nspeech_to_text\n:\n\n  \n-\n \ngoogle\n:\n\n      \nlanguage\n:\n \nfr-FR\n\n      \nkey\n:\n \nmy_google_stt_key", 
            "title": "Google"
        }, 
        {
            "location": "/settings/stt/google/#input-parameters", 
            "text": "parameter  required  default  choices  comment      key  No  None      language  No  en-US  lang  LCID string", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/stt/google/#settings-example", 
            "text": "Free usage  default_speech_to_text :   google  speech_to_text : \n   -   google : \n       language :   fr-FR   For paying users  default_speech_to_text :   google  speech_to_text : \n   -   google : \n       language :   fr-FR \n       key :   my_google_stt_key", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/stt/houndify/", 
            "text": "This STT is based on the \nHoundify\n engine.\n\n\nThis STT support english only.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nYes\n\n\nNone\n\n\n\n\nUser info\n\n\n\n\n\n\nclient_id\n\n\nYes\n\n\nNone\n\n\n\n\nUser info\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_speech_to_text\n:\n \nhoundify\n\n\n\nspeech_to_text\n:\n\n  \n-\n \nhoundify\n:\n\n      \nkey\n:\n \nmy_user_key\n\n      \nclient_id\n:\n \nmy_user_client_id", 
            "title": "Houndify"
        }, 
        {
            "location": "/settings/stt/houndify/#input-parameters", 
            "text": "parameter  required  default  choices  comment      key  Yes  None   User info    client_id  Yes  None   User info", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/stt/houndify/#settings-example", 
            "text": "default_speech_to_text :   houndify  speech_to_text : \n   -   houndify : \n       key :   my_user_key \n       client_id :   my_user_client_id", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/stt/wit.ai/", 
            "text": "The wit STT is based on the \nWit.ai API\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nYes\n\n\nNone\n\n\n\n\nUser info\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_speech_to_text\n:\n \nwit\n\n\n\nspeech_to_text\n:\n\n  \n-\n \nwit\n:\n\n      \nkey\n:\n \nmy_user_key", 
            "title": "wit.ai"
        }, 
        {
            "location": "/settings/stt/wit.ai/#input-parameters", 
            "text": "parameter  required  default  choices  comment      key  Yes  None   User info", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/stt/wit.ai/#settings-example", 
            "text": "default_speech_to_text :   wit  speech_to_text : \n   -   wit : \n       key :   my_user_key", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/tts/espeak/", 
            "text": "This TTS is based on the \neSpeak engine\n.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nRequired\n\n\nDefault\n\n\nChoices\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nvoice\n\n\nyes\n\n\n\n\nall voice installed\n\n\nsee the full list with command \"espeak --voices=LANGUAGE\"\n\n\n\n\n\n\nvariant\n\n\nno\n\n\n\n\nall language installed\n\n\nsee the full list with command \"espeak --voices=variant\"\n\n\n\n\n\n\nspeed\n\n\nno\n\n\n160\n\n\n80 to 450\n\n\nSpeed in words per minute\n\n\n\n\n\n\namplitude\n\n\nno\n\n\n100\n\n\n0 to 200\n\n\nAmplitude\n\n\n\n\n\n\npitch\n\n\nno\n\n\n50\n\n\n0 to 99\n\n\nPitch adjustment\n\n\n\n\n\n\npath\n\n\nno\n\n\n/usr/bin/espeak\n\n\n0 to 99\n\n\nPath of espeak\n\n\n\n\n\n\ncache\n\n\nno\n\n\nTRUE\n\n\n\n\nTrue if you want to use the cache with this TTS\n\n\n\n\n\n\n\n\nInstallation\n\n\nEspeak package need to be installed\n\n\nsudo apt-get install espeak\n\n\n\n\n\nTo see the full list of language and voices:\n\n\nespeak --voices\n\n\n\n\n\nTo see the full list of voices:\n\n\nespeak --voices\n=\nLANGUAGE\n\n\n\n\n\nExample:\n\n\nespeak --voices=fr\nPty Language Age/Gender VoiceName          File          Other Languages\n 5  fr-fr          M  french               fr            (fr 5)\n 7  fr             M  french-mbrola-1      mb/mb-fr1\n 7  fr             F  french-mbrola-4      mb/mb-fr4\n 5  fr-be          M  french-Belgium       europe/fr-be  (fr 8)\n\n\n\n\n\nConfiguration for \"7  fr             M  french-mbrola-1      mb/mb-fr1\"\n\n\nvoice\n:\n \nmb-fr1\n\n\n\n\n\n\nTo see the full list of variant:\n\n\nespeak --voices\n=\nvariant\n\n\n\n\n\nExample:\n\n\nespeak --voices=variant\nPty Language Age/Gender VoiceName          File          Other Languages\n 5  variant        F  female2              !v/f2\n 5  variant        F  female3              !v/f3\n 5  variant        F  female4              !v/f4\n 5  variant        F  female5              !v/f5\n 5  variant        F  female_whisper       !v/whisperf\n 5  variant        -  klatt                !v/klatt\n 5  variant        -  klatt2               !v/klatt2\n [...]\n\n\n\n\n\nConfiguration for \"5  variant        F  female3              !v/f3\".\n\n\nvoice\n:\n \nfr\n\n\nvariant\n:\n \nf3\n\n\n\n\n\n\nSettings example\n\n\ndefault_text_to_speech\n:\n \nespeak\n\n\n\ntext_to_speech\n:\n\n    \n-\n \nespeak\n:\n\n        \nvoice\n:\n \nfr\n\n        \nvariant\n:\n \nf3", 
            "title": "espeak"
        }, 
        {
            "location": "/settings/tts/espeak/#input-parameters", 
            "text": "Parameters  Required  Default  Choices  Comment      voice  yes   all voice installed  see the full list with command \"espeak --voices=LANGUAGE\"    variant  no   all language installed  see the full list with command \"espeak --voices=variant\"    speed  no  160  80 to 450  Speed in words per minute    amplitude  no  100  0 to 200  Amplitude    pitch  no  50  0 to 99  Pitch adjustment    path  no  /usr/bin/espeak  0 to 99  Path of espeak    cache  no  TRUE   True if you want to use the cache with this TTS", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/tts/espeak/#installation", 
            "text": "Espeak package need to be installed  sudo apt-get install espeak  To see the full list of language and voices:  espeak --voices  To see the full list of voices:  espeak --voices = LANGUAGE  Example:  espeak --voices=fr\nPty Language Age/Gender VoiceName          File          Other Languages\n 5  fr-fr          M  french               fr            (fr 5)\n 7  fr             M  french-mbrola-1      mb/mb-fr1\n 7  fr             F  french-mbrola-4      mb/mb-fr4\n 5  fr-be          M  french-Belgium       europe/fr-be  (fr 8)  Configuration for \"7  fr             M  french-mbrola-1      mb/mb-fr1\"  voice :   mb-fr1   To see the full list of variant:  espeak --voices = variant  Example:  espeak --voices=variant\nPty Language Age/Gender VoiceName          File          Other Languages\n 5  variant        F  female2              !v/f2\n 5  variant        F  female3              !v/f3\n 5  variant        F  female4              !v/f4\n 5  variant        F  female5              !v/f5\n 5  variant        F  female_whisper       !v/whisperf\n 5  variant        -  klatt                !v/klatt\n 5  variant        -  klatt2               !v/klatt2\n [...]  Configuration for \"5  variant        F  female3              !v/f3\".  voice :   fr  variant :   f3", 
            "title": "Installation"
        }, 
        {
            "location": "/settings/tts/espeak/#settings-example", 
            "text": "default_text_to_speech :   espeak  text_to_speech : \n     -   espeak : \n         voice :   fr \n         variant :   f3", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/tts/googletts/", 
            "text": "This TTS is based on the \nGoogle translate engine\n\n\nInput parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nRequired\n\n\nDefault\n\n\nChoices\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nlanguage\n\n\nYES\n\n\n\n\n103 languages\n\n\nLanguage are identified with their ISO_639-1 codes (https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)\n\n\n\n\n\n\ncache\n\n\nNo\n\n\nTRUE\n\n\nTrue / False\n\n\nTrue if you want to use the cache with this TTS\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_text_to_speech\n:\n \ngoogletts\n\n\n\ntext_to_speech\n:\n\n    \n-\n \ngoogletts\n:\n\n        \nlanguage\n:\n \nfr", 
            "title": "googletts"
        }, 
        {
            "location": "/settings/tts/googletts/#input-parameters", 
            "text": "Parameters  Required  Default  Choices  Comment      language  YES   103 languages  Language are identified with their ISO_639-1 codes (https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)    cache  No  TRUE  True / False  True if you want to use the cache with this TTS", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/tts/googletts/#settings-example", 
            "text": "default_text_to_speech :   googletts  text_to_speech : \n     -   googletts : \n         language :   fr", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/tts/pico2wave/", 
            "text": "This TTS is based on the SVOX picoTTS engine\n\n\nInput parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nRequired\n\n\nDefault\n\n\nChoices\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nlanguage\n\n\nyes\n\n\n\n\n6 languages\n\n\nList of supported languages in the Note section\n\n\n\n\n\n\ncache\n\n\nno\n\n\nTRUE\n\n\nTrue,  False\n\n\nTrue if you want to use the cache with this TTS\n\n\n\n\n\n\nsamplerate\n\n\nno\n\n\n\n\nint\n\n\nPico2wave creates 16 khz files but not all USB devices support this. Set a value to convert to a specific samplerate. For Example: 44100\n\n\n\n\n\n\npath\n\n\nno\n\n\n/usr/bin/pico2wave\n\n\n\n\nPath to the Pico2wave binary. If not set, Kalliope will try to load it from the environment\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_text_to_speech\n:\n \npico2wave\n\n\n\ntext_to_speech\n:\n\n    \n-\n \npico2wave\n:\n\n        \nlanguage\n:\n \nfr-FR\n\n        \ncache\n:\n \nTrue\n\n\n\n\n\n\nNotes\n\n\nSupported languages :\n\n\n\n\nEnglish en-US\n\n\nEnglish en-GB\n\n\nFrench fr-FR\n\n\nSpanish es-ES\n\n\nGerman de-DE\n\n\nItalian it-IT", 
            "title": "pico2wave"
        }, 
        {
            "location": "/settings/tts/pico2wave/#input-parameters", 
            "text": "Parameters  Required  Default  Choices  Comment      language  yes   6 languages  List of supported languages in the Note section    cache  no  TRUE  True,  False  True if you want to use the cache with this TTS    samplerate  no   int  Pico2wave creates 16 khz files but not all USB devices support this. Set a value to convert to a specific samplerate. For Example: 44100    path  no  /usr/bin/pico2wave   Path to the Pico2wave binary. If not set, Kalliope will try to load it from the environment", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/tts/pico2wave/#settings-example", 
            "text": "default_text_to_speech :   pico2wave  text_to_speech : \n     -   pico2wave : \n         language :   fr-FR \n         cache :   True", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/tts/pico2wave/#notes", 
            "text": "Supported languages :   English en-US  English en-GB  French fr-FR  Spanish es-ES  German de-DE  Italian it-IT", 
            "title": "Notes"
        }, 
        {
            "location": "/settings/tts/voicerss/", 
            "text": "This TTS is based on the \nVoiceRSS engine\n. \nOfficial Documentation here\n\n\nInput parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nRequired\n\n\nDefault\n\n\nChoices\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nlanguage\n\n\nYES\n\n\n\n\n26 languages\n, example : \"fr-fr\"\n\n\nLanguages are identified by the LCID string\n\n\n\n\n\n\nkey\n\n\nYES\n\n\n\n\n\n\nregister in the official website to get API key\n\n\n\n\n\n\nrate\n\n\nNO\n\n\n0\n\n\nany int\n\n\nAudio Rate\n\n\n\n\n\n\ncodec\n\n\nNO\n\n\n'MP3'\n\n\n'MP3', 'WAV', 'AAC', 'OGG', 'CAF'\n\n\nAudio Codecs\n\n\n\n\n\n\naudio_format\n\n\nNO\n\n\n'44khz_16bit_stereo'\n\n\n51 choices\n, '8khz_8bit_mono'\n\n\nAudio formats\n\n\n\n\n\n\nssml\n\n\nNO\n\n\nFalse\n\n\nTrue / False\n\n\nTrue if you want ssml (only upgraded plans)\n\n\n\n\n\n\nbase64\n\n\nNO\n\n\nFalse\n\n\nTrue / False\n\n\nTrue if you want base64\n\n\n\n\n\n\nssl\n\n\nNO\n\n\nFalse\n\n\nTrue / False\n\n\nTrue if you want ssl\n\n\n\n\n\n\ncache\n\n\nNO\n\n\nTrue\n\n\nTrue / False\n\n\nTrue if you want to use the cache with this TTS\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_text_to_speech\n:\n \nvoicerss\n\n\n\ntext_to_speech\n:\n\n    \n-\n \nvoicerss\n:\n\n        \nlanguage\n:\n \nfr-fr\n\n        \nkey\n:\n \nAPI_Key\n\n\n\n\n\n\nNotes\n\n\nlimitations : 100KB per request\n\n\nThe Free edition is limited to 350 daily requests.\nPossibility to \nupgrade the plan\n.", 
            "title": "voicerss"
        }, 
        {
            "location": "/settings/tts/voicerss/#input-parameters", 
            "text": "Parameters  Required  Default  Choices  Comment      language  YES   26 languages , example : \"fr-fr\"  Languages are identified by the LCID string    key  YES    register in the official website to get API key    rate  NO  0  any int  Audio Rate    codec  NO  'MP3'  'MP3', 'WAV', 'AAC', 'OGG', 'CAF'  Audio Codecs    audio_format  NO  '44khz_16bit_stereo'  51 choices , '8khz_8bit_mono'  Audio formats    ssml  NO  False  True / False  True if you want ssml (only upgraded plans)    base64  NO  False  True / False  True if you want base64    ssl  NO  False  True / False  True if you want ssl    cache  NO  True  True / False  True if you want to use the cache with this TTS", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/tts/voicerss/#settings-example", 
            "text": "default_text_to_speech :   voicerss  text_to_speech : \n     -   voicerss : \n         language :   fr-fr \n         key :   API_Key", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/tts/voicerss/#notes", 
            "text": "limitations : 100KB per request  The Free edition is limited to 350 daily requests.\nPossibility to  upgrade the plan .", 
            "title": "Notes"
        }, 
        {
            "location": "/settings/tts/watson/", 
            "text": "This TTS is based on the \nIBM Watson engine\n.\n\n\nInstallation\n\n\nYou need to create an account and then a project to get a username and password.\n\n\nOnce you project created, you should see your credentials like the following\n\n\n{\n\n  \nurl\n:\n \nhttps://stream.watsonplatform.net/text-to-speech/api\n,\n\n  \nusername\n:\n \n785dazs-example-98dz-b324-a965478az\n,\n\n  \npassword\n:\n \ngenerated_password\n\n\n}\n\n\n\n\n\n\nInput parameters\n\n\n\n\n\n\n\n\nParameters\n\n\nRequired\n\n\nDefault\n\n\nChoices\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nyes\n\n\n\n\n\n\nUsername of the created service in IBM cloud\n\n\n\n\n\n\npassword\n\n\nyes\n\n\n\n\n\n\nPassword related to the username\n\n\n\n\n\n\nvoice\n\n\nyes\n\n\n\n\nSee voice table below\n\n\nCode that define the voice used for the synthesis\n\n\n\n\n\n\n\n\nVoice code\n\n\nVoice code that can be used in the voice flag of your configuration\n\n\n\n\n\n\n\n\nLanguages\n\n\nCode\n\n\nGender\n\n\n\n\n\n\n\n\n\n\nGerman\n\n\nde-DE_BirgitVoice\n\n\nFemale\n\n\n\n\n\n\nGerman\n\n\nde-DE_DieterVoice\n\n\nMale\n\n\n\n\n\n\nUK English\n\n\nen-GB_KateVoice\n\n\nFemale\n\n\n\n\n\n\nUS English\n\n\nen-US_AllisonVoice\n\n\nFemale\n\n\n\n\n\n\nUS English\n\n\nen-US_LisaVoice\n\n\nFemale\n\n\n\n\n\n\nUS English\n\n\nen-US_MichaelVoice (the default)\n\n\nMale\n\n\n\n\n\n\nCastilian Spanish\n\n\nes-ES_EnriqueVoice\n\n\nMale\n\n\n\n\n\n\nCastilian Spanish\n\n\nes-ES_LauraVoice\n\n\nFemale\n\n\n\n\n\n\nLatin American Spanish\n\n\nes-LA_SofiaVoice\n\n\nFemale\n\n\n\n\n\n\nNorth American Spanish\n\n\nes-US_SofiaVoice\n\n\nFemale\n\n\n\n\n\n\nFrench\n\n\nfr-FR_ReneeVoice\n\n\nFemale\n\n\n\n\n\n\nItalian\n\n\nit-IT_FrancescaVoice\n\n\nFemale\n\n\n\n\n\n\nJapanese\n\n\nja-JP_EmiVoice\n\n\nFemale\n\n\n\n\n\n\nBrazilian Portuguese\n\n\npt-BR_IsabelaVoice\n\n\nFemale\n\n\n\n\n\n\n\n\nSettings example\n\n\ndefault_text_to_speech\n:\n \nwatson\n\n\n\ntext_to_speech\n:\n\n  \n-\n \nwatson\n:\n\n      \nusername\n:\n \nusername_code\n\n      \npassword\n:\n \ngenerated_password\n\n      \nvoice\n:\n \nfr-FR_ReneeVoice\n\n\n\n\n\n\nNotes\n\n\nThis TTS engine is free for less than 10,000 Characters per Month.", 
            "title": "watson"
        }, 
        {
            "location": "/settings/tts/watson/#installation", 
            "text": "You need to create an account and then a project to get a username and password.  Once you project created, you should see your credentials like the following  { \n   url :   https://stream.watsonplatform.net/text-to-speech/api , \n   username :   785dazs-example-98dz-b324-a965478az , \n   password :   generated_password  }", 
            "title": "Installation"
        }, 
        {
            "location": "/settings/tts/watson/#input-parameters", 
            "text": "Parameters  Required  Default  Choices  Comment      username  yes    Username of the created service in IBM cloud    password  yes    Password related to the username    voice  yes   See voice table below  Code that define the voice used for the synthesis", 
            "title": "Input parameters"
        }, 
        {
            "location": "/settings/tts/watson/#voice-code", 
            "text": "Voice code that can be used in the voice flag of your configuration     Languages  Code  Gender      German  de-DE_BirgitVoice  Female    German  de-DE_DieterVoice  Male    UK English  en-GB_KateVoice  Female    US English  en-US_AllisonVoice  Female    US English  en-US_LisaVoice  Female    US English  en-US_MichaelVoice (the default)  Male    Castilian Spanish  es-ES_EnriqueVoice  Male    Castilian Spanish  es-ES_LauraVoice  Female    Latin American Spanish  es-LA_SofiaVoice  Female    North American Spanish  es-US_SofiaVoice  Female    French  fr-FR_ReneeVoice  Female    Italian  it-IT_FrancescaVoice  Female    Japanese  ja-JP_EmiVoice  Female    Brazilian Portuguese  pt-BR_IsabelaVoice  Female", 
            "title": "Voice code"
        }, 
        {
            "location": "/settings/tts/watson/#settings-example", 
            "text": "default_text_to_speech :   watson  text_to_speech : \n   -   watson : \n       username :   username_code \n       password :   generated_password \n       voice :   fr-FR_ReneeVoice", 
            "title": "Settings example"
        }, 
        {
            "location": "/settings/tts/watson/#notes", 
            "text": "This TTS engine is free for less than 10,000 Characters per Month.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/brain/", 
            "text": "brain.yml\n\n\nThe brain is a main component of Kalliope. It's a module that gives a configuration of your own personal assistant and, so, determines it's behavior and fonctionnalities.\n\n\nKalliope will look for the brain in the order bellow:\n\n\n\n\nFrom you current folder, E.g \n/home/pi/my_kalliope/brain.yml\n\n\nFrom \n/etc/kalliope/brain.yml\n\n\nFrom the default \nbrain.yml\n located in the root of the project tree.\n\n\n\n\nBrain is composed by \nsynapses\n: a synapse is the link between input(\nsignals\n) and output actions(\nneurons\n).\n\n\nSignals\n\n\nSyntax\n\n\nA signal is an input event triggered by a synapse. When a signal from the list is caught, Kalliope runs attached neurons of the synapse.\n\n\nThe syntax is the following\n\n\nsignals\n:\n\n  \n-\n \nsignal_name\n:\n \nparameter\n\n\n\n\n\n\nOr\n\n\nsignals\n:\n\n  \n-\n \nsignal_name\n:\n\n      \nparameter_key1\n:\n \nparameter_value1\n\n      \nparameter_key2\n:\n \nparameter_value2\n\n\n\n\n\n\nExample:\n\n\nsignals\n:\n\n  \n-\n \norder\n:\n \nhello\n \nkalliope\n\n\n\n\n\n\nsignals\n:\n\n  \n-\n \nevent\n:\n\n      \nhour\n:\n \n8\n\n      \nminute\n:\n \n30\n\n\n\n\n\n\nYou can also set an empty list as signals. This means that the synapse can only be started from the CLI, the API, a hook or from another synapse.\n\n\nsignals\n:\n \n[]\n\n\n\n\n\n\nOutput parameters\n\n\nSome signals will send a list of parameters to all neurons when triggered. Neurons are then free to use them or not.\nFor example, the signal mqtt_subscriber(signals/mqtt_subscriber.md) send a variable called \"mqtt_subscriber_message\" when triggered. In the example bellow, the neuron \"say\" use this variable to make Kalliope speak out loud a status received from the MQTT broker.\n\n\nE.g\n\n\n-\n \nname\n:\n \nmqtt\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n   \n# this signal send a \nmqtt_subscriber_message\n when triggered\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \ntopic1\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nThe\n \nlight\n \nis\n \nnow\n \n{{\n \nmqtt_subscriber_message\n \n}}\n\n\n\n\n\n\nAvailable signals\n\n\nHere is a list of core signal that are installed natively with Kalliope\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevent\n\n\nLaunch synapses periodically at fixed times, dates, or intervals.\n\n\n\n\n\n\nmqtt_subscriber\n\n\nLaunch synapse from when receive a message from a MQTT broker\n\n\n\n\n\n\norder\n\n\nLaunch synapses from captured vocal order from the microphone\n\n\n\n\n\n\ngeolocation\n\n\nDefine synapses to be triggered by clients handling geolocation\n\n\n\n\n\n\n\n\nSee the full list of core and community signals on the \nKalliope's website\n.\n\n\nNeurons\n\n\nA neuron is a plugin that performs a specific action. You use it to create a synapse.\nYou can add as many neurons as you want to a synapse. The neurons are executed one by one when one of the input signal is triggered.\n\n\nSyntax\n\n\nNeurons are declared in the \nneurons\n section of a synapse in your brain file.\nThe \nneurons\n section is a list (because it starts with a \"-\") which contains neuron modules names\n\n\nneurons\n:\n\n    \n-\n \nneuron_1_name\n\n    \n-\n \nneuron_2_name\n\n    \n-\n \nanother_neuron\n\n\n\n\n\n\nSome neurons need parameters that can be passed as arguments following the syntax bellow:\n\n\nneurons\n:\n\n    \n-\n \nneuron_name\n:\n\n        \nparameter1\n:\n \nvalue1\n\n        \nparameter2\n:\n \nvalue2\n\n\n\n\n\n\nEg:\n\n\n\n\nnote:\n parameters are indented with two spaces bellow the neuron's name following the YAML syntax.\n\n\nnote:\n Kalliope will try to load the neuron from your resources directory, then from core neuron packages.\n\n\n\n\nInput values\n\n\nNeurons require some \nparameters\n from the synapse declaration to work. Those parameters, also called arguments, can be passed to the neuron from:\n\n\n\n\nthe neuron declaration\n\n\nglobal variables\n\n\nthe captured order\n\n\noutput parameter from a signal\n\n\n\n\nFrom the neuron declaration:\n\n\nneurons\n:\n\n    \n-\n \nneuron_name\n:\n\n        \nparameter1\n:\n \nvalue1\n\n        \nparameter2\n:\n \nvalue2\n\n\n\n\n\n\nFrom global variables: (cf: \nsettings\n)\n\n\n  \n-\n \nname\n:\n \nrun-simple-sleep\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nWait\n \nfor\n \nme\n \n\n    \nneurons\n:\n\n      \n-\n \nsleep\n:\n\n          \nseconds\n:\n \n{{\nvariable\n}}\n\n\n\n\n\n\nFrom the captured order:\n\n\n  \n-\n \nname\n:\n \nsay-hello\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nsay\n \nhello\n \nto\n \n{{\n \nname\n \n}}\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nHello\n \n{{\n \nname\n \n}}\n\n\n\n\n\n\nHere, the spoken value captured by the TTS engine will be passed as an argument to the neuron in every parameters that want use it.\n\n\nExample, with the synapse declaration above, if you say \"say hello to Bob\". The parameter parameter message is instantiated and all \n{{ name }}\n are replaced by \"bob\".\n\n\nFrom parameters sent by a signal(E.g, mqtt subscriber)\n\n\n-\n \nname\n:\n \nmqtt\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n   \n# this signal send a \nmqtt_subscriber_message\n when triggered\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \ntopic1\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nThe\n \nlight\n \nis\n \nnow\n \n{{\n \nmqtt_subscriber_message\n \n}}\n\n\n\n\n\n\n\n\nNote:\n If a parameter of a neuron is waiting for a variable from the order and this variable haven't been found in the spoken order, then the neuron is not launched.\n\n\n\n\nOutput values\n\n\nSome neurons will return variables into a dictionary of value. Those values can be used to make your own Kalliope answer through a template.\nThe objective of using a template is to let the user choosing what he wants to make Kalliope saying in its own language.\nA template is a text file that contains \nvariables\n, which get replaced with values when the template is evaluated by\nthe \ntemplate engine\n, and \ntags\n, which control the logic of the template.\n\n\nThe template engine used in Kalliope is \nJinja2\n.\n\n\nFor example, if we look at the \ndocumentation of the neuron systemedate\n, we can see that the neuron will return a dictionary of value like \nminute\n, \nhours\n and all other values about the current time on the system where Kalliope is installed.\n\n\nA simple, that only use \nvariables\n, template would be\n\n\nIt is \n{{\n \nhours\n \n}}\n and \n{{\n \nminutes\n \n}}\n minutes.\n\n\n\n\n\n\nPlaced in a complete synapse, it looks like the following\n\n\n-\n \nname\n:\n \ntime\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nwhat\n \ntime\n \nis\n \nit\n\n    \nneurons\n:\n\n      \n-\n \nsystemdate\n:\n\n          \nsay_template\n:\n\n            \n-\n \nIt\n \nis\n \n{{\n \nhours\n \n}}\n \nhours\n \nand\n \n{{\n \nminutes\n \n}}\n \nminutes\n\n\n\n\n\n\nHere, we use \nvariables\n from the neuron into our template file. Both variables will be interpreted by the template engine.\nSo, what the user will hear is something like \nIt is 9 hours and 21 minutes\n.\n\n\nWe can add some logic to a template with tags. Here a simple example with \na test tag\n, that will make Kalliope change the pronounced sentence depending on the current time.\n\n\n{%\n \nif\n \nhours\n \n \n8\n \n%}\n\n\n    It is late, isn\nt it?\n\n\n{%\n \nelse\n \n%}\n\n\n    We still have time\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\nAs this is multi-lines, we can put the content in a file and use a \nfile_template\n instead of a \nsay_template\n for more clarity.\n\n\n-\n \nname\n:\n \ntime\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nwhat\n \ntime\n \nis\n \nit\n\n    \nneurons\n:\n\n      \n-\n \nsystemdate\n:\n\n          \nfile_template\n:\n \n/path/to/file/template.j2\n\n\n\n\n\n\nkalliope_memory\n\n\nKalliope can store in a short term memory a variable from an order or generated from a neuron:\n- output parameters from a neuron\n- variable parameters captured from an order.\n\n\nStored parameters can then be used in other synapses during a future call.\nPlease not that this memory is not preserved after a restart of Kalliope.\n\n\nStore parameters generated by a neuron\n\n\nSyntax with output parameters from a neuron\n\n\n-\n \nname\n:\n \nsynapse-name\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nneuron_name\n:\n\n        \nkalliope_memory\n:\n\n          \nkey_name_in_memory\n:\n \n{{\n \noutput_variable_from_neuron\n \n}}\n\n          \nother_key_name_in_memory\n:\n \n{{\n \nother_output_variable_from_neuron\n \n}}\n\n\n\n\n\n\nSyntax to reuse memorized parameters in another synapse\n\n\n-\n \nname\n:\n \nsynapse-name\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nan\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nneuron_name\n:\n\n        \nparameter1\n:\n \n{{\n \nkalliope_memory[\nkey_name_in_memory\n]\n \n}}\n\n        \nparameter2\n:\n \n{{\n \nkalliope_memory[\nother_key_name_in_memory\n]\n \n}}\n\n\n\n\n\n\n\n\nNote:\n The key name need to be placed into simple quotes\n\n\n\n\nExample with a core neuron like \nsystemdate\n\n\n-\n \nname\n:\n \nsynapse-name\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nsystemdate\n:\n\n        \nsay_template\n:\n\n          \n-\n \nIt\n \n{{\n \nhours\n \n}}\n \nhours\n \nand\n \n{{\n \nminutes\n \n}}\n \nminutes\n\n        \nkalliope_memory\n:\n\n          \nhours_when_asked\n:\n \n{{\n \nhours\n \n}}\n\n          \nminutes_when_asked\n:\n \n{{\n \nminutes\n \n}}\n\n\n\n\n\n\nHere, the \nsystemdate\n neuron generates variables that haven been passed to the template like described in the previous section and to the memory of Kalliope.\n\n\nThose parameters can now be used in a next call\n\n\n-\n \nname\n:\n \nsynapse-name-2\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \na\n \nwhat\n \ntime\n \nI\nve\n \nasked\n \nthe\n \ntime?\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nat\n \n{{\n \nkalliope_memory[\nhours_when_asked\n]}}\n \nhours\n \nand\n \n{{\n \nkalliope_memory[\nminutes_when_asked\n]}}\n \nminutes\n\n\n\n\n\n\nAs it's based on a template, the value can be modified by adding a string\n\n\nkalliope_memory\n:\n\n  \nmy_saved_key\n:\n \n{{\n \nneuron_parameter_name\n \n}}\n \nwith\n \na\n \nword\n\n\n\n\n\n\nMultiple parameters can be used and concatenated in the same memorized key\n\n\nkalliope_memory\n:\n\n  \nmy_saved_key\n:\n \n{{\n \nneuron_parameter_name1\n \n}}\n \nand\n \n{{\n \nneuron_parameter_name2\n \n}}\n\n\n\n\n\n\nStore parameters captured from orders\n\n\nSyntax\n\n\n-\n \nname\n:\n \nsynapse-name\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nmy\n \norder\n \nwith\n \n{{\n \nvariable\n \n}}\n\n  \nneurons\n:\n\n    \n-\n \nneuron_name\n:\n\n        \nkalliope_memory\n:\n\n          \nkey_name_in_memory\n:\n \n{{\n \nvariable\n \n}}\n\n\n\n\n\n\nThe syntax to reuse memorized parameters in another synapse is the same as the one used with neuron parameters\n\n\n-\n \nname\n:\n \nsynapse-name\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nan\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nneuron_name\n:\n\n        \nparameter1\n:\n \n{{\n \nkalliope_memory\n[\nkey_name_in_memory\n]}}\n\n\n\n\n\n\nExample\n\n\n-\n \nname\n:\n \nsynapse-id\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nsay\n \nhello\n \nto\n \n{{\n \nname\n \n}}\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nHello\n \n{{\n \nname\n \n}}\n\n        \nkalliope_memory\n:\n\n          \nfriend\n:\n \n{{\n \nname\n \n}}\n\n\n\n\n\n\nHere, the variable \"name\" has been used directly into the template and also saved in memory behind the key \"friend\".\nThe value can now be used in a next call like the following\n\n\n-\n \nname\n:\n \nsynapse-id\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nwhat\n \nis\n \nthe\n \nname\n \nof\n \nmy\n \nfriend?\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nIt\ns\n \n{{\n \nkalliope_memory[\nfriend\n]\n \n}}\n\n\n\n\n\n\nHere is another example brain whit use the \nneurotimer\n neuron. In this scenario, you want to remember to do something\n\n\n\n\nYou:\n remind me to call mom in 15 minutes\n\n\nKalliope:\n I'll notify you in 15 minutes\n\n15 minutes later..\n\n\nKalliope:\n You asked me to remind you to call mom 15 minutes ago\n\n\n\n\n-\n \nname\n:\n \nremember-synapse\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nremind\n \nme\n \nto\n \n{{\n \nremember\n \n}}\n \nin\n \n{{\n \ntime\n \n}}\n \nminutes\n\n  \nneurons\n:\n\n    \n-\n \nneurotimer\n:\n\n        \nseconds\n:\n \n{{\n \ntime\n \n}}\n\n        \nsynapse\n:\n \nremember-todo\n\n        \nkalliope_memory\n:\n\n          \nremember\n:\n \n{{\n \nremember\n \n}}\n\n          \nseconds\n:\n \n{{\n \ntime\n \n}}\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nI\nll\n \nremind\n \nyou\n \nin\n \n{{\n \ntime\n \n}}\n \nminutes\n\n\n\n-\n \nname\n:\n \nremember-todo\n\n  \nsignals\n:\n \n{}\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nYou\n \nasked\n \nme\n \nto\n \nremind\n \nyou\n \nto\n \n{{\n \nkalliope_memory[\nremember\n]\n \n}}\n \n{{\n \nkalliope_memory[\ntime\n]\n \n}}\n \nminutes\n \nago\n\n\n\n\n\n\nGet the last order generated TTS message\n\n\nKalliope will save in memory automatically:\n- the last generated TTS message .\n- the last caught order\n\n\nTo get the last generated message, use the key \n{{ kalliope_memory['kalliope_last_tts_message'] }}\n in your synapse.\nTo get the last order, use the key \n{{ kalliope_memory['kalliope_last_order'] }}\n in your synapse.\n\n\nKeep in mind that the \nkalliope_last_tts_message\n variable is overridden every time Kalliope says something.\nSo you need to catch messages you want to process in the right hook like \non_start_speaking\n or \non_stop_speaking\n.\n\n\nAn example of usage is to send each message to an API each time Kalliope start speaking.\n\n\nYou need at first to create a hook in your \nsettings.yaml\n like the following\n\n\nhooks\n:\n\n  \non_start_speaking\n:\n \nmm-say\n\n\n\n\n\n\nThen create a synapse in your \nbrain\n that is linked to the hook to send each message.\nAs a concrete example, here the \nmagic mirror neuron\n is used to send each spelt out loud message to the Magic Mirror API in order to show them on the screen.\n\n\n  \n-\n \nname\n:\n \nmm-say\n\n    \nsignals\n:\n \n[]\n\n    \nneurons\n:\n\n      \n-\n \nmagic_mirror\n:\n\n          \nmm_url\n:\n \nhttp://127.0.0.1:8080/kalliope\n\n          \nnotification\n:\n \nKALLIOPE\n\n          \npayload\n:\n \n{{\n \nkalliope_memory[\nkalliope_last_tts_message\n]\n \n}}\n\n\n\n\n\n\nNote\n\n\nkalliope_last_tts_message\n is overridden each time Kalliope says something.\nFor example, a common practice is to have a synapse placed in the hook \non_triggered\n in order to know when the hotword has been triggered.\nSo, if this synapse is configured like the following\n\n\n-\n \nname\n:\n \non-triggered-synapse\n\n  \nsignals\n:\n \n[]\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n \nwhat\n \ncan\n \ni\n \ndo\n \nfor\n \nyou?\n\n\n\n\n\n\nAnd you try the get the last generated message with a synapse like the following\n\n\n-\n \nname\n:\n \nlast-message\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nwhat\n \nwas\n \nthe\n \nlast\n \nmessage?\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nit\n \nwas\n \n{{\n \nkalliope_memory[\nkalliope_last_tts_message\n]\n \n}}\n\n\n\n\n\n\nThen the answer will always be \"it was what can i do for you?\" because the variable \nkalliope_last_tts_message\n has been overridden during the execution of the \non-triggered-synapse\n.\n\n\nSplit the brain\n\n\nIf you want a better visibly, or simply sort your actions in different files, you can split the main brain file into multiple ones.\n\n\nTo do that, use the import statement in the entry brain.yml file with the following syntax:\n\n\n  \n-\n \nincludes\n:\n\n      \n-\n \npath/to/sub_brain.yml\n\n      \n-\n \npath/to/another_sub_brain.yml\n\n\n\n\n\n\nE.g:\n\n\n  \n-\n \nincludes\n:\n\n      \n-\n \nbrains/rolling_shutter_commands.yml\n\n      \n-\n \nbrains/find_my_phone.yml\n\n\n\n\n\n\n\n\nNote:\n You can only use the \ninclude\n statement in the main brain file.\n\n\nNote:\n the includes statement must start with a \n-", 
            "title": "brain.yml"
        }, 
        {
            "location": "/brain/brain/#brainyml", 
            "text": "The brain is a main component of Kalliope. It's a module that gives a configuration of your own personal assistant and, so, determines it's behavior and fonctionnalities.  Kalliope will look for the brain in the order bellow:   From you current folder, E.g  /home/pi/my_kalliope/brain.yml  From  /etc/kalliope/brain.yml  From the default  brain.yml  located in the root of the project tree.   Brain is composed by  synapses : a synapse is the link between input( signals ) and output actions( neurons ).", 
            "title": "brain.yml"
        }, 
        {
            "location": "/brain/brain/#signals", 
            "text": "", 
            "title": "Signals"
        }, 
        {
            "location": "/brain/brain/#syntax", 
            "text": "A signal is an input event triggered by a synapse. When a signal from the list is caught, Kalliope runs attached neurons of the synapse.  The syntax is the following  signals : \n   -   signal_name :   parameter   Or  signals : \n   -   signal_name : \n       parameter_key1 :   parameter_value1 \n       parameter_key2 :   parameter_value2   Example:  signals : \n   -   order :   hello   kalliope   signals : \n   -   event : \n       hour :   8 \n       minute :   30   You can also set an empty list as signals. This means that the synapse can only be started from the CLI, the API, a hook or from another synapse.  signals :   []", 
            "title": "Syntax"
        }, 
        {
            "location": "/brain/brain/#output-parameters", 
            "text": "Some signals will send a list of parameters to all neurons when triggered. Neurons are then free to use them or not.\nFor example, the signal mqtt_subscriber(signals/mqtt_subscriber.md) send a variable called \"mqtt_subscriber_message\" when triggered. In the example bellow, the neuron \"say\" use this variable to make Kalliope speak out loud a status received from the MQTT broker.  E.g  -   name :   mqtt \n   signals : \n     -   mqtt_subscriber :     # this signal send a  mqtt_subscriber_message  when triggered \n         broker_ip :   127.0.0.1 \n         topic :   topic1 \n   neurons : \n     -   say : \n         message : \n           -   The   light   is   now   {{   mqtt_subscriber_message   }}", 
            "title": "Output parameters"
        }, 
        {
            "location": "/brain/brain/#available-signals", 
            "text": "Here is a list of core signal that are installed natively with Kalliope     Name  Description      event  Launch synapses periodically at fixed times, dates, or intervals.    mqtt_subscriber  Launch synapse from when receive a message from a MQTT broker    order  Launch synapses from captured vocal order from the microphone    geolocation  Define synapses to be triggered by clients handling geolocation     See the full list of core and community signals on the  Kalliope's website .", 
            "title": "Available signals"
        }, 
        {
            "location": "/brain/brain/#neurons", 
            "text": "A neuron is a plugin that performs a specific action. You use it to create a synapse.\nYou can add as many neurons as you want to a synapse. The neurons are executed one by one when one of the input signal is triggered.", 
            "title": "Neurons"
        }, 
        {
            "location": "/brain/brain/#syntax_1", 
            "text": "Neurons are declared in the  neurons  section of a synapse in your brain file.\nThe  neurons  section is a list (because it starts with a \"-\") which contains neuron modules names  neurons : \n     -   neuron_1_name \n     -   neuron_2_name \n     -   another_neuron   Some neurons need parameters that can be passed as arguments following the syntax bellow:  neurons : \n     -   neuron_name : \n         parameter1 :   value1 \n         parameter2 :   value2   Eg:   note:  parameters are indented with two spaces bellow the neuron's name following the YAML syntax.  note:  Kalliope will try to load the neuron from your resources directory, then from core neuron packages.", 
            "title": "Syntax"
        }, 
        {
            "location": "/brain/brain/#input-values", 
            "text": "Neurons require some  parameters  from the synapse declaration to work. Those parameters, also called arguments, can be passed to the neuron from:   the neuron declaration  global variables  the captured order  output parameter from a signal   From the neuron declaration:  neurons : \n     -   neuron_name : \n         parameter1 :   value1 \n         parameter2 :   value2   From global variables: (cf:  settings )     -   name :   run-simple-sleep \n     signals : \n       -   order :   Wait   for   me   \n     neurons : \n       -   sleep : \n           seconds :   {{ variable }}   From the captured order:     -   name :   say-hello \n     signals : \n       -   order :   say   hello   to   {{   name   }} \n     neurons : \n       -   say : \n           message : \n             -   Hello   {{   name   }}   Here, the spoken value captured by the TTS engine will be passed as an argument to the neuron in every parameters that want use it.  Example, with the synapse declaration above, if you say \"say hello to Bob\". The parameter parameter message is instantiated and all  {{ name }}  are replaced by \"bob\".  From parameters sent by a signal(E.g, mqtt subscriber)  -   name :   mqtt \n   signals : \n     -   mqtt_subscriber :     # this signal send a  mqtt_subscriber_message  when triggered \n         broker_ip :   127.0.0.1 \n         topic :   topic1 \n   neurons : \n     -   say : \n         message : \n           -   The   light   is   now   {{   mqtt_subscriber_message   }}    Note:  If a parameter of a neuron is waiting for a variable from the order and this variable haven't been found in the spoken order, then the neuron is not launched.", 
            "title": "Input values"
        }, 
        {
            "location": "/brain/brain/#output-values", 
            "text": "Some neurons will return variables into a dictionary of value. Those values can be used to make your own Kalliope answer through a template.\nThe objective of using a template is to let the user choosing what he wants to make Kalliope saying in its own language.\nA template is a text file that contains  variables , which get replaced with values when the template is evaluated by\nthe  template engine , and  tags , which control the logic of the template.  The template engine used in Kalliope is  Jinja2 .  For example, if we look at the  documentation of the neuron systemedate , we can see that the neuron will return a dictionary of value like  minute ,  hours  and all other values about the current time on the system where Kalliope is installed.  A simple, that only use  variables , template would be  It is  {{   hours   }}  and  {{   minutes   }}  minutes.   Placed in a complete synapse, it looks like the following  -   name :   time \n     signals : \n       -   order :   what   time   is   it \n     neurons : \n       -   systemdate : \n           say_template : \n             -   It   is   {{   hours   }}   hours   and   {{   minutes   }}   minutes   Here, we use  variables  from the neuron into our template file. Both variables will be interpreted by the template engine.\nSo, what the user will hear is something like  It is 9 hours and 21 minutes .  We can add some logic to a template with tags. Here a simple example with  a test tag , that will make Kalliope change the pronounced sentence depending on the current time.  {%   if   hours     8   %}      It is late, isn t it?  {%   else   %}      We still have time  {%   endif   %}   As this is multi-lines, we can put the content in a file and use a  file_template  instead of a  say_template  for more clarity.  -   name :   time \n     signals : \n       -   order :   what   time   is   it \n     neurons : \n       -   systemdate : \n           file_template :   /path/to/file/template.j2", 
            "title": "Output values"
        }, 
        {
            "location": "/brain/brain/#kalliope_memory", 
            "text": "Kalliope can store in a short term memory a variable from an order or generated from a neuron:\n- output parameters from a neuron\n- variable parameters captured from an order.  Stored parameters can then be used in other synapses during a future call.\nPlease not that this memory is not preserved after a restart of Kalliope.", 
            "title": "kalliope_memory"
        }, 
        {
            "location": "/brain/brain/#store-parameters-generated-by-a-neuron", 
            "text": "Syntax with output parameters from a neuron  -   name :   synapse-name \n   signals : \n     -   order :   my   order \n   neurons : \n     -   neuron_name : \n         kalliope_memory : \n           key_name_in_memory :   {{   output_variable_from_neuron   }} \n           other_key_name_in_memory :   {{   other_output_variable_from_neuron   }}   Syntax to reuse memorized parameters in another synapse  -   name :   synapse-name \n   signals : \n     -   order :   an   order \n   neurons : \n     -   neuron_name : \n         parameter1 :   {{   kalliope_memory[ key_name_in_memory ]   }} \n         parameter2 :   {{   kalliope_memory[ other_key_name_in_memory ]   }}    Note:  The key name need to be placed into simple quotes   Example with a core neuron like  systemdate  -   name :   synapse-name \n   signals : \n     -   order :   my   order \n   neurons : \n     -   systemdate : \n         say_template : \n           -   It   {{   hours   }}   hours   and   {{   minutes   }}   minutes \n         kalliope_memory : \n           hours_when_asked :   {{   hours   }} \n           minutes_when_asked :   {{   minutes   }}   Here, the  systemdate  neuron generates variables that haven been passed to the template like described in the previous section and to the memory of Kalliope.  Those parameters can now be used in a next call  -   name :   synapse-name-2 \n   signals : \n     -   order :   a   what   time   I ve   asked   the   time? \n   neurons : \n     -   say : \n         message : \n           -   at   {{   kalliope_memory[ hours_when_asked ]}}   hours   and   {{   kalliope_memory[ minutes_when_asked ]}}   minutes   As it's based on a template, the value can be modified by adding a string  kalliope_memory : \n   my_saved_key :   {{   neuron_parameter_name   }}   with   a   word   Multiple parameters can be used and concatenated in the same memorized key  kalliope_memory : \n   my_saved_key :   {{   neuron_parameter_name1   }}   and   {{   neuron_parameter_name2   }}", 
            "title": "Store parameters generated by a neuron"
        }, 
        {
            "location": "/brain/brain/#store-parameters-captured-from-orders", 
            "text": "Syntax  -   name :   synapse-name \n   signals : \n     -   order :   my   order   with   {{   variable   }} \n   neurons : \n     -   neuron_name : \n         kalliope_memory : \n           key_name_in_memory :   {{   variable   }}   The syntax to reuse memorized parameters in another synapse is the same as the one used with neuron parameters  -   name :   synapse-name \n   signals : \n     -   order :   an   order \n   neurons : \n     -   neuron_name : \n         parameter1 :   {{   kalliope_memory [ key_name_in_memory ]}}   Example  -   name :   synapse-id \n   signals : \n     -   order :   say   hello   to   {{   name   }} \n   neurons : \n     -   say : \n         message : \n           -   Hello   {{   name   }} \n         kalliope_memory : \n           friend :   {{   name   }}   Here, the variable \"name\" has been used directly into the template and also saved in memory behind the key \"friend\".\nThe value can now be used in a next call like the following  -   name :   synapse-id \n   signals : \n     -   order :   what   is   the   name   of   my   friend? \n   neurons : \n     -   say : \n         message : \n           -   It s   {{   kalliope_memory[ friend ]   }}   Here is another example brain whit use the  neurotimer  neuron. In this scenario, you want to remember to do something   You:  remind me to call mom in 15 minutes  Kalliope:  I'll notify you in 15 minutes \n15 minutes later..  Kalliope:  You asked me to remind you to call mom 15 minutes ago   -   name :   remember-synapse \n   signals : \n     -   order :   remind   me   to   {{   remember   }}   in   {{   time   }}   minutes \n   neurons : \n     -   neurotimer : \n         seconds :   {{   time   }} \n         synapse :   remember-todo \n         kalliope_memory : \n           remember :   {{   remember   }} \n           seconds :   {{   time   }} \n     -   say : \n         message : \n           -   I ll   remind   you   in   {{   time   }}   minutes  -   name :   remember-todo \n   signals :   {} \n   neurons : \n     -   say : \n         message : \n           -   You   asked   me   to   remind   you   to   {{   kalliope_memory[ remember ]   }}   {{   kalliope_memory[ time ]   }}   minutes   ago", 
            "title": "Store parameters captured from orders"
        }, 
        {
            "location": "/brain/brain/#get-the-last-order-generated-tts-message", 
            "text": "Kalliope will save in memory automatically:\n- the last generated TTS message .\n- the last caught order  To get the last generated message, use the key  {{ kalliope_memory['kalliope_last_tts_message'] }}  in your synapse.\nTo get the last order, use the key  {{ kalliope_memory['kalliope_last_order'] }}  in your synapse.  Keep in mind that the  kalliope_last_tts_message  variable is overridden every time Kalliope says something.\nSo you need to catch messages you want to process in the right hook like  on_start_speaking  or  on_stop_speaking .  An example of usage is to send each message to an API each time Kalliope start speaking.  You need at first to create a hook in your  settings.yaml  like the following  hooks : \n   on_start_speaking :   mm-say   Then create a synapse in your  brain  that is linked to the hook to send each message.\nAs a concrete example, here the  magic mirror neuron  is used to send each spelt out loud message to the Magic Mirror API in order to show them on the screen.     -   name :   mm-say \n     signals :   [] \n     neurons : \n       -   magic_mirror : \n           mm_url :   http://127.0.0.1:8080/kalliope \n           notification :   KALLIOPE \n           payload :   {{   kalliope_memory[ kalliope_last_tts_message ]   }}   Note  kalliope_last_tts_message  is overridden each time Kalliope says something.\nFor example, a common practice is to have a synapse placed in the hook  on_triggered  in order to know when the hotword has been triggered.\nSo, if this synapse is configured like the following  -   name :   on-triggered-synapse \n   signals :   [] \n   neurons : \n     -   say : \n         message :   what   can   i   do   for   you?   And you try the get the last generated message with a synapse like the following  -   name :   last-message \n     signals : \n       -   order :   what   was   the   last   message? \n     neurons : \n       -   say : \n           message :   it   was   {{   kalliope_memory[ kalliope_last_tts_message ]   }}   Then the answer will always be \"it was what can i do for you?\" because the variable  kalliope_last_tts_message  has been overridden during the execution of the  on-triggered-synapse .", 
            "title": "Get the last order generated TTS message"
        }, 
        {
            "location": "/brain/brain/#split-the-brain", 
            "text": "If you want a better visibly, or simply sort your actions in different files, you can split the main brain file into multiple ones.  To do that, use the import statement in the entry brain.yml file with the following syntax:     -   includes : \n       -   path/to/sub_brain.yml \n       -   path/to/another_sub_brain.yml   E.g:     -   includes : \n       -   brains/rolling_shutter_commands.yml \n       -   brains/find_my_phone.yml    Note:  You can only use the  include  statement in the main brain file.  Note:  the includes statement must start with a  -", 
            "title": "Split the brain"
        }, 
        {
            "location": "/brain/signals/event/", 
            "text": "Event\n\n\nAn \nevent\n is a way to schedule the launching of a synapse periodically at fixed times, dates, or intervals.\n\n\nThe event system is based on \nAPScheduler\n which it is itself based on \nLinux crontab\n.\nWhen you declare an event in the signal, Kalliope will schedule the launching of the target synapse.\n\n\nThe syntax of an event declaration in a synapse is the following\n\n\nsignals\n:\n\n  \n-\n \nevent\n:\n\n      \nparameter1\n:\n \nvalue1\n\n      \nparameter2\n:\n \nvalue2\n\n\n\n\n\n\nFor example, if we want Kalliope to run the synapse every day a 8:30, the event will be declared like this:\n\n\n-\n \nevent\n:\n\n    \nhour\n:\n \n8\n\n    \nminute\n:\n \n30\n\n\n\n\n\n\nInput parameters\n\n\nList of available parameter:\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nyear\n\n\nno\n\n\n*\n\n\n4 digit\n\n\nE.g: 2016\n\n\n\n\n\n\nmonth\n\n\nno\n\n\n*\n\n\nmonth (1-12)\n\n\n\n\n\n\n\n\nday\n\n\nno\n\n\n*\n\n\nday of the (1-31)\n\n\n\n\n\n\n\n\nweek\n\n\nno\n\n\n*\n\n\nISO week (1-53)\n\n\n\n\n\n\n\n\nday_of_week\n\n\nno\n\n\n*\n\n\nnumber or name of weekday  (0-6 or mon,tue,wed,thu,fri,sat,sun)\n\n\n6=Sunday\n\n\n\n\n\n\nhour\n\n\nno\n\n\n*\n\n\nhour (0-23)\n\n\n\n\n\n\n\n\nminute\n\n\nno\n\n\n*\n\n\nminute (0-59)\n\n\n\n\n\n\n\n\nsecond\n\n\nno\n\n\n*\n\n\nsecond (0-59)\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n You must set at least one parameter from the list of parameter\n\n\n\n\nExpressions can be used in value of each parameter. Multiple expression can be given in a single field, separated by commas.\n\n\n\n\n\n\n\n\nExpression\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nany\n\n\nFire on every value\n\n\n\n\n\n\n*/a\n\n\nany\n\n\nFire every \na\n values, starting from the minimum\n\n\n\n\n\n\na-b\n\n\nany\n\n\nFire on any value within the \na-b\n range (a must be smaller than b)\n\n\n\n\n\n\na-b/c\n\n\nany\n\n\nFire every c values within the \na-b\n range\n\n\n\n\n\n\nxrd y\n\n\nday\n\n\nFire on the \nx\n -rd occurrence of weekday \ny\n within the month\n\n\n\n\n\n\nlast x\n\n\nday\n\n\nFire on the last occurrence of weekday \nx\n within the month\n\n\n\n\n\n\nlast x\n\n\nday\n\n\nFire on the last day within the month\n\n\n\n\n\n\nx,y,z\n\n\nday\n\n\nFire on any matching expression; can combine any number of any of the above expressions\n\n\n\n\n\n\n\n\nSynapses example\n\n\nWeb clock radio\n\n\nLet's make a complete example. We want Kalliope to wake us up each morning of working day (Monday to friday) at 7:30 AM and:\n- Wish us good morning\n- Give us the time\n- Play our favourite web radio\n\n\nThe synapse in the brain would be\n\n\n  \n-\n \nname\n:\n \nwake-up\n\n    \nsignals\n:\n\n      \n-\n \nevent\n:\n\n          \nhour\n:\n \n7\n\n          \nminute\n:\n \n30\n\n          \nday_of_week\n:\n \n1,2,3,4,5\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nGood\n \nmorning\n\n      \n-\n \nsystemdate\n:\n\n          \nsay_template\n:\n\n            \n-\n \nIt\n \nis\n \n{{\n \nhours\n \n}}\n \nhours\n \nand\n \n{{\n \nminutes\n \n}}\n \nminutes\n\n      \n-\n \nshell\n:\n\n          \ncmd\n:\n \nmplayer\n \nhttp://192.99.17.12:6410/\n\n          \nasync\n:\n \nTrue\n\n\n\n\n\n\nAfter setting up an event, you must restart Kalliope\n\n\npython kalliope.py start\n\n\n\n\n\nIf the syntax is ok, Kalliope will show you each synapse that it has loaded in the crontab\n\n\nAdd synapse name \nwake-up\n to the scheduler: cron[day_of_week=\n1,2,3,4,5\n, hour=\n7\n, minute=\n30\n]\nEvent loaded\n\n\n\n\n\nThat's it, the synapse is now scheduled and will be started automatically.\n\n\nMake Kalliope say something on the third Friday of June, July, August, November and December at 00:00, 01:00, 02:00 and 03:00\n\n\n-\n \nname\n:\n \nwake-up\n\n  \nsignals\n:\n\n    \n-\n \nevent\n:\n\n        \nday\n:\n \n3rd\n \nfri\n\n        \nmonth\n:\n \n6-8,11-12\n\n        \nhour\n:\n \n0-3\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nThis\n \nis\n \na\n \nschedulled\n \nsentence", 
            "title": "event"
        }, 
        {
            "location": "/brain/signals/event/#event", 
            "text": "An  event  is a way to schedule the launching of a synapse periodically at fixed times, dates, or intervals.  The event system is based on  APScheduler  which it is itself based on  Linux crontab .\nWhen you declare an event in the signal, Kalliope will schedule the launching of the target synapse.  The syntax of an event declaration in a synapse is the following  signals : \n   -   event : \n       parameter1 :   value1 \n       parameter2 :   value2   For example, if we want Kalliope to run the synapse every day a 8:30, the event will be declared like this:  -   event : \n     hour :   8 \n     minute :   30", 
            "title": "Event"
        }, 
        {
            "location": "/brain/signals/event/#input-parameters", 
            "text": "List of available parameter:     parameter  required  default  choices  comment      year  no  *  4 digit  E.g: 2016    month  no  *  month (1-12)     day  no  *  day of the (1-31)     week  no  *  ISO week (1-53)     day_of_week  no  *  number or name of weekday  (0-6 or mon,tue,wed,thu,fri,sat,sun)  6=Sunday    hour  no  *  hour (0-23)     minute  no  *  minute (0-59)     second  no  *  second (0-59)       Note:  You must set at least one parameter from the list of parameter   Expressions can be used in value of each parameter. Multiple expression can be given in a single field, separated by commas.     Expression  Field  Description      *  any  Fire on every value    */a  any  Fire every  a  values, starting from the minimum    a-b  any  Fire on any value within the  a-b  range (a must be smaller than b)    a-b/c  any  Fire every c values within the  a-b  range    xrd y  day  Fire on the  x  -rd occurrence of weekday  y  within the month    last x  day  Fire on the last occurrence of weekday  x  within the month    last x  day  Fire on the last day within the month    x,y,z  day  Fire on any matching expression; can combine any number of any of the above expressions", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/signals/event/#synapses-example", 
            "text": "Web clock radio  Let's make a complete example. We want Kalliope to wake us up each morning of working day (Monday to friday) at 7:30 AM and:\n- Wish us good morning\n- Give us the time\n- Play our favourite web radio  The synapse in the brain would be     -   name :   wake-up \n     signals : \n       -   event : \n           hour :   7 \n           minute :   30 \n           day_of_week :   1,2,3,4,5 \n     neurons : \n       -   say : \n           message : \n             -   Good   morning \n       -   systemdate : \n           say_template : \n             -   It   is   {{   hours   }}   hours   and   {{   minutes   }}   minutes \n       -   shell : \n           cmd :   mplayer   http://192.99.17.12:6410/ \n           async :   True   After setting up an event, you must restart Kalliope  python kalliope.py start  If the syntax is ok, Kalliope will show you each synapse that it has loaded in the crontab  Add synapse name  wake-up  to the scheduler: cron[day_of_week= 1,2,3,4,5 , hour= 7 , minute= 30 ]\nEvent loaded  That's it, the synapse is now scheduled and will be started automatically.  Make Kalliope say something on the third Friday of June, July, August, November and December at 00:00, 01:00, 02:00 and 03:00  -   name :   wake-up \n   signals : \n     -   event : \n         day :   3rd   fri \n         month :   6-8,11-12 \n         hour :   0-3 \n   neurons : \n     -   say : \n         message : \n           -   This   is   a   schedulled   sentence", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/signals/geolocation/", 
            "text": "Geolocation\n is a way to launch a synapse when ENTERING a geolocated zone.\n\n\nAs Kalliope does not manage its own geolocation, this signal has been designed in view to be implemented from external clients (smartphones, watches, embedded devices, etc).\n\n\nThe syntax of a geolocation declaration in a synapse is the following.\n\n\nsignals\n:\n\n    \n-\n \ngeolocation\n:\n\n          \nlatitude\n:\n \n46.204391\n\n          \nlongitude\n:\n \n6.143158\n\n          \nradius\n:\n \n10000\n\n\n\n\n\n\nFor example, if we want Kalliope to run the synapse when entering in Geneva\n\n\n-\n \ngeolocation\n:\n\n      \nlatitude\n:\n \n46.204391\n\n      \nlongitude\n:\n \n6.143158\n\n      \nradius\n:\n \n1000\n\n\n\n\n\n\nInput parameters\n\n\nParameters are keyword you can use to build your geolocation\n\n\nList of available parameter:\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nlatitude\n\n\nyes\n\n\n\n\n46.204391\n\n\n\n\n\n\n\n\nlongitude\n\n\nyes\n\n\n\n\n6.143158\n\n\n\n\n\n\n\n\nradius\n\n\nyes\n\n\n\n\n1 (meters)\n\n\n\n\n\n\n\n\n\n\nSynapses example\n\n\nGeolocation clock radio\n\n\nLet's make a complete example.\nWe want to Kalliope to :\n- welcome when coming back home\n- Play our favourite web radio\n\n\nThe synapse in the brain would be:\n\n\n  \n-\n \nname\n:\n \ngeolocation-welcome-radio\n\n    \nsignals\n:\n\n      \n-\n \ngeolocation\n:\n\n            \nlatitude\n:\n \n46.204391\n\n            \nlongitude\n:\n \n6.143158\n\n            \nradius\n:\n \n10\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nWelcome\n \nHome!\n\n      \n-\n \nshell\n:\n\n          \ncmd\n:\n \nmplayer\n \nhttp://192.99.17.12:6410/\n\n          \nasync\n:\n \nTrue\n\n\n\n\n\n\nAfter setting up a geolocation signal, you must restart Kalliope\n\n\npython kalliope.py start\n\n\n\n\n\nIf the syntax is NOT ok, Kalliope will raise an error and log a message:\n\n\n[Geolocation] The signal is missing mandatory parameters, check documentation\n\n\n\n\n\nNote\n\n\nNote:\n this feature is supported by the \nKalliope official smartphone application.", 
            "title": "geolocation"
        }, 
        {
            "location": "/brain/signals/geolocation/#input-parameters", 
            "text": "Parameters are keyword you can use to build your geolocation  List of available parameter:     parameter  required  default  choices  comment      latitude  yes   46.204391     longitude  yes   6.143158     radius  yes   1 (meters)", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/signals/geolocation/#synapses-example", 
            "text": "", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/signals/geolocation/#geolocation-clock-radio", 
            "text": "Let's make a complete example.\nWe want to Kalliope to :\n- welcome when coming back home\n- Play our favourite web radio  The synapse in the brain would be:     -   name :   geolocation-welcome-radio \n     signals : \n       -   geolocation : \n             latitude :   46.204391 \n             longitude :   6.143158 \n             radius :   10 \n     neurons : \n       -   say : \n           message : \n             -   Welcome   Home! \n       -   shell : \n           cmd :   mplayer   http://192.99.17.12:6410/ \n           async :   True   After setting up a geolocation signal, you must restart Kalliope  python kalliope.py start  If the syntax is NOT ok, Kalliope will raise an error and log a message:  [Geolocation] The signal is missing mandatory parameters, check documentation", 
            "title": "Geolocation clock radio"
        }, 
        {
            "location": "/brain/signals/geolocation/#note", 
            "text": "Note:  this feature is supported by the  Kalliope official smartphone application.", 
            "title": "Note"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/", 
            "text": "Launch synapses when receiving a message on a topic from a MQTT messaging broker server.\n\n\n\n\nMQTT is a Client Server publish/subscribe messaging transport protocol.\nIt is mostly used in communication in Machine to Machine (M2M) and Internet of Things (IoT) contexts.\nThe main concept is that a client will publish a message attached to a \"topic\" to a server called a \"broker\", and other clients which are interested by the topic will subscribe to it.\nThe broker filters all incoming messages and distributes them accordingly.\n\n\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nbroker_ip\n\n\nYES\n\n\n\n\n\n\nIP address of the MQTT broker server\n\n\n\n\n\n\ntopic\n\n\nYES\n\n\n\n\n\n\ntopic name to subscribe\n\n\n\n\n\n\nis_json\n\n\nNO\n\n\nFALSE\n\n\nTrue, False\n\n\nif true, all received message will be converted into a dict\n\n\n\n\n\n\nbroker_port\n\n\nNO\n\n\n1883\n\n\n\n\nPort of the broker. By default 1883. 8883 when TLS is activated.\n\n\n\n\n\n\nclient_id\n\n\nNO\n\n\nkalliope\n\n\n\n\nThe client identifier is an identifier of each MQTT client and used by the broker server for identifying the client. Should be unique per broker\n\n\n\n\n\n\nkeepalive\n\n\nNO\n\n\n60\n\n\n\n\nA time interval in seconds where the clients commits to by sending regular PING Request messages to the broker.\n\n\n\n\n\n\nusername\n\n\nNO\n\n\n\n\n\n\nusername for authenticating the client\n\n\n\n\n\n\npassword\n\n\nNO\n\n\n\n\n\n\npassword for authenticating the client\n\n\n\n\n\n\nprotocol\n\n\nNO\n\n\nMQTTv311\n\n\nMQTTv31, MQTTv311\n\n\nCan be either MQTTv31 or MQTTv311\n\n\n\n\n\n\nca_cert\n\n\nNO\n\n\n\n\n\n\nPath to the remote server CA certificate used for securing the transport\n\n\n\n\n\n\ncertfile\n\n\nNO\n\n\n\n\n\n\nPath to the client certificate file used for authentication\n\n\n\n\n\n\nkeyfile\n\n\nNO\n\n\n\n\n\n\nPath to the client key file attached to the client certificate\n\n\n\n\n\n\ntls_insecure\n\n\nNO\n\n\nFALSE\n\n\nTrue, False\n\n\nSet the verification of the server hostname in the server certificate\n\n\n\n\n\n\n\n\nValues sent to the synapse\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nsample\n\n\n\n\n\n\n\n\n\n\nmqtt_subscriber_message\n\n\nmessage received from the broker\n\n\nstring/dict\n\n\n\"on\", \"off\", {\"temperature\": \"25\", \"humidity\": \"30\"}\n\n\n\n\n\n\n\n\nSynapses example\n\n\nTopic with plain text message\n\n\nThe topic send the status of a light. The received message would be \"on\" or off\"\n\n\n-\n \nname\n:\n \ntest-mqtt-1\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \ntopic1\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nThe\n \nlight\n \nis\n \nnow\n \n{{\n \nmqtt_subscriber_message\n \n}}\n\n\n\n\n\n\nKalliope output example:\n\n\nThe light is now on\n\n\n\n\n\nTopic with json message\n\n\nIn this example, the topic send a json payload that contain multiple information. E.g: \n{\"temperature\": \"25\", \"humidity\": \"30\"}\n\n\n-\n \nname\n:\n \ntest-mqtt-2\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \ntopic2\n\n        \nis_json\n:\n \nTrue\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nThe\n \ntemperature\n \nis\n \nnow\n \n{{\n \nmqtt_subscriber_message[\ntemperature\n]\n \n}},\n \nhumidity\n \n{{\n \nmqtt_subscriber_message[\nhumidity\n]\n \npercents\n \n}}\n\n\n\n\n\n\nKalliope output example:\n\n\nThe temperature is now 25 degrees, humidity 30%\n\n\n\n\n\nThe broker require authentication\n\n\nPassword authentication\n\n\n-\n \nname\n:\n \ntest-mqtt-3\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \ntopic\n \n3\n\n        \nusername\n:\n \nguest\n\n        \npassword\n:\n \nguest\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nMessage\n \nreceived\n \non\n \ntopic\n \n3\n\n\n\n\n\n\nIt's better to use TLS when using password authentication for securing the transport\n\n\n-\n \nname\n:\n \ntest-mqtt-4\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \nbroker_port\n:\n \n8883\n\n        \ntopic\n:\n \ntopic\n \n4\n\n        \nusername\n:\n \nguest\n\n        \npassword\n:\n \nguest\n\n        \nca_cert\n:\n \n/path/to/ca.cert\n\n        \ntls_insecure\n:\n \nTrue\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nMessage\n \nreceived\n \non\n \ntopic\n \n3\n\n\n\n\n\n\nAuthentication based on client certificate\n\n\n-\n \nname\n:\n \ntest-mqtt-5\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \nbroker_port\n:\n \n8883\n\n        \ntopic\n:\n \ntopic\n \n5\n\n        \nca_cert\n:\n \n/path/to/ca.cert\n\n        \ntls_insecure\n:\n \nTrue\n\n        \ncertfile\n:\n \n/path/to/client.crt\n\n        \nkeyfile\n:\n \n/path/to/client.key\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nMessage\n \nreceived\n \non\n \ntopic\n \n5\n\n\n\n\n\n\nNotes\n\n\nWhen you want to use the same broker within your multiple synapses in your brain, you must keep in mind that the configuration must be the same\nIt means that you cannot declare a synapse that use a broker ip with TLS activated, and another synapse that use the same broker ip but without TLS activated.\nWhen you declare a \"broker_ip\", a unique object is created once, then topic are added following all synapses\n\n\nOn the other hand, you can subscribe to multiple topic that use json or not within the same broker ip.\n\n\n-\n \nname\n:\n \nsynapse-mqtt-1\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \ntopic1\n\n        \nis_json\n:\n \nFalse\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nI\nm\n \nstarted\n \nwhen\n \nmessage\n \non\n \ntopic\n \n1\n\n\n\n-\n \nname\n:\n \nsynapse-mqtt-2\n\n  \nsignals\n:\n\n    \n-\n \nmqtt_subscriber\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \ntopic2\n\n        \nis_json\n:\n \nTrue\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nI\nm\n \nstarted\n \nwhen\n \nmessage\n \non\n \ntopic\n \n2\n\n\n\n\n\n\nTest with rabbitmq-server broker\n\n\nThis part can help you to configure your brain by sending message to a local broker\n\n\nInstall rabbitmq\n\n\nsudo apt-get install rabbitmq-server mosquitto-clients\n\n\n\n\n\nEnable mqtt plugin\n\n\nsudo rabbitmq-plugins enable rabbitmq_mqtt\nsudo systemctl restart rabbitmq-server\n\n\n\n\n\nActive web ui (optional)\n\n\nsudo rabbitmq-plugins \nenable\n rabbitmq_management\n\n\n\n\n\nGet the cli and make it available to use\n\n\nwget http://127.0.0.1:15672/cli/rabbitmqadmin\nsudo mv rabbitmqadmin /etc/rabbitmqadmin\nsudo chmod 755 /etc/rabbitmqadmin\n\n\n\n\n\nCreate admin account (when UI installed)\n\n\nsudo rabbitmqctl add_user admin p@ssw0rd\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \n.*\n \n.*\n \n.*\n\n\n\n\n\n\nPublish message from CLI\n\n\nPublish a plain text message\n\n\nmosquitto_pub -t \nmy_topic\n -m \nmessage\n\n\n\n\n\n\nTest publish a json message\n\n\nmosquitto_pub -t \nmy_topic\n -m \n{\ntest\n : \nmessage\n}\n\n\n\n\n\n\nAdd TLS to rabbitmq\n\n\nCreate root CA\n\n\nInstall openssl\n\n\napt-get install openssl\n\n\n\n\n\nCreate PKI structure\n\n\nmkdir testca\n\ncd\n testca\n\necho\n \n01\n \n serial\n\n\n\n\n\nCreate private key and CA certificate\n\n\nopenssl req -out ca.key -new -x509\n\n\n\n\n\nGenerate server/key pair\n\n\nopenssl genrsa -out server.key \n2048\n\nopenssl req -key server.key -new -out server.req\nopenssl x509 -req -in server.req -CA ca.crt -CAkey privkey.pem -CAserial serial -out server.crt\n\n\n\n\n\nCreate client certificate/key pair\n\n\nCreate private key\n\n\nopenssl genrsa -out client.key \n2048\n\n\n\n\n\n\nCreate a certificate request\n\n\nopenssl req -key client.key -new -out client.req\n\n\n\n\n\nSign the client request with the CA\n\n\nopenssl x509 -req -in client.req -CA ca.cert -CAkey privkey.pem -CAserial serial -out client.crt\n\n\n\n\n\nUpdate rabbitmq configuration\n\n\nEdit (or create if the file is not present) a config file \n/etc/rabbitmq/rabbitmq.config\n\n\n[\n  {rabbit, [\n     {ssl_listeners, [5671]},\n     {ssl_options, [{cacertfile,\n/path/to/ca.cert\n},\n                    {certfile,\n/path/to/server.crt\n},\n                    {keyfile,\n/path/to/server.key\n},\n                    {verify,verify_peer},\n                    {fail_if_no_peer_cert,false}]}\n   ]},\n  {rabbitmq_mqtt, [\n                  {ssl_listeners,    [8883]},\n                  {tcp_listeners,    [1883]}\n                ]}\n\n].\n\n\n\n\n\nRestart rabbitmq server to take care of changes\n\n\nsudo systemctl restart rabbitmq-server", 
            "title": "mqtt_subscriber"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#input-parameters", 
            "text": "parameter  required  default  choices  comment      broker_ip  YES    IP address of the MQTT broker server    topic  YES    topic name to subscribe    is_json  NO  FALSE  True, False  if true, all received message will be converted into a dict    broker_port  NO  1883   Port of the broker. By default 1883. 8883 when TLS is activated.    client_id  NO  kalliope   The client identifier is an identifier of each MQTT client and used by the broker server for identifying the client. Should be unique per broker    keepalive  NO  60   A time interval in seconds where the clients commits to by sending regular PING Request messages to the broker.    username  NO    username for authenticating the client    password  NO    password for authenticating the client    protocol  NO  MQTTv311  MQTTv31, MQTTv311  Can be either MQTTv31 or MQTTv311    ca_cert  NO    Path to the remote server CA certificate used for securing the transport    certfile  NO    Path to the client certificate file used for authentication    keyfile  NO    Path to the client key file attached to the client certificate    tls_insecure  NO  FALSE  True, False  Set the verification of the server hostname in the server certificate", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#values-sent-to-the-synapse", 
            "text": "Name  Description  Type  sample      mqtt_subscriber_message  message received from the broker  string/dict  \"on\", \"off\", {\"temperature\": \"25\", \"humidity\": \"30\"}", 
            "title": "Values sent to the synapse"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#synapses-example", 
            "text": "", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#topic-with-plain-text-message", 
            "text": "The topic send the status of a light. The received message would be \"on\" or off\"  -   name :   test-mqtt-1 \n   signals : \n     -   mqtt_subscriber : \n         broker_ip :   127.0.0.1 \n         topic :   topic1 \n   neurons : \n     -   say : \n         message : \n           -   The   light   is   now   {{   mqtt_subscriber_message   }}   Kalliope output example:  The light is now on", 
            "title": "Topic with plain text message"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#topic-with-json-message", 
            "text": "In this example, the topic send a json payload that contain multiple information. E.g:  {\"temperature\": \"25\", \"humidity\": \"30\"}  -   name :   test-mqtt-2 \n   signals : \n     -   mqtt_subscriber : \n         broker_ip :   127.0.0.1 \n         topic :   topic2 \n         is_json :   True \n   neurons : \n     -   say : \n         message : \n           -   The   temperature   is   now   {{   mqtt_subscriber_message[ temperature ]   }},   humidity   {{   mqtt_subscriber_message[ humidity ]   percents   }}   Kalliope output example:  The temperature is now 25 degrees, humidity 30%", 
            "title": "Topic with json message"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#the-broker-require-authentication", 
            "text": "Password authentication  -   name :   test-mqtt-3 \n   signals : \n     -   mqtt_subscriber : \n         broker_ip :   127.0.0.1 \n         topic :   topic   3 \n         username :   guest \n         password :   guest \n   neurons : \n     -   say : \n         message : \n           -   Message   received   on   topic   3   It's better to use TLS when using password authentication for securing the transport  -   name :   test-mqtt-4 \n   signals : \n     -   mqtt_subscriber : \n         broker_ip :   127.0.0.1 \n         broker_port :   8883 \n         topic :   topic   4 \n         username :   guest \n         password :   guest \n         ca_cert :   /path/to/ca.cert \n         tls_insecure :   True \n   neurons : \n     -   say : \n         message : \n           -   Message   received   on   topic   3   Authentication based on client certificate  -   name :   test-mqtt-5 \n   signals : \n     -   mqtt_subscriber : \n         broker_ip :   127.0.0.1 \n         broker_port :   8883 \n         topic :   topic   5 \n         ca_cert :   /path/to/ca.cert \n         tls_insecure :   True \n         certfile :   /path/to/client.crt \n         keyfile :   /path/to/client.key \n   neurons : \n     -   say : \n         message : \n           -   Message   received   on   topic   5", 
            "title": "The broker require authentication"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#notes", 
            "text": "When you want to use the same broker within your multiple synapses in your brain, you must keep in mind that the configuration must be the same\nIt means that you cannot declare a synapse that use a broker ip with TLS activated, and another synapse that use the same broker ip but without TLS activated.\nWhen you declare a \"broker_ip\", a unique object is created once, then topic are added following all synapses  On the other hand, you can subscribe to multiple topic that use json or not within the same broker ip.  -   name :   synapse-mqtt-1 \n   signals : \n     -   mqtt_subscriber : \n         broker_ip :   127.0.0.1 \n         topic :   topic1 \n         is_json :   False \n   neurons : \n     -   say : \n         message : \n           -   I m   started   when   message   on   topic   1  -   name :   synapse-mqtt-2 \n   signals : \n     -   mqtt_subscriber : \n         broker_ip :   127.0.0.1 \n         topic :   topic2 \n         is_json :   True \n   neurons : \n     -   say : \n         message : \n           -   I m   started   when   message   on   topic   2", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#test-with-rabbitmq-server-broker", 
            "text": "This part can help you to configure your brain by sending message to a local broker", 
            "title": "Test with rabbitmq-server broker"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#install-rabbitmq", 
            "text": "sudo apt-get install rabbitmq-server mosquitto-clients  Enable mqtt plugin  sudo rabbitmq-plugins enable rabbitmq_mqtt\nsudo systemctl restart rabbitmq-server  Active web ui (optional)  sudo rabbitmq-plugins  enable  rabbitmq_management  Get the cli and make it available to use  wget http://127.0.0.1:15672/cli/rabbitmqadmin\nsudo mv rabbitmqadmin /etc/rabbitmqadmin\nsudo chmod 755 /etc/rabbitmqadmin  Create admin account (when UI installed)  sudo rabbitmqctl add_user admin p@ssw0rd\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin  .*   .*   .*", 
            "title": "Install rabbitmq"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#publish-message-from-cli", 
            "text": "Publish a plain text message  mosquitto_pub -t  my_topic  -m  message   Test publish a json message  mosquitto_pub -t  my_topic  -m  { test  :  message }", 
            "title": "Publish message from CLI"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#add-tls-to-rabbitmq", 
            "text": "", 
            "title": "Add TLS to rabbitmq"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#create-root-ca", 
            "text": "Install openssl  apt-get install openssl  Create PKI structure  mkdir testca cd  testca echo   01    serial  Create private key and CA certificate  openssl req -out ca.key -new -x509  Generate server/key pair  openssl genrsa -out server.key  2048 \nopenssl req -key server.key -new -out server.req\nopenssl x509 -req -in server.req -CA ca.crt -CAkey privkey.pem -CAserial serial -out server.crt", 
            "title": "Create root CA"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#create-client-certificatekey-pair", 
            "text": "Create private key  openssl genrsa -out client.key  2048   Create a certificate request  openssl req -key client.key -new -out client.req  Sign the client request with the CA  openssl x509 -req -in client.req -CA ca.cert -CAkey privkey.pem -CAserial serial -out client.crt", 
            "title": "Create client certificate/key pair"
        }, 
        {
            "location": "/brain/signals/mqtt_subscriber/#update-rabbitmq-configuration", 
            "text": "Edit (or create if the file is not present) a config file  /etc/rabbitmq/rabbitmq.config  [\n  {rabbit, [\n     {ssl_listeners, [5671]},\n     {ssl_options, [{cacertfile, /path/to/ca.cert },\n                    {certfile, /path/to/server.crt },\n                    {keyfile, /path/to/server.key },\n                    {verify,verify_peer},\n                    {fail_if_no_peer_cert,false}]}\n   ]},\n  {rabbitmq_mqtt, [\n                  {ssl_listeners,    [8883]},\n                  {tcp_listeners,    [1883]}\n                ]}\n\n].  Restart rabbitmq server to take care of changes  sudo systemctl restart rabbitmq-server", 
            "title": "Update rabbitmq configuration"
        }, 
        {
            "location": "/brain/signals/order/", 
            "text": "An \norder\n signal is a word, or a sentence caught by the microphone and processed by the STT engine.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\norder\n\n\nYES\n\n\n\n\n\n\nThe order is passed directly without any parameters\n\n\n\n\n\n\n\n\nOther way to write an order, with parameters:\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nYES\n\n\n\n\n\n\nThe order to match\n\n\n\n\n\n\nmatching-type\n\n\nNO\n\n\nnormal\n\n\nnormal, strict, ordered-strict\n\n\nType of matching. See explanation bellow\n\n\n\n\n\n\nstt-correction\n\n\nNO\n\n\n\n\n\n\nList of words from the order to replace by other words\n\n\n\n\n\n\nstt-correction-file\n\n\nNO\n\n\n\n\n\n\nSame as stt-correction but load words from a YAML file\n\n\n\n\n\n\n\n\nMatching type\n\n\nYou are not limited by the exact sentence you put in your order. Kalliope uses the matching, it means that you can pronounce the sentence which contains your order (so, can be much longer) and it will launch an attached task anyway. In this example, the task attached to order \"say hello\" will be launched even if you say\n\n\n\n\n\"say hello Kalliope\"\n\n\n\"Kalliope, say hello\"\n\n\n\"I want you to say hello\"\n\n\n\"i say goodbye you say hello\"\n\n\n\"whatever I say as long it contains say hello\"\n\n\n\n\nYou must pay attention to define the orders as precise as possible. As Kalliope is based on matching, if you define your orders in different synapses too similiary, Kalliope risks to trigger more actions that you were expecting. For example, if you define two different synapses as shown below:\n\n\n-\n \nname\n:\n \nSay-hello\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nsay\n \nhello\n\n\n\n\n\n\nand\n\n\n-\n \nname\n:\n \nSay-something\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nsay\n\n\n\n\n\n\nWhen you will pronounce \"say hello\", it will trigger both synapses. To prevent this behavior, you can define a matching type for each order:\n\n\n\n\nnormal\n: Will match if all words are present in the spoken order.\n\n\nstrict\n: All word are present. No more word must be present in the spoken order.\n\n\nordered-strict\n: All word are present, no more word and all word are in the same order as defined in the signal.\n\n\n\n\nOrder with arguments\n\n\nYou can add one or more arguments to an order by adding bracket to the sentence.\n\n\nSyntax:\n\n\nsignals\n:\n\n    \n-\n \norder\n:\n \nsentence\n \n{{\n \narg_name\n \n}}\n\n    \n-\n \norder\n:\n \nsentence\n \n{{\n \narg_name\n \n}}\n \nsentence\n\n    \n-\n \norder\n:\n \nsentence\n \n{{\n \narg_name\n \n}}\n \nsentence\n \n{{\n \narg_name\n \n}}\n\n\n\n\n\n\nExample:\n\n\nsignals\n:\n\n    \n-\n \norder\n:\n \nI\n \nwant\n \nto\n \nlisten\n \n{{\n \nartist_name\n \n}}\n\n    \n-\n \norder\n:\n \nstart\n \nthe\n \n{{\n \nepisode_number\n \n}}\n \nepisode\n\n    \n-\n \norder\n:\n \ngive\n \nme\n \nthe\n \nweather\n \nat\n \n{{\n \nlocation\n \n}}\n \nfor\n \n{{\n \ndate\n \n}}\n\n\n\n\n\n\nHere, an example order would be speaking out loud the order: \"I want to listen Amy Winehouse\"\nIn this example, both word \"Amy\" and \"Winehouse\" will be passed as an unique argument called \nartist_name\n to the neuron.\n\n\nIf you want to send more than one argument, you must split your argument with a word that Kalliope will use to recognise the start and the end of each arguments.\nFor example:  \"give me the weather at {{ location }} for {{ date }}\"\nAnd the order would be: \"give me the weather at Paris for tomorrow\"\nAnd so, it will work too with: \"give me the weather at St-Pierre de Chartreuse for tomorrow\"\n\n\nSee the \ninput values\n section of the \nneuron documentation\n to know how to send arguments to a neuron.\n\n\n\n\nImportant note:\n The following syntax cannot be used: \"\n {{ arg_name }} {{ arg_name2 }}\" as Kalliope cannot know when a block starts and when it finishes.\n\n\n\n\nstt-correction\n\n\nThis option allow you to replace some words from the captured order by other word.\n\n\nSyntax:\n\n\nsignals\n:\n\n    \n-\n \norder\n:\n\n        \ntext\n:\n \nsentence\n\n        \nstt-correction\n:\n\n          \n-\n \ninput\n:\n \nwords\n \nto\n \nreplace\n\n            \noutput\n:\n \nreplacing\n \nwords\n\n\n\n\n\n\nE.g\n\n\n-\n \nname\n:\n \nstt-correction-test\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n\n          \ntext\n:\n \nthis\n \nis\n \nmy\n \norder\n\n          \nstt-correction\n:\n\n            \n-\n \ninput\n:\n \ntest\n\n              \noutput\n:\n \norder\n\n    \nneurons\n:\n\n      \n-\n \ndebug\n:\n\n          \nmessage\n:\n \nhello\n\n\n\n\n\n\nIn this example, if you pronounce \"this is my test\", the word test will be translated into \"order\" and so the signal \"stt-correction-test\" would b triggered.\n\n\nThis feature can be useful when working with numbers.\nFor example, you know that your STT engine return all number as string and you need them as integer for your neurons.\n\n\nE.g:\n\n\n-\n \nname\n:\n \nmm-say\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n\n          \ntext\n:\n \nthis\n \nis\n \nmy\n \nnumber\n \n{{\n \nnumber\n \n}}\n\n          \nstt-correction\n:\n\n            \n-\n \ninput\n:\n \none\n\n              \noutput\n:\n \n1\n\n    \nneurons\n:\n\n      \n-\n \ndebug\n:\n\n          \nmessage\n:\n \n{{\n \nnumber\n \n}}\n\n\n\n\n\n\nIn this example, if you say \"this is my number one\", Kalliope will translate the word \"one\" into \"1\".\n\n\nstt-correction-file\n\n\nThis option allow to set a list of corrections from a YAML file instead of writing them directly in the order.\n\n\nSyntax:\n\n\nsignals\n:\n\n    \n-\n \norder\n:\n\n        \ntext\n:\n \nsentence\n\n        \nstt-correction-file\n:\n \npath\n \nto\n \nyaml\n \nfile\n\n\n\n\n\n\nE.g\n\n\n-\n \nname\n:\n \nstt-correction-test\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n\n          \ntext\n:\n \nthis\n \nis\n \nmy\n \norder\n\n          \nstt-correction-file\n:\n \nmy_stt_correction_file.yml\n\n    \nneurons\n:\n\n      \n-\n \ndebug\n:\n\n          \nmessage\n:\n \nhello\n\n\n\n\n\n\nWhere \nmy_stt_correction_file.yaml\n would looks like the following:\n\n\n-\n \ninput\n:\n \ntest\n\n  \noutput\n:\n \norder\n\n\n\n\n\n\nUse both stt-correction and stt-correction-file\n\n\nYou can use both flag stt-correction and stt-correction-file in a synapse.\nThis can be useful to set a correction file used as global file, and override input with stt-correction.\n\n\nSyntax:\n\n\nsignals\n:\n\n  \n-\n \norder\n:\n\n      \ntext\n:\n \nsentence\n\n      \nstt-correction-file\n:\n \npath\n \nto\n \nyaml\n \nfile\n\n      \nstt-correction\n:\n\n        \n-\n \ninput\n:\n \nsentence\n\n          \noutput\n:\n \nreplacing\n \nsentence\n\n\n\n\n\n\nFor example, if you define a \nstt-correction-file\n with the content bellow:\n\n\n-\n \ninput\n:\n \nbla\n\n  \noutput\n:\n \nthis\n\n\n\n\n\n\nAnd a synapse like the following\n\n\n-\n \nname\n:\n \nstt-correction-test\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n\n        \ntext\n:\n \nthis\n \nis\n \nmy\n \norder\n\n        \nstt-correction-file\n:\n \ncorrection.yml\n\n        \nstt-correction\n:\n\n          \n-\n \ninput\n:\n \ntest\n\n            \noutput\n:\n \norder\n\n\n\n\n\n\nIf you pronounce \"bla is my test\", both \nstt-correction-file\n and \nstt-correction\n will be used to fix the pronounced order, resulting \"this is my order\".\n\n\n\n\nNote:\n \nstt-correction\n has precedence over \nstt-correction-file\n.\nIf an input is declared in \nstt-correction\n and in \nstt-correction-file\n, the output will be taken from the \nstt-correction\n option.\n\n\n\n\nControl from the Signal Neuron\n\n\nThis signal can be updated on the fly from the \nSignals neuron\n.\n\n\nSkip the trigger\n\n\n\n\nNotification ID:\n \"skip_trigger\"\n\n\nPayload dict\n:\n\n\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nYES\n\n\n\n\nTRUE, FALSE\n\n\nSet to True to skip the trigger\n\n\n\n\n\n\n\n\nSkip the trigger at the end of the synapse execution. Kalliope will listen for a new order directly without waiting for a trigger detection.\n\n\nThe default flow of Kalliope is the following\n\n\nMe: \nKalliope\n \u2192 hotword trigger \u2192 Me: \ndo this\n \u2192 synapse launched \u2192 hotword trigger \u2192 Me: \ndo that\n \u2192 synapse launched \u2192 \u2026\n\n\n\n\n\n\nWhen switching the skip_trigger to \nTrue\n, the Kalliope workflow will be the following one until you switch back the skip_trigger to \nFalse\n:\n\n\nMe: \nKalliope\n \u2192 hotword trigger \u2192 Me: \ndo this\n \u2192 synapse launched \u2192 Me: \ndo that\n \u2192 synapse launched \u2192 \u2026 \u2192 \nstop interactive trigger\n (eg: Thanks kalliope)\n\n\n\n\n\nExample synapses:\n\n\nStart skipping the trigger from a specific synapse\n\n\n-\n \nname\n:\n \nsay-hello\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nhello\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n \nhello\n \nsir\n\n    \n-\n \nsignals\n:\n\n          \nnotification\n:\n \nskip_trigger\n\n          \npayload\n:\n\n            \nstatus\n:\n \nTrue\n\n\n\n\n\n\nAs we are escaping the trigger process, we need a synapse to break the loop.\n\n\n-\n \nname\n:\n \nstop-skip-trigger\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthanks\n \nkalliope\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n \nat\n \nyour\n \nservice\n\n    \n-\n \nsignals\n:\n\n          \nnotification\n:\n \nskip_trigger\n\n          \npayload\n:\n\n            \nstatus\n:\n \nFalse\n\n\n\n\n\n\nYou can set it in a hook, so it will be activated  after the first capture of the hotword from the trigger process.\n\n\nIn this settings example, we will cal a synapse called \nstart-skip-trigger\n on each trigger detection:\n\n\nhooks\n:\n\n  \non_start\n:\n \non-start-synapse\n\n  \non_triggered\n:\n\n    \n-\n \non-triggered-synapse\n\n    \n-\n \nstart-skip-trigger\n\n\n\n\n\n\nThe synapse in the brain looks like the following, of course we need to keep a \nstop-skip-trigger\n to be able to stop the loop anytime\n\n\n-\n \nname\n:\n \nstart-skip-trigger\n\n  \nsignals\n:\n \n{}\n\n  \nneurons\n:\n\n    \n-\n \nsignals\n:\n\n        \nnotification\n:\n \nskip_trigger\n\n        \npayload\n:\n\n          \nstatus\n:\n \nTrue\n\n\n\n-\n \nname\n:\n \nstop-skip-trigger\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthanks\n \nkalliope\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n \nat\n \nyour\n \nservice\n\n    \n-\n \nsignals\n:\n\n        \nnotification\n:\n \nskip_trigger\n\n        \npayload\n:\n\n          \nstatus\n:\n \nFalse\n\n\n\n\n\n\nSynapses example\n\n\nNormal order\n\n\nSyntax:\n\n\nsignals\n:\n\n  \n-\n \norder\n:\n \nsentence\n\n\n\nsignals\n:\n\n  \n-\n \norder\n:\n\n      \ntext\n:\n \nsentence\n\n      \nmatching-type\n:\n \nnormal\n\n\n\n\n\n\nExample:\n\n\nsignals\n:\n\n  \n-\n \norder\n:\n \nplease\n \ndo\n \nthis\n \naction\n\n\n\nsignals\n:\n\n  \n-\n \norder\n:\n\n      \ntext\n:\n \nplease\n \ndo\n \nthis\n \naction\n\n      \nmatching-type\n:\n \nnormal\n\n\n\n\n\n\nIn this example, with a \nnormal\n matching type, the synapse would be triggered if the user say:\n- please do this action\n- please do this action with more word\n- action this do please\n- action this do please with more word\n\n\nStrict order\n\n\nSyntax:\n\n\nsignals\n:\n\n    \n-\n \norder\n:\n\n        \ntext\n:\n \nsentence\n\n        \nmatching-type\n:\n \nstrict\n\n\n\n\n\n\nExample:\n\n\nsignals\n:\n\n    \n-\n \norder\n:\n\n        \ntext\n:\n \nplease\n \ndo\n \nthis\n \naction\n\n        \nmatching-type\n:\n \nstrict\n\n\n\n\n\n\nIn this example, with a \nstrict\n matching type, the synapse would be triggered if the user say:\n- please do this action\n- action this do please\n\n\nOrdered strict order\n\n\nSyntax:\n\n\nsignals\n:\n\n    \n-\n \norder\n:\n\n        \ntext\n:\n \nsentence\n\n        \nmatching-type\n:\n \nordered-strict\n\n\n\n\n\n\nExample:\n\n\nsignals\n:\n\n    \n-\n \norder\n:\n\n        \ntext\n:\n \nplease\n \ndo\n \nthis\n \naction\n\n        \nmatching-type\n:\n \nordered-strict\n\n\n\n\n\n\nIn this example, with a \nstrict\n matching type, the synapse would be triggered if the user say:\n- please do this action\n\n\nNotes\n\n\n\n\nImportant note:\n SST engines can misunderstand what you say, or translate your sentence into text containing some spelling mistakes.\nFor example, if you say \"Kalliope please do this\", the SST engine can return \"caliope please do this\". So, to be sure that your speaking order will be correctly caught and executed, we recommend you to test your STT engine by using the \nKalliope GUI\n and check the returned text for the given order.\n\n\nImportant note:\n STT engines don't know the context. Sometime they will return an unexpected word.\nFor example, \"the operation to perform is 2 minus 2\" can return \"two\", \"too\", \"to\" or \"2\" in english.\n\n\nImportant note:\n Kalliope will try to match the order in each synapse of its brain. So, if an order of one synapse is included in another order of another synapse, then both synapses tasks will be started by Kalliope.\n\n\nFor example, you have \"test my umbrella\" in a synapse A and \"test\" in a synapse B. When you'll say \"test my umbrella\", both synapse A and B\nwill be started by Kalliope. So keep in mind that the best practice is to use really different sentences with more than one word for your order.", 
            "title": "order"
        }, 
        {
            "location": "/brain/signals/order/#input-parameters", 
            "text": "parameter  required  default  choices  comment      order  YES    The order is passed directly without any parameters     Other way to write an order, with parameters:     parameter  required  default  choices  comment      text  YES    The order to match    matching-type  NO  normal  normal, strict, ordered-strict  Type of matching. See explanation bellow    stt-correction  NO    List of words from the order to replace by other words    stt-correction-file  NO    Same as stt-correction but load words from a YAML file", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/signals/order/#matching-type", 
            "text": "You are not limited by the exact sentence you put in your order. Kalliope uses the matching, it means that you can pronounce the sentence which contains your order (so, can be much longer) and it will launch an attached task anyway. In this example, the task attached to order \"say hello\" will be launched even if you say   \"say hello Kalliope\"  \"Kalliope, say hello\"  \"I want you to say hello\"  \"i say goodbye you say hello\"  \"whatever I say as long it contains say hello\"   You must pay attention to define the orders as precise as possible. As Kalliope is based on matching, if you define your orders in different synapses too similiary, Kalliope risks to trigger more actions that you were expecting. For example, if you define two different synapses as shown below:  -   name :   Say-hello \n   signals : \n     -   order :   say   hello   and  -   name :   Say-something \n   signals : \n     -   order :   say   When you will pronounce \"say hello\", it will trigger both synapses. To prevent this behavior, you can define a matching type for each order:   normal : Will match if all words are present in the spoken order.  strict : All word are present. No more word must be present in the spoken order.  ordered-strict : All word are present, no more word and all word are in the same order as defined in the signal.", 
            "title": "Matching type"
        }, 
        {
            "location": "/brain/signals/order/#order-with-arguments", 
            "text": "You can add one or more arguments to an order by adding bracket to the sentence.  Syntax:  signals : \n     -   order :   sentence   {{   arg_name   }} \n     -   order :   sentence   {{   arg_name   }}   sentence \n     -   order :   sentence   {{   arg_name   }}   sentence   {{   arg_name   }}   Example:  signals : \n     -   order :   I   want   to   listen   {{   artist_name   }} \n     -   order :   start   the   {{   episode_number   }}   episode \n     -   order :   give   me   the   weather   at   {{   location   }}   for   {{   date   }}   Here, an example order would be speaking out loud the order: \"I want to listen Amy Winehouse\"\nIn this example, both word \"Amy\" and \"Winehouse\" will be passed as an unique argument called  artist_name  to the neuron.  If you want to send more than one argument, you must split your argument with a word that Kalliope will use to recognise the start and the end of each arguments.\nFor example:  \"give me the weather at {{ location }} for {{ date }}\"\nAnd the order would be: \"give me the weather at Paris for tomorrow\"\nAnd so, it will work too with: \"give me the weather at St-Pierre de Chartreuse for tomorrow\"  See the  input values  section of the  neuron documentation  to know how to send arguments to a neuron.   Important note:  The following syntax cannot be used: \"  {{ arg_name }} {{ arg_name2 }}\" as Kalliope cannot know when a block starts and when it finishes.", 
            "title": "Order with arguments"
        }, 
        {
            "location": "/brain/signals/order/#stt-correction", 
            "text": "This option allow you to replace some words from the captured order by other word.  Syntax:  signals : \n     -   order : \n         text :   sentence \n         stt-correction : \n           -   input :   words   to   replace \n             output :   replacing   words   E.g  -   name :   stt-correction-test \n     signals : \n       -   order : \n           text :   this   is   my   order \n           stt-correction : \n             -   input :   test \n               output :   order \n     neurons : \n       -   debug : \n           message :   hello   In this example, if you pronounce \"this is my test\", the word test will be translated into \"order\" and so the signal \"stt-correction-test\" would b triggered.  This feature can be useful when working with numbers.\nFor example, you know that your STT engine return all number as string and you need them as integer for your neurons.  E.g:  -   name :   mm-say \n     signals : \n       -   order : \n           text :   this   is   my   number   {{   number   }} \n           stt-correction : \n             -   input :   one \n               output :   1 \n     neurons : \n       -   debug : \n           message :   {{   number   }}   In this example, if you say \"this is my number one\", Kalliope will translate the word \"one\" into \"1\".", 
            "title": "stt-correction"
        }, 
        {
            "location": "/brain/signals/order/#stt-correction-file", 
            "text": "This option allow to set a list of corrections from a YAML file instead of writing them directly in the order.  Syntax:  signals : \n     -   order : \n         text :   sentence \n         stt-correction-file :   path   to   yaml   file   E.g  -   name :   stt-correction-test \n     signals : \n       -   order : \n           text :   this   is   my   order \n           stt-correction-file :   my_stt_correction_file.yml \n     neurons : \n       -   debug : \n           message :   hello   Where  my_stt_correction_file.yaml  would looks like the following:  -   input :   test \n   output :   order", 
            "title": "stt-correction-file"
        }, 
        {
            "location": "/brain/signals/order/#use-both-stt-correction-and-stt-correction-file", 
            "text": "You can use both flag stt-correction and stt-correction-file in a synapse.\nThis can be useful to set a correction file used as global file, and override input with stt-correction.  Syntax:  signals : \n   -   order : \n       text :   sentence \n       stt-correction-file :   path   to   yaml   file \n       stt-correction : \n         -   input :   sentence \n           output :   replacing   sentence   For example, if you define a  stt-correction-file  with the content bellow:  -   input :   bla \n   output :   this   And a synapse like the following  -   name :   stt-correction-test \n   signals : \n     -   order : \n         text :   this   is   my   order \n         stt-correction-file :   correction.yml \n         stt-correction : \n           -   input :   test \n             output :   order   If you pronounce \"bla is my test\", both  stt-correction-file  and  stt-correction  will be used to fix the pronounced order, resulting \"this is my order\".   Note:   stt-correction  has precedence over  stt-correction-file .\nIf an input is declared in  stt-correction  and in  stt-correction-file , the output will be taken from the  stt-correction  option.", 
            "title": "Use both stt-correction and stt-correction-file"
        }, 
        {
            "location": "/brain/signals/order/#control-from-the-signal-neuron", 
            "text": "This signal can be updated on the fly from the  Signals neuron .", 
            "title": "Control from the Signal Neuron"
        }, 
        {
            "location": "/brain/signals/order/#skip-the-trigger", 
            "text": "Notification ID:  \"skip_trigger\"  Payload dict :      parameter  required  default  choices  comment      status  YES   TRUE, FALSE  Set to True to skip the trigger     Skip the trigger at the end of the synapse execution. Kalliope will listen for a new order directly without waiting for a trigger detection.  The default flow of Kalliope is the following  Me:  Kalliope  \u2192 hotword trigger \u2192 Me:  do this  \u2192 synapse launched \u2192 hotword trigger \u2192 Me:  do that  \u2192 synapse launched \u2192 \u2026   When switching the skip_trigger to  True , the Kalliope workflow will be the following one until you switch back the skip_trigger to  False :  Me:  Kalliope  \u2192 hotword trigger \u2192 Me:  do this  \u2192 synapse launched \u2192 Me:  do that  \u2192 synapse launched \u2192 \u2026 \u2192  stop interactive trigger  (eg: Thanks kalliope)  Example synapses:  Start skipping the trigger from a specific synapse  -   name :   say-hello \n   signals : \n     -   order :   hello \n   neurons : \n     -   say : \n         message :   hello   sir \n     -   signals : \n           notification :   skip_trigger \n           payload : \n             status :   True   As we are escaping the trigger process, we need a synapse to break the loop.  -   name :   stop-skip-trigger \n   signals : \n     -   order :   thanks   kalliope \n   neurons : \n     -   say : \n         message :   at   your   service \n     -   signals : \n           notification :   skip_trigger \n           payload : \n             status :   False   You can set it in a hook, so it will be activated  after the first capture of the hotword from the trigger process.  In this settings example, we will cal a synapse called  start-skip-trigger  on each trigger detection:  hooks : \n   on_start :   on-start-synapse \n   on_triggered : \n     -   on-triggered-synapse \n     -   start-skip-trigger   The synapse in the brain looks like the following, of course we need to keep a  stop-skip-trigger  to be able to stop the loop anytime  -   name :   start-skip-trigger \n   signals :   {} \n   neurons : \n     -   signals : \n         notification :   skip_trigger \n         payload : \n           status :   True  -   name :   stop-skip-trigger \n   signals : \n     -   order :   thanks   kalliope \n   neurons : \n     -   say : \n         message :   at   your   service \n     -   signals : \n         notification :   skip_trigger \n         payload : \n           status :   False", 
            "title": "Skip the trigger"
        }, 
        {
            "location": "/brain/signals/order/#synapses-example", 
            "text": "", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/signals/order/#normal-order", 
            "text": "Syntax:  signals : \n   -   order :   sentence  signals : \n   -   order : \n       text :   sentence \n       matching-type :   normal   Example:  signals : \n   -   order :   please   do   this   action  signals : \n   -   order : \n       text :   please   do   this   action \n       matching-type :   normal   In this example, with a  normal  matching type, the synapse would be triggered if the user say:\n- please do this action\n- please do this action with more word\n- action this do please\n- action this do please with more word", 
            "title": "Normal order"
        }, 
        {
            "location": "/brain/signals/order/#strict-order", 
            "text": "Syntax:  signals : \n     -   order : \n         text :   sentence \n         matching-type :   strict   Example:  signals : \n     -   order : \n         text :   please   do   this   action \n         matching-type :   strict   In this example, with a  strict  matching type, the synapse would be triggered if the user say:\n- please do this action\n- action this do please", 
            "title": "Strict order"
        }, 
        {
            "location": "/brain/signals/order/#ordered-strict-order", 
            "text": "Syntax:  signals : \n     -   order : \n         text :   sentence \n         matching-type :   ordered-strict   Example:  signals : \n     -   order : \n         text :   please   do   this   action \n         matching-type :   ordered-strict   In this example, with a  strict  matching type, the synapse would be triggered if the user say:\n- please do this action", 
            "title": "Ordered strict order"
        }, 
        {
            "location": "/brain/signals/order/#notes", 
            "text": "Important note:  SST engines can misunderstand what you say, or translate your sentence into text containing some spelling mistakes.\nFor example, if you say \"Kalliope please do this\", the SST engine can return \"caliope please do this\". So, to be sure that your speaking order will be correctly caught and executed, we recommend you to test your STT engine by using the  Kalliope GUI  and check the returned text for the given order.  Important note:  STT engines don't know the context. Sometime they will return an unexpected word.\nFor example, \"the operation to perform is 2 minus 2\" can return \"two\", \"too\", \"to\" or \"2\" in english.  Important note:  Kalliope will try to match the order in each synapse of its brain. So, if an order of one synapse is included in another order of another synapse, then both synapses tasks will be started by Kalliope.  For example, you have \"test my umbrella\" in a synapse A and \"test\" in a synapse B. When you'll say \"test my umbrella\", both synapse A and B\nwill be started by Kalliope. So keep in mind that the best practice is to use really different sentences with more than one word for your order.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/ansible_playbook/", 
            "text": "Run an Ansible playbook. Ansible is a free-software platform for configuring and managing computers which combines multi-node software deployment, ad hoc task execution, and configuration management.\n\n\nPlaybooks are Ansible\u2019s configuration, deployment, and orchestration language. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process.\n\n\nThis neuron can be used to perform complex operation with all \nmodules available from Ansible\n.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\ntask_file\n\n\nYES\n\n\n\n\n\n\npath to the Playbook file that contains tasks\n\n\n\n\n\n\nsudo\n\n\nNO\n\n\nFALSE\n\n\nTrue\n\n\nFalse\n\n\n\n\n\n\nsudo_user\n\n\nNO\n\n\n\n\n\n\nThe target user with admin privileges. In most of case \"root\"\n\n\n\n\n\n\nsudo_password\n\n\nNO\n\n\n\n\n\n\nThe password of the sudo_user\n\n\n\n\n\n\n\n\nSynapses example\n\n\nPlaybook without admin privileges\n\n\nCall the playbook named playbook.yml\n\n\n  \n-\n \nname\n:\n \nAnsible-test\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nplaybook\n\n    \nneurons\n:\n\n      \n-\n \nansible_playbook\n:\n\n          \ntask_file\n:\n \nplaybook.yml\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nThe\n \ntask\n \nis\n \ndone\n\n\n\n\n\n\nContent of the playbook. This playbook will use the \nURI module\n to interact with a webservice on a remote server.\n\n\n-\n \nname\n:\n \nPlaybook\n\n  \nhosts\n:\n \nlocalhost\n\n  \ngather_facts\n:\n \nno\n\n  \nconnection\n:\n \nlocal\n\n\n  \ntasks\n:\n\n    \n-\n \nname\n:\n \nCall\n \napi\n\n      \nuri\n:\n\n          \nurl\n:\n \nhttp://192.168.0.17:8000/app\n\n          \nHEADER_Content-Type\n:\n \napplication/json\n\n          \nmethod\n:\n \nPOST\n\n          \nuser\n:\n \nadmin\n\n          \npassword\n:\n \nsecret\n\n          \nforce_basic_auth\n:\n \nyes\n\n          \nstatus_code\n:\n \n201\n\n          \nbody_format\n:\n \njson\n\n          \nbody\n:\n \n\n            \n{\napp_name\n: \nmusic\n, \nstate\n: \nstart\n}\n\n\n\n\n\n\nPlaybook with admin privileges\n\n\nIn some cases, a playbook requires sudo right to perform admin operations like installing a package.\nIn this case, you must give to the neuron the login and password of the user which has admin privileges.\n\n\n  \n-\n \nname\n:\n \nAnsible-root\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nplaybook\n\n    \nneurons\n:\n\n      \n-\n \nansible_playbook\n:\n\n          \ntask_file\n:\n \nplaybook-root.yml\n\n          \nsudo\n:\n \ntrue\n\n          \nsudo_user\n:\n \nroot\n\n          \nsudo_password\n:\n \nsecret\n\n\n\n\n\n\nAnd the playbook would be. Notice that we use \nbecome: True\n\n\n-\n \nhosts\n:\n \nlocalhost\n\n  \ngather_facts\n:\n \nno\n\n  \nconnection\n:\n \nlocal\n\n  \nbecome\n:\n \nTrue\n\n\n  \ntasks\n:\n\n    \n-\n \nname\n:\n \nInstall\n \na\n \nuseful\n \ntrain\n \npackage\n\n      \napt\n:\n\n        \nname\n:\n \nsl\n\n        \nstate\n:\n \npresent\n\n\n\n\n\n\nNote\n\n\nAnsible contains a lot of modules that can be useful for Kalliope\n\n\n\n\nNotification\n: can be used to send a message to Pushbullet, IRC channel, Rocket Chat and a lot of other notification services\n\n\nFiles\n: can be used to perform a backup or synchronize two file path\n\n\nWindows\n: Can be used to control a Windows Desktop\n\n\n\n\nShell neuron or script neuron can perform same actions. Ansible is just a way to simplify some execution or enjoy some \nalready made plugin\n.", 
            "title": "ansible_playbook"
        }, 
        {
            "location": "/brain/neurons/ansible_playbook/#input-parameters", 
            "text": "parameter  required  default  choices  comment      task_file  YES    path to the Playbook file that contains tasks    sudo  NO  FALSE  True  False    sudo_user  NO    The target user with admin privileges. In most of case \"root\"    sudo_password  NO    The password of the sudo_user", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/ansible_playbook/#synapses-example", 
            "text": "", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/ansible_playbook/#playbook-without-admin-privileges", 
            "text": "Call the playbook named playbook.yml     -   name :   Ansible-test \n     signals : \n       -   order :   playbook \n     neurons : \n       -   ansible_playbook : \n           task_file :   playbook.yml \n       -   say : \n           message :   The   task   is   done   Content of the playbook. This playbook will use the  URI module  to interact with a webservice on a remote server.  -   name :   Playbook \n   hosts :   localhost \n   gather_facts :   no \n   connection :   local \n\n   tasks : \n     -   name :   Call   api \n       uri : \n           url :   http://192.168.0.17:8000/app \n           HEADER_Content-Type :   application/json \n           method :   POST \n           user :   admin \n           password :   secret \n           force_basic_auth :   yes \n           status_code :   201 \n           body_format :   json \n           body :   \n             { app_name :  music ,  state :  start }", 
            "title": "Playbook without admin privileges"
        }, 
        {
            "location": "/brain/neurons/ansible_playbook/#playbook-with-admin-privileges", 
            "text": "In some cases, a playbook requires sudo right to perform admin operations like installing a package.\nIn this case, you must give to the neuron the login and password of the user which has admin privileges.     -   name :   Ansible-root \n     signals : \n       -   order :   playbook \n     neurons : \n       -   ansible_playbook : \n           task_file :   playbook-root.yml \n           sudo :   true \n           sudo_user :   root \n           sudo_password :   secret   And the playbook would be. Notice that we use  become: True  -   hosts :   localhost \n   gather_facts :   no \n   connection :   local \n   become :   True \n\n   tasks : \n     -   name :   Install   a   useful   train   package \n       apt : \n         name :   sl \n         state :   present", 
            "title": "Playbook with admin privileges"
        }, 
        {
            "location": "/brain/neurons/ansible_playbook/#note", 
            "text": "Ansible contains a lot of modules that can be useful for Kalliope   Notification : can be used to send a message to Pushbullet, IRC channel, Rocket Chat and a lot of other notification services  Files : can be used to perform a backup or synchronize two file path  Windows : Can be used to control a Windows Desktop   Shell neuron or script neuron can perform same actions. Ansible is just a way to simplify some execution or enjoy some  already made plugin .", 
            "title": "Note"
        }, 
        {
            "location": "/brain/neurons/brain/", 
            "text": "Update your brain from a neuron\n\n\nCurrent actions available:\n- enable / disable a synapse from the brain\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ntype\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nsynapse_name\n\n\nYES\n\n\nstring\n\n\n\n\n\n\nThe name of the synapse to update\n\n\n\n\n\n\nenabled\n\n\nYES\n\n\nboolean\n\n\n\n\nTrue, False\n\n\nif True, the synapse is enabled.\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nsample\n\n\n\n\n\n\n\n\n\n\nsynapse_name\n\n\nThe updated synapse name\n\n\nstring\n\n\nto-deactivate\n\n\n\n\n\n\nstatus\n\n\nNew status of the synapse\n\n\nboolean\n\n\nenabled, disabled, unknown\n\n\n\n\n\n\n\n\nSynapses example\n\n\n-\n \nname\n:\n \nto-deactivate\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nwho\n \nare\n \nyou\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n \nI\nm\n \nKalliope\n\n\n\n-\n \nname\n:\n \ndeactivate\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \ndeactivate\n \na\n \nsynapse\n\n  \nneurons\n:\n\n    \n-\n \nbrain\n:\n\n        \nsynapse_name\n:\n \nto-deactivate\n\n        \nenabled\n:\n \nFalse\n\n\n\n-\n \nname\n:\n \nactivate\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nactive\n \nback\n \nthe\n \nsynapse\n\n  \nneurons\n:\n\n    \n-\n \nbrain\n:\n\n        \nsynapse_name\n:\n \nto-deactivate\n\n        \nenabled\n:\n \nTrue\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n Changes made to the brain from this neuron are not persistent. The brain will be loaded again following the yaml file at the next start of Kalliope.", 
            "title": "brain"
        }, 
        {
            "location": "/brain/neurons/brain/#input-parameters", 
            "text": "parameter  required  type  default  choices  comment      synapse_name  YES  string    The name of the synapse to update    enabled  YES  boolean   True, False  if True, the synapse is enabled.", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/brain/#returned-values", 
            "text": "Name  Description  Type  sample      synapse_name  The updated synapse name  string  to-deactivate    status  New status of the synapse  boolean  enabled, disabled, unknown", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/brain/#synapses-example", 
            "text": "-   name :   to-deactivate \n   signals : \n     -   order :   who   are   you \n   neurons : \n     -   say : \n         message :   I m   Kalliope  -   name :   deactivate \n   signals : \n     -   order :   deactivate   a   synapse \n   neurons : \n     -   brain : \n         synapse_name :   to-deactivate \n         enabled :   False  -   name :   activate \n   signals : \n     -   order :   active   back   the   synapse \n   neurons : \n     -   brain : \n         synapse_name :   to-deactivate \n         enabled :   True", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/brain/#notes", 
            "text": "Note:  Changes made to the brain from this neuron are not persistent. The brain will be loaded again following the yaml file at the next start of Kalliope.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/debug/", 
            "text": "Print a message in the console. This neuron can be used to check your \ncaptured variable from an order\n or check the content of variable placed\nin \nKalliope memory\n.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nYES\n\n\n\n\n\n\nMessage to print in the console output\n\n\n\n\n\n\n\n\nReturned values\n\n\nNo returned values\n\n\nSynapses example\n\n\nSimple example :\n\n\n-\n \nname\n:\n \ndebug\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nprint\n \na\n \ndebug\n\n  \nneurons\n:\n\n    \n-\n \ndebug\n:\n\n        \nmessage\n:\n \nthis\n \nis\n \na\n \ndebug\n \nline\n\n\n\n\n\n\nOutput example:\n\n\n[Debug neuron, 2017-12-17 17:30:53] this is a debug line\n\n\n\n\n\nShow the content of captured variables from the spoken order\n\n\n-\n \nname\n:\n \ndebug\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \ntell\n \nme\n \nwhat\n \nI\n \nsay\n \n{{\n \nhere\n \n}}\n\n  \nneurons\n:\n\n    \n-\n \ndebug\n:\n\n        \nmessage\n:\n \n{{\n \nhere\n \n}}\n\n\n\n\n\n\nShow the content of a variable placed in Kalliope memory\n\n\n-\n \nname\n:\n \ndebug\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nwhat\n \ntime\n \nis\n \nit?\n\n  \nneurons\n:\n\n    \n-\n \nsystemdate\n:\n\n        \nsay_template\n:\n\n          \n-\n \nIt\n \n{{\n \nhours\n \n}}\n \nhours\n \nand\n \n{{\n \nminutes\n \n}}\n \nminutes\n\n        \nkalliope_memory\n:\n\n          \nhours_when_asked\n:\n \n{{\n \nhours\n \n}}\n\n          \nminutes_when_asked\n:\n \n{{\n \nminutes\n \n}}\n\n    \n-\n \ndebug\n:\n\n        \nmessage\n:\n \nhours:\n \n{{\n \nkalliope_memory[\nhours_when_asked\n]}},\n \nminutes:\n \n{{\n \nkalliope_memory[\nminutes_when_asked\n]}}", 
            "title": "debug"
        }, 
        {
            "location": "/brain/neurons/debug/#input-parameters", 
            "text": "parameter  required  default  choices  comment      message  YES    Message to print in the console output", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/debug/#returned-values", 
            "text": "No returned values", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/debug/#synapses-example", 
            "text": "Simple example :  -   name :   debug \n   signals : \n     -   order :   print   a   debug \n   neurons : \n     -   debug : \n         message :   this   is   a   debug   line   Output example:  [Debug neuron, 2017-12-17 17:30:53] this is a debug line  Show the content of captured variables from the spoken order  -   name :   debug \n   signals : \n     -   order :   tell   me   what   I   say   {{   here   }} \n   neurons : \n     -   debug : \n         message :   {{   here   }}   Show the content of a variable placed in Kalliope memory  -   name :   debug \n   signals : \n     -   order :   what   time   is   it? \n   neurons : \n     -   systemdate : \n         say_template : \n           -   It   {{   hours   }}   hours   and   {{   minutes   }}   minutes \n         kalliope_memory : \n           hours_when_asked :   {{   hours   }} \n           minutes_when_asked :   {{   minutes   }} \n     -   debug : \n         message :   hours:   {{   kalliope_memory[ hours_when_asked ]}},   minutes:   {{   kalliope_memory[ minutes_when_asked ]}}", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/kill_switch/", 
            "text": "This neuron exits the Kalliope process.\n\n\nInput parameters\n\n\nNo parameters\n\n\nReturned values\n\n\nNo returned values\n\n\nSynapses example\n\n\nSimple example :\n\n\n  \n-\n \nname\n:\n \nstop-kalliope\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ngoodbye\n\n    \nneurons\n:\n\n      \n-\n \nkill_switch", 
            "title": "kill_switch"
        }, 
        {
            "location": "/brain/neurons/kill_switch/#input-parameters", 
            "text": "No parameters", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/kill_switch/#returned-values", 
            "text": "No returned values", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/kill_switch/#synapses-example", 
            "text": "Simple example :     -   name :   stop-kalliope \n     signals : \n       -   order :   goodbye \n     neurons : \n       -   kill_switch", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/mqtt_publisher/", 
            "text": "Publish a message to a MQTT broker server\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ntype\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nbroker_ip\n\n\nYES\n\n\nstring\n\n\n\n\n\n\nIP address of the MQTT broker server\n\n\n\n\n\n\nport\n\n\nNO\n\n\nint\n\n\n1883\n\n\n\n\nPort of the broker. By default 1883. 8883 when TLS is activated.\n\n\n\n\n\n\ntopic\n\n\nYES\n\n\nstring\n\n\n\n\n\n\nTopic name where the message will be published\n\n\n\n\n\n\npayload\n\n\nYES\n\n\nstring\n\n\n\n\n\n\nMessage to publish on the topic\n\n\n\n\n\n\nqos\n\n\nNO\n\n\nint\n\n\n0\n\n\n0 or 1 or 2\n\n\nThe quality of service level to use\n\n\n\n\n\n\nretain\n\n\nNO\n\n\nBoolean\n\n\nFALSE\n\n\nTrue, False\n\n\nif set to True, the message will be set as the \u201clast known good\u201d/retained message for the topic.\n\n\n\n\n\n\nclient_id\n\n\nNO\n\n\nstring\n\n\nkalliope\n\n\n\n\nThe MQTT client id to use. If not set, the name will be set to \"kalliope\"\n\n\n\n\n\n\nkeepalive\n\n\nNO\n\n\nint\n\n\n60\n\n\n\n\nThe keepalive timeout value for the client\n\n\n\n\n\n\nusername\n\n\nNO\n\n\nstring\n\n\n\n\n\n\nusername for authenticating the client\n\n\n\n\n\n\npassword\n\n\nNO\n\n\nstring\n\n\n\n\n\n\npassword for authenticating the client\n\n\n\n\n\n\nca_cert\n\n\nNO\n\n\nstring\n\n\n\n\n\n\nPath to the remote server CA certificate used for securing the transport\n\n\n\n\n\n\ncertfile\n\n\nNO\n\n\nstring\n\n\n\n\n\n\nPath to the client certificate file used for authentication\n\n\n\n\n\n\nkeyfile\n\n\nNO\n\n\nstring\n\n\n\n\n\n\nPath to the client key file attached to the client certificate\n\n\n\n\n\n\nprotocol\n\n\nNO\n\n\nstring\n\n\nMQTTv311\n\n\nMQTTv31 or MQTTv311\n\n\nCan be either MQTTv31 or MQTTv311\n\n\n\n\n\n\ntls_insecure\n\n\nNO\n\n\nstring\n\n\nFALSE\n\n\n\n\nSet the verification of the server hostname in the server certificate\n\n\n\n\n\n\n\n\nReturned values\n\n\nNo returned values\n\n\nSynapses example\n\n\nPublish a message to the topic \"my/topic\" with minimal configuration\n\n\n-\n \nname\n:\n \nmqtt-publisher-1\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthis\n \nis\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nmqtt_publisher\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \nmy/topic\n\n        \npayload\n:\n \nmy\n \nmessage\n\n\n\n\n\n\nPublish a json formatted message. Note that anti-slashes must be escaped.\n\n\n-\n \nname\n:\n \nmqtt-publisher-2\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthis\n \nis\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nmqtt_publisher\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \nmytopic\n\n        \npayload\n:\n \n{\\\nmykey\\\n:\n \n\\\nmyvalue\\\n}\n\n\n\n\n\n\nThe broker require authentication\n\n\n-\n \nname\n:\n \nmqtt-publisher-3\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthis\n \nis\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nmqtt_publisher\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \nmy/topic\n\n        \npayload\n:\n \nmy\n \nmessage\n\n        \nusername\n:\n \nguest\n\n        \npassword\n:\n \nguest\n\n\n\n\n\n\nThe broker require a secure TLS connection\n\n\n-\n \nname\n:\n \nmqtt-publisher-4\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthis\n \nis\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nmqtt_publisher\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \nmy/topic\n\n        \npayload\n:\n \nmy\n \nmessage\n\n        \nca_cert\n:\n \n/path/to/ca.cert\n\n\n\n\n\n\nThe broker require a secure TLS connection and authentication based on client certificate\n\n\n-\n \nname\n:\n \nmqtt-publisher-5\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthis\n \nis\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nmqtt_publisher\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \nmy/topic\n\n        \npayload\n:\n \nmy\n \nmessage\n\n        \nca_cert\n:\n \n/path/to/ca.cert\n\n        \ncertfile\n:\n \npath/to/client.crt\n\n        \nkeyfile\n:\n \npath/to/client.key\n\n\n\n\n\n\nThe broker require a secure TLS connection, an authentication based on client certificate and the CA is a self signed certificate\n\n\n-\n \nname\n:\n \nmqtt-publisher-6\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthis\n \nis\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nmqtt_publisher\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \nmy/topic\n\n        \npayload\n:\n \nmy\n \nmessage\n\n        \nca_cert\n:\n \n/path/to/ca.cert\n\n        \ncertfile\n:\n \npath/to/client.crt\n\n        \nkeyfile\n:\n \npath/to/client.key\n\n        \ntls_insecure\n:\n \nTrue\n\n\n\n\n\n\nTest with CLI\n\n\nThe following part of the documentation can help you to configure your synapse with right options.\nFrom here we suppose that you have already a running broker server on your local machine. If it's not the case, please refer to the documentation of the \nsignal mqtt_subscriber\n to install a testing broker server.\n\n\nInstall a CLI mqtt client\n\n\nsudo apt-get install mosquitto-clients\n\n\n\n\n\nRun a subscriber\n\n\nmosquitto_sub -t \nthis/is/a/topic\n\n\n\n\n\n\nThen use your neuron. E.g\n\n\n-\n \nname\n:\n \ntest-mqtt-publisher\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nthis\n \nis\n \nmy\n \norder\n\n  \nneurons\n:\n\n    \n-\n \nmqtt_publisher\n:\n\n        \nbroker_ip\n:\n \n127.0.0.1\n\n        \ntopic\n:\n \nthis/is/a/topic\n\n        \npayload\n:\n \ninfo", 
            "title": "mqtt_publisher"
        }, 
        {
            "location": "/brain/neurons/mqtt_publisher/#input-parameters", 
            "text": "parameter  required  type  default  choices  comment      broker_ip  YES  string    IP address of the MQTT broker server    port  NO  int  1883   Port of the broker. By default 1883. 8883 when TLS is activated.    topic  YES  string    Topic name where the message will be published    payload  YES  string    Message to publish on the topic    qos  NO  int  0  0 or 1 or 2  The quality of service level to use    retain  NO  Boolean  FALSE  True, False  if set to True, the message will be set as the \u201clast known good\u201d/retained message for the topic.    client_id  NO  string  kalliope   The MQTT client id to use. If not set, the name will be set to \"kalliope\"    keepalive  NO  int  60   The keepalive timeout value for the client    username  NO  string    username for authenticating the client    password  NO  string    password for authenticating the client    ca_cert  NO  string    Path to the remote server CA certificate used for securing the transport    certfile  NO  string    Path to the client certificate file used for authentication    keyfile  NO  string    Path to the client key file attached to the client certificate    protocol  NO  string  MQTTv311  MQTTv31 or MQTTv311  Can be either MQTTv31 or MQTTv311    tls_insecure  NO  string  FALSE   Set the verification of the server hostname in the server certificate", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/mqtt_publisher/#returned-values", 
            "text": "No returned values", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/mqtt_publisher/#synapses-example", 
            "text": "Publish a message to the topic \"my/topic\" with minimal configuration  -   name :   mqtt-publisher-1 \n   signals : \n     -   order :   this   is   my   order \n   neurons : \n     -   mqtt_publisher : \n         broker_ip :   127.0.0.1 \n         topic :   my/topic \n         payload :   my   message   Publish a json formatted message. Note that anti-slashes must be escaped.  -   name :   mqtt-publisher-2 \n   signals : \n     -   order :   this   is   my   order \n   neurons : \n     -   mqtt_publisher : \n         broker_ip :   127.0.0.1 \n         topic :   mytopic \n         payload :   {\\ mykey\\ :   \\ myvalue\\ }   The broker require authentication  -   name :   mqtt-publisher-3 \n   signals : \n     -   order :   this   is   my   order \n   neurons : \n     -   mqtt_publisher : \n         broker_ip :   127.0.0.1 \n         topic :   my/topic \n         payload :   my   message \n         username :   guest \n         password :   guest   The broker require a secure TLS connection  -   name :   mqtt-publisher-4 \n   signals : \n     -   order :   this   is   my   order \n   neurons : \n     -   mqtt_publisher : \n         broker_ip :   127.0.0.1 \n         topic :   my/topic \n         payload :   my   message \n         ca_cert :   /path/to/ca.cert   The broker require a secure TLS connection and authentication based on client certificate  -   name :   mqtt-publisher-5 \n   signals : \n     -   order :   this   is   my   order \n   neurons : \n     -   mqtt_publisher : \n         broker_ip :   127.0.0.1 \n         topic :   my/topic \n         payload :   my   message \n         ca_cert :   /path/to/ca.cert \n         certfile :   path/to/client.crt \n         keyfile :   path/to/client.key   The broker require a secure TLS connection, an authentication based on client certificate and the CA is a self signed certificate  -   name :   mqtt-publisher-6 \n   signals : \n     -   order :   this   is   my   order \n   neurons : \n     -   mqtt_publisher : \n         broker_ip :   127.0.0.1 \n         topic :   my/topic \n         payload :   my   message \n         ca_cert :   /path/to/ca.cert \n         certfile :   path/to/client.crt \n         keyfile :   path/to/client.key \n         tls_insecure :   True", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/mqtt_publisher/#test-with-cli", 
            "text": "The following part of the documentation can help you to configure your synapse with right options.\nFrom here we suppose that you have already a running broker server on your local machine. If it's not the case, please refer to the documentation of the  signal mqtt_subscriber  to install a testing broker server.  Install a CLI mqtt client  sudo apt-get install mosquitto-clients  Run a subscriber  mosquitto_sub -t  this/is/a/topic   Then use your neuron. E.g  -   name :   test-mqtt-publisher \n   signals : \n     -   order :   this   is   my   order \n   neurons : \n     -   mqtt_publisher : \n         broker_ip :   127.0.0.1 \n         topic :   this/is/a/topic \n         payload :   info", 
            "title": "Test with CLI"
        }, 
        {
            "location": "/brain/neurons/neurotimer/", 
            "text": "Run a synapse after a delay.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ntype\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nNO\n\n\nint\n\n\nvalue \n 0\n\n\nNumber of second to wait before running the synapse\n\n\n\n\n\n\nminutes\n\n\nNO\n\n\nint\n\n\nvalue \n 0\n\n\nNumber of minutes to wait before running the synapse\n\n\n\n\n\n\nhours\n\n\nNO\n\n\nint\n\n\nvalue \n 0\n\n\nNumber of hours to wait before running the synapse\n\n\n\n\n\n\nsynapse\n\n\nYES\n\n\nstring\n\n\n\n\nName of the synapse to run after the selected delay\n\n\n\n\n\n\nforwarded_parameters\n\n\nNO\n\n\ndict\n\n\n\n\ndict of parameters that will be passed to the called synapse\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nSynapses example\n\n\nScenario:\n You are used to make a tea and want to know when it's time to remove the bag.\n\n\n\n\nYou:\n remember me to remove the bag of my tea\n\n\nKalliope:\n Alright\n\n3 minutes later..\n\n\nKalliope:\n your tea is ready\n\n\n\n\n-\n \nname\n:\n \ntea-bag\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nremember\n \nme\n \nto\n \nremove\n \nthe\n \nbag\n \nof\n \nmy\n \ntea\n\n  \nneurons\n:\n\n    \n-\n \nneurotimer\n:\n\n        \nminutes\n:\n \n3\n\n        \nsynapse\n:\n \ntime-over\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nAlright\n\n\n\n-\n \nname\n:\n \ntime-over\n\n  \nsignals\n:\n\n     \n-\n \norder\n:\n \nno-order-for-this-synapse\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nyour\n \ntea\n \nis\n \nready\n\n\n\n\n\n\nScenario:\n You are starting to cook something\n\n\n\n\nYou:\n notify me in 10 minutes\n\n\nKalliope:\n I'll notify you in 10 minutes\n\n10 minutes later..\n\n\nKalliope:\n You asked me to notify you\n\n\n\n\nIf your STT engine return integer when capturing a spoken order, you can set the time on the fly.\n\n\n-\n \nname\n:\n \ntimer2\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nnotify\n \nme\n \nin\n \n{{\n \ntime\n \n}}\n \nminutes\n\n    \nneurons\n:\n\n      \n-\n \nneurotimer\n:\n\n          \nminutes\n:\n \n{{\n \ntime\n \n}}\n\n          \nsynapse\n:\n \nnotify\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nI\nll\n \nnotify\n \nyou\n \nin\n \n{{\n \ntime\n \n}}\n \nminutes\n\n\n\n-\n \nname\n:\n \nnotify\n\n  \nsignals\n:\n\n     \n-\n \norder\n:\n \nno-order-for-this-synapse\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nYou\n \nasked\n \nme\n \nto\n \nnotify\n \nyou\n\n\n\n\n\n\nScenario:\n You want to remember to do something\n\n\n\n\nYou:\n remind me to call mom in 15 minutes\n\n\nKalliope:\n I'll notify you in 15 minutes\n\n15 minutes later..\n\n\nKalliope:\n You asked me to remind you to call mom 15 minutes ago\n\n\n\n\nPassing argument to the called synapse with the \nforwarded_parameters\n.\n\n\n-\n \nname\n:\n \nremember-synapse\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nremind\n \nme\n \nto\n \n{{\n \nremember\n \n}}\n \nin\n \n{{\n \ntime\n \n}}\n \nminutes\n\n  \nneurons\n:\n\n    \n-\n \nneurotimer\n:\n\n        \nseconds\n:\n \n{{\n \ntime\n \n}}\n\n        \nsynapse\n:\n \nremember-todo\n\n        \nforwarded_parameters\n:\n\n          \nremember\n:\n \n{{\n \nremember\n \n}}\n\n          \nseconds\n:\n \n{{\n \ntime\n \n}}\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nI\nll\n \nremind\n \nyou\n \nin\n \n{{\n \ntime\n \n}}\n \nminutes\n\n\n\n-\n \nname\n:\n \nremember-todo\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nno-order-for-this-synapse\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nYou\n \nasked\n \nme\n \nto\n \nremind\n \nyou\n \nto\n \n{{\n \nremember\n \n}}\n \n{{\n \ntime\n \n}}\n \nminutes\n \nago\n\n\n\n\n\n\n\n\nNote:\n You can still use the \nkalliope_memory\n instead of \nforwarded_parameters\n but your value will be overridden if you call the same synapse a multiple time.\n\n\n\n\nNotes\n\n\n\n\nNote:\n When used from the API, returned value from the launched synapse are lost\n\n\nNote:\n Not all STT engine return integer.\n\n\nNote:\n You must set at least one timer parameter (seconds or minutes or hours). You can also set them all.", 
            "title": "neurotimer"
        }, 
        {
            "location": "/brain/neurons/neurotimer/#input-parameters", 
            "text": "parameter  required  type  choices  comment      seconds  NO  int  value   0  Number of second to wait before running the synapse    minutes  NO  int  value   0  Number of minutes to wait before running the synapse    hours  NO  int  value   0  Number of hours to wait before running the synapse    synapse  YES  string   Name of the synapse to run after the selected delay    forwarded_parameters  NO  dict   dict of parameters that will be passed to the called synapse", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/neurotimer/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/neurotimer/#synapses-example", 
            "text": "Scenario:  You are used to make a tea and want to know when it's time to remove the bag.   You:  remember me to remove the bag of my tea  Kalliope:  Alright \n3 minutes later..  Kalliope:  your tea is ready   -   name :   tea-bag \n   signals : \n     -   order :   remember   me   to   remove   the   bag   of   my   tea \n   neurons : \n     -   neurotimer : \n         minutes :   3 \n         synapse :   time-over \n     -   say : \n         message : \n           -   Alright  -   name :   time-over \n   signals : \n      -   order :   no-order-for-this-synapse \n   neurons : \n     -   say : \n         message : \n           -   your   tea   is   ready   Scenario:  You are starting to cook something   You:  notify me in 10 minutes  Kalliope:  I'll notify you in 10 minutes \n10 minutes later..  Kalliope:  You asked me to notify you   If your STT engine return integer when capturing a spoken order, you can set the time on the fly.  -   name :   timer2 \n     signals : \n       -   order :   notify   me   in   {{   time   }}   minutes \n     neurons : \n       -   neurotimer : \n           minutes :   {{   time   }} \n           synapse :   notify \n       -   say : \n           message : \n             -   I ll   notify   you   in   {{   time   }}   minutes  -   name :   notify \n   signals : \n      -   order :   no-order-for-this-synapse \n   neurons : \n     -   say : \n         message : \n           -   You   asked   me   to   notify   you   Scenario:  You want to remember to do something   You:  remind me to call mom in 15 minutes  Kalliope:  I'll notify you in 15 minutes \n15 minutes later..  Kalliope:  You asked me to remind you to call mom 15 minutes ago   Passing argument to the called synapse with the  forwarded_parameters .  -   name :   remember-synapse \n   signals : \n     -   order :   remind   me   to   {{   remember   }}   in   {{   time   }}   minutes \n   neurons : \n     -   neurotimer : \n         seconds :   {{   time   }} \n         synapse :   remember-todo \n         forwarded_parameters : \n           remember :   {{   remember   }} \n           seconds :   {{   time   }} \n     -   say : \n         message : \n           -   I ll   remind   you   in   {{   time   }}   minutes  -   name :   remember-todo \n   signals : \n     -   order :   no-order-for-this-synapse \n   neurons : \n     -   say : \n         message : \n           -   You   asked   me   to   remind   you   to   {{   remember   }}   {{   time   }}   minutes   ago    Note:  You can still use the  kalliope_memory  instead of  forwarded_parameters  but your value will be overridden if you call the same synapse a multiple time.", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/neurotimer/#notes", 
            "text": "Note:  When used from the API, returned value from the launched synapse are lost  Note:  Not all STT engine return integer.  Note:  You must set at least one timer parameter (seconds or minutes or hours). You can also set them all.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/neurotransmitter/", 
            "text": "Link synapses together. Call a synapse directly or depending on the captured speech from the user.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nfrom_answer_link\n\n\nNO\n\n\n\n\n\n\nLink a synapse depending on the answer of the user. Contain a list of tuple synapse/answer object\n\n\n\n\n\n\ndirect_link\n\n\nNO\n\n\n\n\n\n\nDirect call to a synapse by the name of this one\n\n\n\n\n\n\nsynapse\n\n\nNO\n\n\n\n\n\n\nName of the synapse to launch if the captured audio from the STT is present in the answer list\n\n\n\n\n\n\nanswers\n\n\nNO\n\n\n\n\n\n\nList of sentences that are valid for running the attached synapse\n\n\n\n\n\n\ndefault\n\n\nNO\n\n\n\n\n\n\nName of the synapse to launch if the captured audio doesn't match any answers\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nSynapses example\n\n\nWe call another synapse directly at the end of the first synapse\n\n\n-\n \nname\n:\n \ndirect-link\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ndirect\n \nlink\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nI\n \nlaunch\n \ndirectly\n \nthe\n \nsynapse\n \nnumber\n \n1\n\n      \n-\n \nneurotransmitter\n:\n\n          \ndirect_link\n:\n \nsynapse-1\n\n\n  \n-\n \nname\n:\n \nsynapse-1\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nsynapse-direct-link-1\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nSynapse\n \n1\n \nlaunched\n\n\n\n\n\n\nHere the synapse will ask the user if he likes french fries. If the user answer \"yes\" or \"maybe\", he will be redirected to the synapse2 that say something.\nIf the user answer no, he will be redirected to another synapse that say something else.\nIf the user say something that is not present in \nanswers\n, he will be redirected to the synapse4.\n\n\n \n-\n \nname\n:\n \nsynapse1\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nask\n \nme\n \na\n \nquestion\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \ndo\n \nyou\n \nlike\n \nfrench\n \nfries?\n\n      \n-\n \nneurotransmitter\n:\n\n          \nfrom_answer_link\n:\n\n            \n-\n \nsynapse\n:\n \nsynapse2\n\n              \nanswers\n:\n\n                \n-\n \nabsolutely\n\n                \n-\n \nmaybe\n\n            \n-\n \nsynapse\n:\n \nsynapse3\n\n              \nanswers\n:\n\n                \n-\n \nno\n \nat\n \nall\n\n          \ndefault\n:\n \nsynapse4\n\n\n \n \n-\n \nname\n:\n \nsynapse2\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nsynapse2\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nYou\n \nlike\n \nfrench\n \nfries!!\n \nMe\n \ntoo!\n \nI\n \nsuppose...\n\n\n  \n-\n \nname\n:\n \nsynapse3\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nsynapse3\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nYou\n \ndon\nt\n \nlike\n \nfrench\n \nfries.\n \nIt\ns\n \nok.\n\n\n  \n-\n \nname\n:\n \nsynapse4\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nsynapse4\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nI\n \nhaven\nt\n \nunderstood\n \nyour\n \nanswer\n\n\n\n\n\n\nNeurotransmitter also uses parameters in answers. You can provide parameters to your answers so they can be used by the synapse you are about to launch.\n\n\n\n\nNote:\n The params defined in answers must match with the expected params in the target synapse, otherwise an error is raised.\n\n\n\n\n  \n-\n \nname\n:\n \nsynapse5\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ngive\n \nme\n \nthe\n \nweather\n\n    \nneurons\n:\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nwhich\n \ntown\n \n?\n\n      \n-\n \nneurotransmitter\n:\n\n          \nfrom_answer_link\n:\n\n            \n-\n \nsynapse\n:\n \nsynapse6\n\n              \nanswers\n:\n\n                \n-\n \nthe\n \nweather\n \nin\n \n{{\n \nlocation\n \n}}\n\n\n  \n-\n \nname\n:\n \nsynapse6\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nWhat\n \nis\n \nthe\n \nweather\n \nin\n \n{{\n \nlocation\n \n}}\n\n    \nneurons\n:\n\n      \n-\n \nopenweathermap\n:\n\n          \napi_key\n:\n \nyour-api\n\n          \nlang\n:\n \nfr\n\n          \ntemp_unit\n:\n \ncelsius\n\n          \ncountry\n:\n \nFR\n\n          \nlocation\n:\n \n{{\n \nlocation\n \n}}\n\n          \nsay_template\n:\n\n          \n-\n \nToday\n \nin\n \n{{\n \nlocation\n \n}}\n \nthe\n \nweather\n \nis\n \n{{\n \nweather_today\n \n}}\n \nwith\n \n{{\n \ntemp_today_temp\n \n}}\n \ncelsius\n\n\n\n\n\n\nNotes\n\n\n\n\nWhen using the neuron neurotransmitter, you must set a \ndirect_link\n or a \nfrom_answer_link\n, no both at the same time.", 
            "title": "neurotransmitter"
        }, 
        {
            "location": "/brain/neurons/neurotransmitter/#input-parameters", 
            "text": "parameter  required  default  choices  comment      from_answer_link  NO    Link a synapse depending on the answer of the user. Contain a list of tuple synapse/answer object    direct_link  NO    Direct call to a synapse by the name of this one    synapse  NO    Name of the synapse to launch if the captured audio from the STT is present in the answer list    answers  NO    List of sentences that are valid for running the attached synapse    default  NO    Name of the synapse to launch if the captured audio doesn't match any answers", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/neurotransmitter/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/neurotransmitter/#synapses-example", 
            "text": "We call another synapse directly at the end of the first synapse  -   name :   direct-link \n     signals : \n       -   order :   direct   link \n     neurons : \n       -   say : \n           message :   I   launch   directly   the   synapse   number   1 \n       -   neurotransmitter : \n           direct_link :   synapse-1 \n\n   -   name :   synapse-1 \n     signals : \n       -   order :   synapse-direct-link-1 \n     neurons : \n       -   say : \n           message :   Synapse   1   launched   Here the synapse will ask the user if he likes french fries. If the user answer \"yes\" or \"maybe\", he will be redirected to the synapse2 that say something.\nIf the user answer no, he will be redirected to another synapse that say something else.\nIf the user say something that is not present in  answers , he will be redirected to the synapse4.    -   name :   synapse1 \n     signals : \n       -   order :   ask   me   a   question \n     neurons : \n       -   say : \n           message :   do   you   like   french   fries? \n       -   neurotransmitter : \n           from_answer_link : \n             -   synapse :   synapse2 \n               answers : \n                 -   absolutely \n                 -   maybe \n             -   synapse :   synapse3 \n               answers : \n                 -   no   at   all \n           default :   synapse4 \n\n    -   name :   synapse2 \n     signals : \n       -   order :   synapse2 \n     neurons : \n       -   say : \n           message :   You   like   french   fries!!   Me   too!   I   suppose... \n\n   -   name :   synapse3 \n     signals : \n       -   order :   synapse3 \n     neurons : \n       -   say : \n           message :   You   don t   like   french   fries.   It s   ok. \n\n   -   name :   synapse4 \n     signals : \n       -   order :   synapse4 \n     neurons : \n       -   say : \n           message :   I   haven t   understood   your   answer   Neurotransmitter also uses parameters in answers. You can provide parameters to your answers so they can be used by the synapse you are about to launch.   Note:  The params defined in answers must match with the expected params in the target synapse, otherwise an error is raised.      -   name :   synapse5 \n     signals : \n       -   order :   give   me   the   weather \n     neurons : \n       -   say : \n           message :   which   town   ? \n       -   neurotransmitter : \n           from_answer_link : \n             -   synapse :   synapse6 \n               answers : \n                 -   the   weather   in   {{   location   }} \n\n   -   name :   synapse6 \n     signals : \n       -   order :   What   is   the   weather   in   {{   location   }} \n     neurons : \n       -   openweathermap : \n           api_key :   your-api \n           lang :   fr \n           temp_unit :   celsius \n           country :   FR \n           location :   {{   location   }} \n           say_template : \n           -   Today   in   {{   location   }}   the   weather   is   {{   weather_today   }}   with   {{   temp_today_temp   }}   celsius", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/neurotransmitter/#notes", 
            "text": "When using the neuron neurotransmitter, you must set a  direct_link  or a  from_answer_link , no both at the same time.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/say/", 
            "text": "This neuron is the mouth of Kalliope and uses the TTS engine defined in your settings to say the given message.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nYES\n\n\n\n\n\n\nA single message or a list of messages Kalliope could say\n\n\n\n\n\n\n\n\nReturned values\n\n\nNo returned values\n\n\nSynapses example\n\n\nSimple example :\n\n\n-\n \nname\n:\n \nSay-hello\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nhello\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n \nHello\n \nSir\n\n\n\n\n\n\nWith a multiple choice list, Kalliope will pick one randomly:\n\n\n-\n \nname\n:\n \nSay-hello\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nhello\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n\n          \n-\n \nHello\n \nSir\n\n          \n-\n \nWelcome\n \nSir\n\n          \n-\n \nGood\n \nmorning\n \nSir\n\n\n\n\n\n\nWith an input value\n\n\n-\n \nname\n:\n \nSay-hello-to-friend\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nsay\n \nhello\n \nto\n \n{{\n \nfriend_name\n \n}}\n\n  \nneurons\n:\n\n    \n-\n \nsay\n:\n\n        \nmessage\n:\n \nHello\n \n{{\n \nfriend_name\n \n}}\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n The neuron does not return any values.\n\n\nNote:\n Kalliope randomly takes a message from the list", 
            "title": "say"
        }, 
        {
            "location": "/brain/neurons/say/#input-parameters", 
            "text": "parameter  required  default  choices  comment      message  YES    A single message or a list of messages Kalliope could say", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/say/#returned-values", 
            "text": "No returned values", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/say/#synapses-example", 
            "text": "Simple example :  -   name :   Say-hello \n   signals : \n     -   order :   hello \n   neurons : \n     -   say : \n         message :   Hello   Sir   With a multiple choice list, Kalliope will pick one randomly:  -   name :   Say-hello \n   signals : \n     -   order :   hello \n   neurons : \n     -   say : \n         message : \n           -   Hello   Sir \n           -   Welcome   Sir \n           -   Good   morning   Sir   With an input value  -   name :   Say-hello-to-friend \n   signals : \n     -   order :   say   hello   to   {{   friend_name   }} \n   neurons : \n     -   say : \n         message :   Hello   {{   friend_name   }}", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/say/#notes", 
            "text": "Note:  The neuron does not return any values.  Note:  Kalliope randomly takes a message from the list", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/script/", 
            "text": "This neuron runs a script located on the Kalliope system.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\npath\n\n\nYES\n\n\n\n\n\n\nThe path of the script to execute.\n\n\n\n\n\n\nasync\n\n\nNO\n\n\nFALSE\n\n\n\n\nIf True, Kalliope will not wait for the end of the execution of the script\n\n\n\n\n\n\n\n\nReturned values\n\n\nValues are only returned by the neuron if the async mode is set to \nFalse\n.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nsample\n\n\n\n\n\n\n\n\n\n\noutput\n\n\nThe shell output of the command if any. The command \"date\" will retun \"Sun Oct 16 15:50:45 CEST 2016\"\n\n\nstring\n\n\nSun Oct 16 15:50:45 CEST 2016\n\n\n\n\n\n\nreturncode\n\n\nThe returned code of the command. Return 0 if the command was succesfuly exectued, else 1\n\n\nint\n\n\n0\n\n\n\n\n\n\n\n\nSynapses example\n\n\nSimple example :\n\n\n  \n-\n \nname\n:\n \nrun-simple-script\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nRun\n \nthe\n \nscript\n\n    \nneurons\n:\n\n      \n-\n \nscript\n:\n\n          \npath\n:\n \n/path/to/script.sh\n\n\n\n\n\n\nIf the script can take a long time and you don't want to block the Kalliope process, you can run it in asynchronous mode.\nKeep in mind that you cannot get any returned value with this mode.\n\n\n  \n-\n \nname\n:\n \nrun-simple-script\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nRun\n \nthe\n \nscript\n\n    \nneurons\n:\n\n      \n-\n \nscript\n:\n\n          \npath\n:\n \n/path/to/script.sh\n\n          \nasync\n:\n \nTrue\n\n\n\n\n\n\nMake Kalliope speak out loud the result of the script.\n\n\n  \n-\n \nname\n:\n \nrun-script-an-give-output\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nrun\n \nthe\n \nscript\n\n    \nneurons\n:\n\n      \n-\n \nscript\n:\n\n          \npath\n:\n \n/path/to/script.sh\n\n          \nsay_template\n:\n \n{{\n \noutput\n \n}}\n\n\n\n\n\n\nPath an argument to the script from your order\n\n\n  \n-\n \nname\n:\n \nrun-simple-script-with-input-value\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nRun\n \nthe\n \nscript\n \nwith\n \n{{\n \nmy_var\n \n}}\n\n    \nneurons\n:\n\n      \n-\n \nscript\n:\n\n          \npath\n:\n \n/path/to/script.sh\n \n{{\n \nmy_var\n \n}}\n\n          \nasync\n:\n \nTrue\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n Kalliope must have the rights to run the script.\n\n\nNote:\n Kalliope can be used to grant access to an user with lower rights ... !\n\n\nNote:\n When 'async' flag is used, returned value are lost", 
            "title": "script"
        }, 
        {
            "location": "/brain/neurons/script/#input-parameters", 
            "text": "parameter  required  default  choices  comment      path  YES    The path of the script to execute.    async  NO  FALSE   If True, Kalliope will not wait for the end of the execution of the script", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/script/#returned-values", 
            "text": "Values are only returned by the neuron if the async mode is set to  False .     Name  Description  Type  sample      output  The shell output of the command if any. The command \"date\" will retun \"Sun Oct 16 15:50:45 CEST 2016\"  string  Sun Oct 16 15:50:45 CEST 2016    returncode  The returned code of the command. Return 0 if the command was succesfuly exectued, else 1  int  0", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/script/#synapses-example", 
            "text": "Simple example :     -   name :   run-simple-script \n     signals : \n       -   order :   Run   the   script \n     neurons : \n       -   script : \n           path :   /path/to/script.sh   If the script can take a long time and you don't want to block the Kalliope process, you can run it in asynchronous mode.\nKeep in mind that you cannot get any returned value with this mode.     -   name :   run-simple-script \n     signals : \n       -   order :   Run   the   script \n     neurons : \n       -   script : \n           path :   /path/to/script.sh \n           async :   True   Make Kalliope speak out loud the result of the script.     -   name :   run-script-an-give-output \n     signals : \n       -   order :   run   the   script \n     neurons : \n       -   script : \n           path :   /path/to/script.sh \n           say_template :   {{   output   }}   Path an argument to the script from your order     -   name :   run-simple-script-with-input-value \n     signals : \n       -   order :   Run   the   script   with   {{   my_var   }} \n     neurons : \n       -   script : \n           path :   /path/to/script.sh   {{   my_var   }} \n           async :   True", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/script/#notes", 
            "text": "Note:  Kalliope must have the rights to run the script.  Note:  Kalliope can be used to grant access to an user with lower rights ... !  Note:  When 'async' flag is used, returned value are lost", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/settings/", 
            "text": "Manage / Update / Add settings entries of Kalliope\n\n\nCurrently available:\n\n\n\n\ndefault_tts\n\n\ndefault_stt\n\n\ndefault_trigger\n\n\ndefault_player\n\n\ntext_to_speech\n\n\nspeech_to_text\n\n\ntriggers\n\n\nplayers\n\n\nhooks\n\n\nvar_files\n\n\nvariable\n\n\ndeaf\n\n\nmute\n\n\nenergy_threshold\n\n\nadjust_for_ambient_noise_second\n\n\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ntype\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\ndefault_tts\n\n\nNo\n\n\nStr\n\n\nNone\n\n\n\n\nPick a tts name from the list of text_to_speech\n\n\n\n\n\n\ndefault_stt\n\n\nNo\n\n\nStr\n\n\nNone\n\n\n\n\nPick a stt name from the list of speech_to_text\n\n\n\n\n\n\ndefault_trigger\n\n\nNo\n\n\nStr\n\n\nNone\n\n\n\n\nPick a trigger name from the list of triggers\n\n\n\n\n\n\ndefault_player\n\n\nNo\n\n\nStr\n\n\nNone\n\n\n\n\nPick a player name from the list of players\n\n\n\n\n\n\ntext_to_speech\n\n\nNo\n\n\nlist (of dict)\n\n\nNone\n\n\n\n\nAdd or Update a tts to the list\n\n\n\n\n\n\nspeech_to_text\n\n\nNo\n\n\nlist (of dict)\n\n\nNone\n\n\n\n\nAdd or Update a stt to the list\n\n\n\n\n\n\ntriggers\n\n\nNo\n\n\nlist (of dict)\n\n\nNone\n\n\n\n\nAdd or Update a trigger to the list\n\n\n\n\n\n\nplayers\n\n\nNo\n\n\nlist (of dict)\n\n\nNone\n\n\n\n\nAdd or Update a player to the list\n\n\n\n\n\n\nhooks\n\n\nNo\n\n\ndict\n\n\nNone\n\n\n\n\nUpdate the hooks dict from the settings with the given dict\n\n\n\n\n\n\nvar_files\n\n\nNo\n\n\nlist\n\n\nNone\n\n\n\n\nUpdate variables from the settings with the given files path\n\n\n\n\n\n\nvariable\n\n\nNo\n\n\ndict\n\n\nNone\n\n\n\n\nUpdate the variable dict from the settings with the given dict\n\n\n\n\n\n\ndeaf\n\n\nNo\n\n\nboolean\n\n\nNone\n\n\nTrue, False\n\n\n\n\n\n\n\n\nmute\n\n\nNo\n\n\nboolean\n\n\nNone\n\n\nTrue, False\n\n\n\n\n\n\n\n\nenergy_threshold\n\n\nNo\n\n\nint\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nadjust_for_ambient_noise_second\n\n\nNo\n\n\nint\n\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nSynapses example\n\n\ntts, stt, triggers, players\n\n\n  \n-\n \nname\n:\n \nsay-hello-en\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nHello\n\n    \nneurons\n:\n\n      \n-\n \nsettings\n:\n\n          \ndefault_tts\n:\n \ngoogletts\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nHello\n \nsir\n\n\n\n\n\n\nTo update the list of text_to_speech\n\n\n  \n-\n \nname\n:\n \nsay-hello-en\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nHello\n\n    \nneurons\n:\n\n      \n-\n \nsettings\n:\n\n          \ntext_to_speech\n:\n\n            \n-\n \ngoogletts\n:\n\n                \nlanguage\n:\n \nen\n\n            \n-\n \npico2wave\n:\n\n                \nlanguage\n:\n \nfr-FR\n\n                \ncache\n:\n \nFalse\n\n          \ndefault_tts\n:\n \ngoogletts\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nHello\n \nsir\n\n\n\n\n\n\nOptions (deaf, mute, ...)\n\n\n  \n-\n \nname\n:\n \nsay-hello-en\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nHello\n\n    \nneurons\n:\n\n      \n-\n \nsettings\n:\n\n          \nmute\n:\n \nTrue\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nHello\n \nsir\n\n\n\n\n\n\nHooks\n\n\n-\n \nname\n:\n \nsay-hello-en\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nHello\n\n    \nneurons\n:\n\n      \n-\n \nsettings\n:\n\n          \nhooks\n:\n\n            \non_order_found\n:\n \nrandom-on-order-found-synapse\n\n            \non_processed_synapses\n:\n\n              \n-\n \nrandom1-on-processed-synapse\n\n              \n-\n \nrandom2-on-processed-synapse\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nHello\n \nsir\n\n\n\n\n\n\nVariables\n\n\n  \n-\n \nname\n:\n \nsay-hello-en\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nHello\n\n    \nneurons\n:\n\n      \n-\n \nsettings\n:\n\n          \nvariable\n:\n\n            \nnickname\n:\n \nmonf\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nHello\n \n{{nickname}}\n\n\n\n\n\n\n\n\nThe keyword is 'var_files' for files\n\n\n\n\nThe {{nickname}} will be loaded from the variables.yml file.\n\n\n  \n-\n \nname\n:\n \nsay-hello-en\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nHello\n\n    \nneurons\n:\n\n      \n-\n \nsettings\n:\n\n          \nvar_files\n:\n\n            \n-\n \nvariables.yml\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n\n            \n-\n \nHello\n \n{{nickname}}\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n It is not possible to update the REST API config nor the ressources path nor the cache path for tts.\n\n\nNote:\n Changes made to the settings from this neuron are not persistent. Settings will be loaded again following the yaml file at the next start of Kalliope.", 
            "title": "settings"
        }, 
        {
            "location": "/brain/neurons/settings/#input-parameters", 
            "text": "parameter  required  type  default  choices  comment      default_tts  No  Str  None   Pick a tts name from the list of text_to_speech    default_stt  No  Str  None   Pick a stt name from the list of speech_to_text    default_trigger  No  Str  None   Pick a trigger name from the list of triggers    default_player  No  Str  None   Pick a player name from the list of players    text_to_speech  No  list (of dict)  None   Add or Update a tts to the list    speech_to_text  No  list (of dict)  None   Add or Update a stt to the list    triggers  No  list (of dict)  None   Add or Update a trigger to the list    players  No  list (of dict)  None   Add or Update a player to the list    hooks  No  dict  None   Update the hooks dict from the settings with the given dict    var_files  No  list  None   Update variables from the settings with the given files path    variable  No  dict  None   Update the variable dict from the settings with the given dict    deaf  No  boolean  None  True, False     mute  No  boolean  None  True, False     energy_threshold  No  int  None      adjust_for_ambient_noise_second  No  int  None", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/settings/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/settings/#synapses-example", 
            "text": "", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/settings/#tts-stt-triggers-players", 
            "text": "-   name :   say-hello-en \n     signals : \n       -   order :   Hello \n     neurons : \n       -   settings : \n           default_tts :   googletts \n       -   say : \n           message : \n             -   Hello   sir   To update the list of text_to_speech     -   name :   say-hello-en \n     signals : \n       -   order :   Hello \n     neurons : \n       -   settings : \n           text_to_speech : \n             -   googletts : \n                 language :   en \n             -   pico2wave : \n                 language :   fr-FR \n                 cache :   False \n           default_tts :   googletts \n       -   say : \n           message : \n             -   Hello   sir", 
            "title": "tts, stt, triggers, players"
        }, 
        {
            "location": "/brain/neurons/settings/#options-deaf-mute", 
            "text": "-   name :   say-hello-en \n     signals : \n       -   order :   Hello \n     neurons : \n       -   settings : \n           mute :   True \n       -   say : \n           message : \n             -   Hello   sir", 
            "title": "Options (deaf, mute, ...)"
        }, 
        {
            "location": "/brain/neurons/settings/#hooks", 
            "text": "-   name :   say-hello-en \n     signals : \n       -   order :   Hello \n     neurons : \n       -   settings : \n           hooks : \n             on_order_found :   random-on-order-found-synapse \n             on_processed_synapses : \n               -   random1-on-processed-synapse \n               -   random2-on-processed-synapse \n       -   say : \n           message : \n             -   Hello   sir", 
            "title": "Hooks"
        }, 
        {
            "location": "/brain/neurons/settings/#variables", 
            "text": "-   name :   say-hello-en \n     signals : \n       -   order :   Hello \n     neurons : \n       -   settings : \n           variable : \n             nickname :   monf \n       -   say : \n           message : \n             -   Hello   {{nickname}}    The keyword is 'var_files' for files   The {{nickname}} will be loaded from the variables.yml file.     -   name :   say-hello-en \n     signals : \n       -   order :   Hello \n     neurons : \n       -   settings : \n           var_files : \n             -   variables.yml \n       -   say : \n           message : \n             -   Hello   {{nickname}}", 
            "title": "Variables"
        }, 
        {
            "location": "/brain/neurons/settings/#notes", 
            "text": "Note:  It is not possible to update the REST API config nor the ressources path nor the cache path for tts.  Note:  Changes made to the settings from this neuron are not persistent. Settings will be loaded again following the yaml file at the next start of Kalliope.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/shell/", 
            "text": "Run a shell command on the local system where Kalliope is installed.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\ncmd\n\n\nyes\n\n\n\n\n\n\nThe shell command to run\n\n\n\n\n\n\nasync\n\n\nno\n\n\nFalse\n\n\n\n\nIf True, Kalliope will not wait for the end of the execution of the command\n\n\n\n\n\n\nquery\n\n\nno\n\n\nFalse\n\n\n\n\nAn argument to send the script.\n\n\n\n\n\n\n\n\nReturned values\n\n\nValues are only returned by the neuron if the async mode is set to \nFalse\n.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nsample\n\n\n\n\n\n\n\n\n\n\noutput\n\n\nThe shell output of the command if any. The command \"date\" will retun \"Sun Oct 16 15:50:45 CEST 2016\"\n\n\nstring\n\n\nSun Oct 16 15:50:45 CEST 2016\n\n\n\n\n\n\nreturncode\n\n\nThe returned code of the command. Return 0 if the command was succesfuly exectued, else 1\n\n\nint\n\n\n0\n\n\n\n\n\n\n\n\nSynapses example\n\n\nSimple that will create a file locally\n\n\n  \n-\n \nname\n:\n \ncreate-a-local-file\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ntouch\n\n    \nneurons\n:\n\n      \n-\n \nshell\n:\n\n          \ncmd\n:\n \ntouch\n \n~/test.txt\n\n\n\n\n\n\nWe want to launch our favorite web radio. This command, which it call mplayer, will block the entire Kalliope process if we\nwait for the result unless the mplayer process is killed. So we add \nasync\n flag.\n\n\n  \n-\n \nname\n:\n \nrun-web-radio\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nrun\n \nweb\n \nradio\n\n    \nneurons\n:\n\n      \n-\n \nshell\n:\n\n          \ncmd\n:\n \nmplayer\n \nhttp://192.99.17.12:6410/\n\n          \nasync\n:\n \nTrue\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nweb\n \nradio\n \nlanched\n\n\n\n\n\n\n\n\nNote:\n If the parameter \nasync\n is set to True, the neuron will not return any values.\n\n\n\n\nThen, we can kill the player process with another synapse\n\n\n  \n-\n \nname\n:\n \nstop-web-radio\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nstop\n \nweb\n \nradio\n\n    \nneurons\n:\n\n      \n-\n \nshell\n:\n\n          \ncmd\n:\n \npkill\n \nmplayer\n\n      \n-\n \nsay\n:\n\n          \nmessage\n:\n \nweb\n \nradio\n \nstopped\n\n\n\n\n\n\nMake Kalliope add two number and speak out loud the result. Here you should hear \"4\".\n\n\n  \n-\n \nname\n:\n \nget-the-result-of-the-addition\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \naddition\n\n    \nneurons\n:\n\n      \n-\n \nshell\n:\n\n          \ncmd\n:\n \necho\n \n$(expr\n \n\\\n1\\\n \n+\n \n\\\n3\\\n)\n\n          \nsay_template\n:\n \n{{\n \noutput\n \n}}\n\n\n\n\n\n\nLet's use a file template. We try to remove the file \n~/test.txt\n and make Kalliope give us the result depending of the\nreturned error code.\nIf the file is present on the system, you will hear \"The command has succeeded\" and so the file has been deleted.\nIf you run it a second time, the command will fail as the file is not anymore present and so you should hear\n\"The command has failed\". See the template example bellow.\n\n\n  \n-\n \nname\n:\n \nremove-a-file\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nremove\n \nfile\n\n    \nneurons\n:\n\n      \n-\n \nshell\n:\n\n          \ncmd\n:\n \nrm\n \n~/test.txt\n\n          \nfile_template\n:\n \nremove_file.j2\n\n\n\n\n\n\nIf you want to add argument to your shell command, you can use an input value from your order.\n\n\n  \n-\n \nname\n:\n \nDelete-a-specific-file\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nremove\n \nfile\n \n{{\n \nquery\n \n}}\n\n    \nneurons\n:\n\n      \n-\n \nshell\n:\n\n          \ncmd\n:\n \nrm\n \n{{\n \nquery\n \n}}\n\n          \nfile_template\n:\n \nremove_file.j2\n\n\n\n\n\n\nIn the example above, kalliope will remove the file you asked for in the query.\neg: \"remove file test\", the executed command will be \"rm test\"\n\n\nTemplates example\n\n\nTemplate \nremove_file.j2\n used in the remove file example remove_file.j2\n\n\n{%\n \nif\n \nreturncode\n \n==\n \n0\n \n%}\n\n\n    The command succeeded\n\n\n{%\n \nelse\n \n%}\n\n\n    The command failled\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n If the parameter \nasync\n is set to True, the neuron will not return any values.", 
            "title": "shell"
        }, 
        {
            "location": "/brain/neurons/shell/#input-parameters", 
            "text": "parameter  required  default  choices  comment      cmd  yes    The shell command to run    async  no  False   If True, Kalliope will not wait for the end of the execution of the command    query  no  False   An argument to send the script.", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/shell/#returned-values", 
            "text": "Values are only returned by the neuron if the async mode is set to  False .     Name  Description  Type  sample      output  The shell output of the command if any. The command \"date\" will retun \"Sun Oct 16 15:50:45 CEST 2016\"  string  Sun Oct 16 15:50:45 CEST 2016    returncode  The returned code of the command. Return 0 if the command was succesfuly exectued, else 1  int  0", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/shell/#synapses-example", 
            "text": "Simple that will create a file locally     -   name :   create-a-local-file \n     signals : \n       -   order :   touch \n     neurons : \n       -   shell : \n           cmd :   touch   ~/test.txt   We want to launch our favorite web radio. This command, which it call mplayer, will block the entire Kalliope process if we\nwait for the result unless the mplayer process is killed. So we add  async  flag.     -   name :   run-web-radio \n     signals : \n       -   order :   run   web   radio \n     neurons : \n       -   shell : \n           cmd :   mplayer   http://192.99.17.12:6410/ \n           async :   True \n       -   say : \n           message :   web   radio   lanched    Note:  If the parameter  async  is set to True, the neuron will not return any values.   Then, we can kill the player process with another synapse     -   name :   stop-web-radio \n     signals : \n       -   order :   stop   web   radio \n     neurons : \n       -   shell : \n           cmd :   pkill   mplayer \n       -   say : \n           message :   web   radio   stopped   Make Kalliope add two number and speak out loud the result. Here you should hear \"4\".     -   name :   get-the-result-of-the-addition \n     signals : \n       -   order :   addition \n     neurons : \n       -   shell : \n           cmd :   echo   $(expr   \\ 1\\   +   \\ 3\\ ) \n           say_template :   {{   output   }}   Let's use a file template. We try to remove the file  ~/test.txt  and make Kalliope give us the result depending of the\nreturned error code.\nIf the file is present on the system, you will hear \"The command has succeeded\" and so the file has been deleted.\nIf you run it a second time, the command will fail as the file is not anymore present and so you should hear\n\"The command has failed\". See the template example bellow.     -   name :   remove-a-file \n     signals : \n       -   order :   remove   file \n     neurons : \n       -   shell : \n           cmd :   rm   ~/test.txt \n           file_template :   remove_file.j2   If you want to add argument to your shell command, you can use an input value from your order.     -   name :   Delete-a-specific-file \n     signals : \n       -   order :   remove   file   {{   query   }} \n     neurons : \n       -   shell : \n           cmd :   rm   {{   query   }} \n           file_template :   remove_file.j2   In the example above, kalliope will remove the file you asked for in the query.\neg: \"remove file test\", the executed command will be \"rm test\"", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/shell/#templates-example", 
            "text": "Template  remove_file.j2  used in the remove file example remove_file.j2  {%   if   returncode   ==   0   %}      The command succeeded  {%   else   %}      The command failled  {%   endif   %}", 
            "title": "Templates example"
        }, 
        {
            "location": "/brain/neurons/shell/#notes", 
            "text": "Note:  If the parameter  async  is set to True, the neuron will not return any values.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/signals/", 
            "text": "Send a message to all signals launched in Kalliope to update their behavior.\nThe message will be interpreted by all signals that support notification.\nAll supported notification type are documented in each Signals.\n\n\nA basic example of usage is to \ndisable the trigger from the Order signal\n to create an interactive mode where you can chain orders without having to wake up Kalliope with the hotword.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ntype\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nnotification\n\n\nYES\n\n\nstring\n\n\n\n\n\n\nThe notification string identifier that will be recognized by launched signals\n\n\n\n\n\n\npayload\n\n\nNO\n\n\ndict\n\n\n\n\n\n\nDict of parameters to send with the notification. The payload must match the target Signal documentation\n\n\n\n\n\n\n\n\nSynapse examples\n\n\nSyntax:\n\n\n-\n \nname\n:\n \nmy-synapse\n\n  \nsignals\n:\n \n{}\n\n  \nneurons\n:\n\n    \n-\n \nsignals\n:\n\n        \nnotification\n:\n \nnotification_name\n\n        \npayload\n:\n\n          \nkey1\n:\n \nvalue1\n\n          \nkey2\n:\n \nvalue2\n\n\n\n\n\n\nE.g:\n\n\n-\n \nname\n:\n \nstart-skip-trigger\n\n  \nsignals\n:\n \n{}\n\n  \nneurons\n:\n\n    \n-\n \nsignals\n:\n\n        \nnotification\n:\n \nskip_trigger\n\n        \npayload\n:\n\n          \nstatus\n:\n \nTrue\n\n\n\n\n\n\nConcrete example\n\n\nSee a complete example from the \norder signal documentation\n.\n\n\nHow to implement notifications in my community signals\n\n\nYou Signal will implement 2 classes, SignalModule and Thread.\n\n\n\n\nSignalModule is used to implement methods like notification\n\n\nThread is used to keep the signal awaken during the Kalliope process execution.\n\n\n\n\nHere is a basic implementation of a signal.\n\n\nclass\n \nMysignal\n(\nSignalModule\n,\n \nThread\n):\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \nsuper\n(\nMysignal\n,\n \nself\n)\n.\n__init__\n()\n\n        \nThread\n.\n__init__\n(\nself\n,\n \nname\n=\nMysignal\n)\n\n\n    \ndef\n \nrun\n:\n\n        \n# do my signal job\n\n\n\n\n\n\nNow, to implement notification, add the \non_notification_received\n\n\nclass\n \nMysignal\n(\nSignalModule\n,\n \nThread\n):\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \nsuper\n(\nMysignal\n,\n \nself\n)\n.\n__init__\n()\n\n        \nThread\n.\n__init__\n(\nself\n,\n \nname\n=\nMysignal\n)\n\n\n    \ndef\n \nrun\n:\n\n        \n# do my signal job\n\n\n    \ndef\n \non_notification_received\n(\nself\n,\n \nnotification\n=\nNone\n,\n \npayload\n=\nNone\n):\n\n        \nlogger\n.\ndebug\n(\n[My_signal] received notification, notification: \n%s\n, payload: \n%s\n \n%\n \n(\nnotification\n,\n \npayload\n))\n\n        \nif\n \nnotification\n \n==\n \nnotification_that_I_care\n:\n\n            \n# do stuff with payload", 
            "title": "signals"
        }, 
        {
            "location": "/brain/neurons/signals/#input-parameters", 
            "text": "parameter  required  type  default  choices  comment      notification  YES  string    The notification string identifier that will be recognized by launched signals    payload  NO  dict    Dict of parameters to send with the notification. The payload must match the target Signal documentation", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/signals/#synapse-examples", 
            "text": "Syntax:  -   name :   my-synapse \n   signals :   {} \n   neurons : \n     -   signals : \n         notification :   notification_name \n         payload : \n           key1 :   value1 \n           key2 :   value2   E.g:  -   name :   start-skip-trigger \n   signals :   {} \n   neurons : \n     -   signals : \n         notification :   skip_trigger \n         payload : \n           status :   True", 
            "title": "Synapse examples"
        }, 
        {
            "location": "/brain/neurons/signals/#concrete-example", 
            "text": "See a complete example from the  order signal documentation .", 
            "title": "Concrete example"
        }, 
        {
            "location": "/brain/neurons/signals/#how-to-implement-notifications-in-my-community-signals", 
            "text": "You Signal will implement 2 classes, SignalModule and Thread.   SignalModule is used to implement methods like notification  Thread is used to keep the signal awaken during the Kalliope process execution.   Here is a basic implementation of a signal.  class   Mysignal ( SignalModule ,   Thread ): \n     def   __init__ ( self ): \n         super ( Mysignal ,   self ) . __init__ () \n         Thread . __init__ ( self ,   name = Mysignal ) \n\n     def   run : \n         # do my signal job   Now, to implement notification, add the  on_notification_received  class   Mysignal ( SignalModule ,   Thread ): \n     def   __init__ ( self ): \n         super ( Mysignal ,   self ) . __init__ () \n         Thread . __init__ ( self ,   name = Mysignal ) \n\n     def   run : \n         # do my signal job \n\n     def   on_notification_received ( self ,   notification = None ,   payload = None ): \n         logger . debug ( [My_signal] received notification, notification:  %s , payload:  %s   %   ( notification ,   payload )) \n         if   notification   ==   notification_that_I_care : \n             # do stuff with payload", 
            "title": "How to implement notifications in my community signals"
        }, 
        {
            "location": "/brain/neurons/sleep/", 
            "text": "This neuron sleeps the system for a given time in seconds.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nYES\n\n\n\n\n\n\nThe number of seconds to sleep.\n\n\n\n\n\n\n\n\nReturned values\n\n\nNo returned values\n\n\nSynapses example\n\n\nSimple example :\n\n\n  \n-\n \nname\n:\n \nrun-simple-sleep\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \nWait\n \nfor\n \nme\n \n\n    \nneurons\n:\n\n      \n-\n \nsleep\n:\n\n          \nseconds\n:\n \n60", 
            "title": "sleep"
        }, 
        {
            "location": "/brain/neurons/sleep/#input-parameters", 
            "text": "parameter  required  default  choices  comment      seconds  YES    The number of seconds to sleep.", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/sleep/#returned-values", 
            "text": "No returned values", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/sleep/#synapses-example", 
            "text": "Simple example :     -   name :   run-simple-sleep \n     signals : \n       -   order :   Wait   for   me   \n     neurons : \n       -   sleep : \n           seconds :   60", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/systemdate/", 
            "text": "Give the current time from the system where Kalliope is installed. Return a dict of parameters that can be used in a template.\n\n\nInput parameters\n\n\nNone\n\n\nReturned values\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\ntype\n\n\nsample\n\n\n\n\n\n\n\n\n\n\nhours\n\n\nHour (24-hour clock) as a decimal number [00,23].\n\n\nstring\n\n\n22\n\n\n\n\n\n\nminutes\n\n\nMinute as a decimal number [00,59].\n\n\nstring\n\n\n54\n\n\n\n\n\n\nweekday\n\n\nWeekday as a decimal number [0(Sunday),6].\n\n\nstring\n\n\n4\n\n\n\n\n\n\nmonth\n\n\nMonth as a decimal number [01,12].\n\n\nstring\n\n\n4\n\n\n\n\n\n\nday_month\n\n\nDay of the month as a decimal number [01,31].\n\n\nstring\n\n\n12\n\n\n\n\n\n\nyear\n\n\nYear with century as a decimal number\n\n\nstring\n\n\n2016\n\n\n\n\n\n\n\n\nSynapses example\n\n\nSimple synapse that give the current time with only hours and minutes\n\n\n-\n \nname\n:\n \ntime\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nwhat\n \ntime\n \nis\n \nit\n\n  \nneurons\n:\n\n    \n-\n \nsystemdate\n:\n\n        \nsay_template\n:\n\n          \n-\n \nIt\n \n{{\n \nhours\n \n}}\n \nhours\n \nand\n \n{{\n \nminutes\n \n}}\n \nminutes\n\n\n\n\n\n\nSynapse that give complete date and time with a template file.\n\n\n-\n \nname\n:\n \ntime\n\n  \nsignals\n:\n\n    \n-\n \norder\n:\n \nwhat\n \ntime\n \nis\n \nit\n\n  \nneurons\n:\n\n    \n-\n \nsystemdate\n:\n\n        \nfile_template\n:\n \nen_systemdate_template_example.j2\n\n\n\n\n\n\nTemplates example\n\n\nThis template will transcribe received numbers from the neuron into natural language\n\n\nIt\ns \n{{\n \nhours\n \n}}\n hours and \n{{\n \nminutes\n \n}}\n minutes\n\n\n\n\n\n\nThis template, which it must be placed in a file_template, will give the complete date and time.\n\n\n{%\n \nset\n \nday_of_week\n \n=\n \n{\n\n    \n0\n:\n \nsunday\n,\n\n    \n1\n:\n \nmonday\n,\n\n    \n2\n:\n \ntuesday\n,\n\n    \n3\n:\n \nwednesday\n,\n\n    \n4\n:\n \nthursday\n,\n\n    \n5\n:\n \nfriday\n,\n\n    \n6\n:\n \nsaturday\n\n    \n}[\nweekday\n]\n \n|\n \ndefault\n(\n)\n\n-\n%}\n\n\n\n{%\n \nset\n \nmonth_word\n \n=\n \n{\n1\n:\n \njanuary\n,\n \n2\n:\n \nfebruary\n,\n \n3\n:\n \nmarch\n,\n \n4\n:\n \napril\n,\n \n5\n:\n \nmay\n,\n \n6\n:\n \njune\n,\n \n7\n:\n \njuly\n,\n \n8\n:\n \naugust\n,\n \n9\n:\n \nseptember\n,\n \n10\n:\n \noctober\n,\n \n11\n:\n \nnovember\n,\n \n12\n:\n \ndecember\n}[\nmonth\n]\n \n|\n \ndefault\n(\n)\n -\n%}\n\n\n\n{%\n \nset\n \nday_month_formated\n \n=\n \n{\n\n    \n1\n:\n \nfirst\n,\n\n    \n2\n:\n \nsecond\n,\n\n    \n3\n:\n \nthird\n,\n\n    \n4\n:\n \nfourth\n,\n\n    \n5\n:\n \nfifth\n,\n\n    \n6\n:\n \nsixth\n,\n\n    \n7\n:\n \nseventh\n,\n\n    \n8\n:\n \neighth\n,\n\n    \n9\n:\n \nninth\n,\n\n    \n10\n:\n \ntenth\n,\n\n    \n11\n:\n \neleventh\n,\n\n    \n12\n:\n \ntwelfth\n,\n\n    \n13\n:\n \nthirteenth\n,\n\n    \n14\n:\n \nfourteenth\n,\n\n    \n15\n:\n \nfifteenth\n,\n\n    \n16\n:\n \nsixteenth\n,\n\n    \n17\n:\n \nseventeenth\n,\n\n    \n18\n:\n \neighteenth\n,\n\n    \n19\n:\n \nnineteenth\n,\n\n    \n20\n:\n \ntwentieth\n,\n\n    \n21\n:\n \ntwenty-first\n,\n\n    \n22\n:\n \ntwenty-second\n,\n\n    \n23\n:\n \ntwenty-third\n,\n\n    \n24\n:\n \ntwenty-fourth\n,\n\n    \n25\n:\n \ntwenty-fifth\n,\n\n    \n26\n:\n \ntwenty-sixth\n,\n\n    \n27\n:\n \ntwenty-seventh\n,\n\n    \n28\n:\n \ntwenty-eighth\n,\n\n    \n29\n:\n \ntwenty-ninth\n,\n\n    \n30\n:\n \nthirtieth\n,\n\n    \n31\n:\n \nthirty-first\n,\n\n\n\n}[\nday_month\n]\n \n|\n \ndefault\n(\n)\n -\n%}\n\n\n\nIt\n \n{{\n \nhours\n \n}}\n hours and \n{{\n \nminutes\n \n}}\n minutes.\n\n\nWe are the \n{{\n \nday_of_week\n \n}}\n \n{{\n \nmonth_word\n \n}}\n the \n{{\n \nday_month_formated\n \n}}\n \n{{\n \nyear\n \n}}\n\n\n\n\n\n\nNotes\n\n\n\n\nNote:\n As the neuron is based on the local system date, this last must be well configured. A good practice is the installation and configuration of a NTP client\n to synchronize the time on your Linux system with a centralized NTP server.", 
            "title": "systemdate"
        }, 
        {
            "location": "/brain/neurons/systemdate/#input-parameters", 
            "text": "None", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/systemdate/#returned-values", 
            "text": "name  description  type  sample      hours  Hour (24-hour clock) as a decimal number [00,23].  string  22    minutes  Minute as a decimal number [00,59].  string  54    weekday  Weekday as a decimal number [0(Sunday),6].  string  4    month  Month as a decimal number [01,12].  string  4    day_month  Day of the month as a decimal number [01,31].  string  12    year  Year with century as a decimal number  string  2016", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/systemdate/#synapses-example", 
            "text": "Simple synapse that give the current time with only hours and minutes  -   name :   time \n   signals : \n     -   order :   what   time   is   it \n   neurons : \n     -   systemdate : \n         say_template : \n           -   It   {{   hours   }}   hours   and   {{   minutes   }}   minutes   Synapse that give complete date and time with a template file.  -   name :   time \n   signals : \n     -   order :   what   time   is   it \n   neurons : \n     -   systemdate : \n         file_template :   en_systemdate_template_example.j2", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/systemdate/#templates-example", 
            "text": "This template will transcribe received numbers from the neuron into natural language  It s  {{   hours   }}  hours and  {{   minutes   }}  minutes   This template, which it must be placed in a file_template, will give the complete date and time.  {%   set   day_of_week   =   { \n     0 :   sunday , \n     1 :   monday , \n     2 :   tuesday , \n     3 :   wednesday , \n     4 :   thursday , \n     5 :   friday , \n     6 :   saturday \n     }[ weekday ]   |   default ( ) \n- %}  {%   set   month_word   =   { 1 :   january ,   2 :   february ,   3 :   march ,   4 :   april ,   5 :   may ,   6 :   june ,   7 :   july ,   8 :   august ,   9 :   september ,   10 :   october ,   11 :   november ,   12 :   december }[ month ]   |   default ( )  - %}  {%   set   day_month_formated   =   { \n     1 :   first , \n     2 :   second , \n     3 :   third , \n     4 :   fourth , \n     5 :   fifth , \n     6 :   sixth , \n     7 :   seventh , \n     8 :   eighth , \n     9 :   ninth , \n     10 :   tenth , \n     11 :   eleventh , \n     12 :   twelfth , \n     13 :   thirteenth , \n     14 :   fourteenth , \n     15 :   fifteenth , \n     16 :   sixteenth , \n     17 :   seventeenth , \n     18 :   eighteenth , \n     19 :   nineteenth , \n     20 :   twentieth , \n     21 :   twenty-first , \n     22 :   twenty-second , \n     23 :   twenty-third , \n     24 :   twenty-fourth , \n     25 :   twenty-fifth , \n     26 :   twenty-sixth , \n     27 :   twenty-seventh , \n     28 :   twenty-eighth , \n     29 :   twenty-ninth , \n     30 :   thirtieth , \n     31 :   thirty-first ,  }[ day_month ]   |   default ( )  - %}  It   {{   hours   }}  hours and  {{   minutes   }}  minutes.  We are the  {{   day_of_week   }}   {{   month_word   }}  the  {{   day_month_formated   }}   {{   year   }}", 
            "title": "Templates example"
        }, 
        {
            "location": "/brain/neurons/systemdate/#notes", 
            "text": "Note:  As the neuron is based on the local system date, this last must be well configured. A good practice is the installation and configuration of a NTP client\n to synchronize the time on your Linux system with a centralized NTP server.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/neurons/uri/", 
            "text": "Interacts with HTTP and HTTPS web services.\n\n\nInput parameters\n\n\n\n\n\n\n\n\nparameter\n\n\nrequired\n\n\ndefault\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nYES\n\n\n\n\n\n\nHTTP or HTTPS URL in the form (http\n\n\n\n\n\n\nheaders\n\n\nNO\n\n\n\n\nE.g: Content-Type: 'application/json'\n\n\nAdd custom HTTP headers to a request in the format of a YAML hash\n\n\n\n\n\n\ndata\n\n\nNO\n\n\n\n\nE.g: \"{\\\"title\\\": \\\"foo\\\"}\"\n\n\nJSON data to send to the server. You must escape quotes in the YAML file.\n\n\n\n\n\n\ndata_from_file\n\n\nNO\n\n\n\n\nE.g: /path/to/my/file.json\n\n\nJSON data loaded from a file.\n\n\n\n\n\n\nmethod\n\n\nNO\n\n\nGET\n\n\nGET, POST, DELETE, PUT, HEAD, PATCH, OPTIONS\n\n\nThe HTTP method of the request or response. It MUST be uppercase.\n\n\n\n\n\n\nuser\n\n\nNO\n\n\n\n\n\n\nusername for the basic authentication.\n\n\n\n\n\n\npassword\n\n\nNO\n\n\n\n\n\n\npasswordfor the basic authentication.\n\n\n\n\n\n\ntimeout\n\n\nNO\n\n\n\n\n\n\nThe socket level timeout in seconds. Must be an integer without quotes\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nsample\n\n\n\n\n\n\n\n\n\n\nstatus_code\n\n\nNumeric, HTTP status code that signifies success of the request.\n\n\nint\n\n\n200\n\n\n\n\n\n\ncontent\n\n\nThe body content of the server answer. May be JSON serialized and usable in a template\n\n\nstring\n\n\n{\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1}\n\n\n\n\n\n\nresponse_header\n\n\nResponse header from the server.\n\n\ndict\n\n\n{'Date': 'Sat, 19 Nov 2016 11:17:56 GMT', 'Content-Length': '192', 'Content-Type': 'text/html'}\n\n\n\n\n\n\n\n\nSynapses example\n\n\nSimple call to a server. The default method is GET\n\n\n  \n-\n \nname\n:\n \ntest-get-url\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ntest-get-url\n\n    \nneurons\n:\n\n      \n-\n \nuri\n:\n\n          \nurl\n:\n \nhttp://host.domain/get/1\n\n\n\n\n\n\nA simple call with authentication\n\n\n-\n \nname\n:\n \ntest-get-url-with-auth\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ntest-get-url-with-auth\n\n    \nneurons\n:\n\n      \n-\n \nuri\n:\n\n          \nurl\n:\n \nhttp://host.domain/get/1\n\n          \nuser\n:\n \nadmin\n\n          \npassword\n:\n \nsecret\n\n\n\n\n\n\nA simple post with data inside the url\n\n\n-\n \nname\n:\n \ntest-post-url-with-auth\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ntest-post-url-with-data\n\n    \nneurons\n:\n\n      \n-\n \nuri\n:\n\n          \nurl\n:\n \nhttp://host.domain/login?email=user@host.domain\npassword=foobar123\n\n          \nmethod\n:\n \nPOST\n\n\n\n\n\n\nA post with json data. Note that we need to escape quotes from the payload.\n\n\n-\n \nname\n:\n \ntest-post-url\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ntest-post-url\n\n    \nneurons\n:\n\n      \n-\n \nuri\n:\n\n          \nurl\n:\n \nhttp://host.domain/posts\n\n          \nmethod\n:\n \nPOST\n\n          \nheaders\n:\n\n            \nContent-Type\n:\n \napplication/json\n\n          \ndata\n:\n \n{\\\nid\\\n:\n \n1,\\\ntitle\\\n:\n \n\\\nfoo\\\n,\n \n\\\nbody\\\n:\n \n\\\nbar\\\n,\n \n\\\nuserId\\\n:\n \n1}\n\n\n\n\n\n\nA post with json data imported from a file and a custom header.\n\n\n-\n \nname\n:\n \ntest-post-url\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ntest-post-url\n\n    \nneurons\n:\n\n      \n-\n \nuri\n:\n\n          \nurl\n:\n \nhttp://host.domain/posts\n\n          \nmethod\n:\n \nPOST\n\n          \nheaders\n:\n\n            \nContent-Type\n:\n \napplication/json\n\n            \nuser-agent\n:\n \nmy-app/0.0.1\n\n          \ndata_from_file\n:\n \n/path/to/my/payload.json\n\n\n\n\n\n\nAnd the \npayload.json\n would be (note that we don't need to escape any character):\n\n\n{\ntitle\n:\n \nfoo\n,\n \nbody\n:\n \nbar\n,\n \nuserId\n:\n \n1\n}\n\n\n\n\n\n\nA simple call to a deletion. Here we also ask Kalliope to tell use if request was a success through a template, depending on the returned status code.\n\n\n  \n-\n \nname\n:\n \ntest-delete-url\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ntest-delete-url\n\n    \nneurons\n:\n\n      \n-\n \nuri\n:\n\n          \nurl\n:\n \nhttp://host.domain/posts/1\n\n          \nmethod\n:\n \nDELETE\n\n          \nsay_template\n:\n\n            \n-\n \n{%\n \nif\n \nstatus_code==201\n \n%}delete\n \ncomplete{%\n \nelse\n \n%}fail\n \nto\n \ndelete{%\n \nendif\n \n%}\n\n\n\n\n\n\nCall to an URL to get a resource and make kalliope speaking out loud a value of returned content.\nHere, we ask the server to return us the user with ID number 42. We know that the server will return a dict like the following\n\n\n{\n\n  \nid\n:\n \n42\n,\n\n  \nname\n:\n \nLeanne Graham\n,\n\n  \nusername\n:\n \nBret\n,\n\n  \nemail\n:\n \nSincere@april.biz\n,\n\n  \nphone\n:\n \n1-770-736-8031 x56442\n,\n\n  \nwebsite\n:\n \nhildegard.org\n,\n\n  \ncompany\n:\n \n{\n\n    \nname\n:\n \nRomaguera-Crona\n,\n\n    \ncatchPhrase\n:\n \nMulti-layered client-server neural-net\n,\n\n    \nbs\n:\n \nharness real-time e-markets\n\n  \n}\n\n\n}\n\n\n\n\n\n\nHere is the synapse we would use to make Kalliope speak out loud the name of the user and the name of his company\n\n\n  \n-\n \nname\n:\n \ntest-get-url-with-template\n\n    \nsignals\n:\n\n      \n-\n \norder\n:\n \ntest-get-url-with-template\n\n    \nneurons\n:\n\n      \n-\n \nuri\n:\n\n          \nurl\n:\n \nhttp://host.domain/users/42\n\n          \nsay_template\n:\n\n            \n-\n \nThe\n \nuser\n \nname\n \nis\n \n{{\n \ncontent.name\n \n}}\n \nand\n \nhis\n \ncompany\ns\n \nname\n \nis\n \n{{\n \ncontent.company.name\n \n}}\n\n\n\n\n\n\nTemplates example\n\n\nThe following template will make kalliope read the content of the received json variable \"title\" from the remote server.\n\n\nThe title is \n{{\n \ncontent.title\n \n}}\n\n\n\n\n\n\nThe following template will make Kalliope say if the request has been made with success or not depending on the returned status code.\n\n\n{%\n \nif\n \nstatus_code\n==\n200\n \n%}\nrequest complete\n{%\n \nelse\n \n%}\nrequest failled\n{%\n \nendif\n \n%}\n\n\n\n\n\n\nNotes\n\n\n\n\nWhen the parameter \ndata\n is used, you need to escape character that could be interpreted by the YAML syntax.", 
            "title": "uri"
        }, 
        {
            "location": "/brain/neurons/uri/#input-parameters", 
            "text": "parameter  required  default  choices  comment      url  YES    HTTP or HTTPS URL in the form (http    headers  NO   E.g: Content-Type: 'application/json'  Add custom HTTP headers to a request in the format of a YAML hash    data  NO   E.g: \"{\\\"title\\\": \\\"foo\\\"}\"  JSON data to send to the server. You must escape quotes in the YAML file.    data_from_file  NO   E.g: /path/to/my/file.json  JSON data loaded from a file.    method  NO  GET  GET, POST, DELETE, PUT, HEAD, PATCH, OPTIONS  The HTTP method of the request or response. It MUST be uppercase.    user  NO    username for the basic authentication.    password  NO    passwordfor the basic authentication.    timeout  NO    The socket level timeout in seconds. Must be an integer without quotes", 
            "title": "Input parameters"
        }, 
        {
            "location": "/brain/neurons/uri/#returned-values", 
            "text": "Name  Description  Type  sample      status_code  Numeric, HTTP status code that signifies success of the request.  int  200    content  The body content of the server answer. May be JSON serialized and usable in a template  string  {\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1}    response_header  Response header from the server.  dict  {'Date': 'Sat, 19 Nov 2016 11:17:56 GMT', 'Content-Length': '192', 'Content-Type': 'text/html'}", 
            "title": "Returned values"
        }, 
        {
            "location": "/brain/neurons/uri/#synapses-example", 
            "text": "Simple call to a server. The default method is GET     -   name :   test-get-url \n     signals : \n       -   order :   test-get-url \n     neurons : \n       -   uri : \n           url :   http://host.domain/get/1   A simple call with authentication  -   name :   test-get-url-with-auth \n     signals : \n       -   order :   test-get-url-with-auth \n     neurons : \n       -   uri : \n           url :   http://host.domain/get/1 \n           user :   admin \n           password :   secret   A simple post with data inside the url  -   name :   test-post-url-with-auth \n     signals : \n       -   order :   test-post-url-with-data \n     neurons : \n       -   uri : \n           url :   http://host.domain/login?email=user@host.domain password=foobar123 \n           method :   POST   A post with json data. Note that we need to escape quotes from the payload.  -   name :   test-post-url \n     signals : \n       -   order :   test-post-url \n     neurons : \n       -   uri : \n           url :   http://host.domain/posts \n           method :   POST \n           headers : \n             Content-Type :   application/json \n           data :   {\\ id\\ :   1,\\ title\\ :   \\ foo\\ ,   \\ body\\ :   \\ bar\\ ,   \\ userId\\ :   1}   A post with json data imported from a file and a custom header.  -   name :   test-post-url \n     signals : \n       -   order :   test-post-url \n     neurons : \n       -   uri : \n           url :   http://host.domain/posts \n           method :   POST \n           headers : \n             Content-Type :   application/json \n             user-agent :   my-app/0.0.1 \n           data_from_file :   /path/to/my/payload.json   And the  payload.json  would be (note that we don't need to escape any character):  { title :   foo ,   body :   bar ,   userId :   1 }   A simple call to a deletion. Here we also ask Kalliope to tell use if request was a success through a template, depending on the returned status code.     -   name :   test-delete-url \n     signals : \n       -   order :   test-delete-url \n     neurons : \n       -   uri : \n           url :   http://host.domain/posts/1 \n           method :   DELETE \n           say_template : \n             -   {%   if   status_code==201   %}delete   complete{%   else   %}fail   to   delete{%   endif   %}   Call to an URL to get a resource and make kalliope speaking out loud a value of returned content.\nHere, we ask the server to return us the user with ID number 42. We know that the server will return a dict like the following  { \n   id :   42 , \n   name :   Leanne Graham , \n   username :   Bret , \n   email :   Sincere@april.biz , \n   phone :   1-770-736-8031 x56442 , \n   website :   hildegard.org , \n   company :   { \n     name :   Romaguera-Crona , \n     catchPhrase :   Multi-layered client-server neural-net , \n     bs :   harness real-time e-markets \n   }  }   Here is the synapse we would use to make Kalliope speak out loud the name of the user and the name of his company     -   name :   test-get-url-with-template \n     signals : \n       -   order :   test-get-url-with-template \n     neurons : \n       -   uri : \n           url :   http://host.domain/users/42 \n           say_template : \n             -   The   user   name   is   {{   content.name   }}   and   his   company s   name   is   {{   content.company.name   }}", 
            "title": "Synapses example"
        }, 
        {
            "location": "/brain/neurons/uri/#templates-example", 
            "text": "The following template will make kalliope read the content of the received json variable \"title\" from the remote server.  The title is  {{   content.title   }}   The following template will make Kalliope say if the request has been made with success or not depending on the returned status code.  {%   if   status_code == 200   %} request complete {%   else   %} request failled {%   endif   %}", 
            "title": "Templates example"
        }, 
        {
            "location": "/brain/neurons/uri/#notes", 
            "text": "When the parameter  data  is used, you need to escape character that could be interpreted by the YAML syntax.", 
            "title": "Notes"
        }, 
        {
            "location": "/brain/community_modules/", 
            "text": "Core neurons and signals are already packaged with the installation of kalliope an can be used out of the box. Community modules need to be installed manually.\n\n\n\n\nNote:\n To install a community module, you must declare your \nresource_directory\n in your \nsettings\n.\n\n\nNote:\n After installing a community module, you need tu update your brain to use it\n\n\n\n\nInstall a community module\n\n\nInstall via Kalliope CLI\n\n\nkalliope install --git-url \ngit_url\n\n\n\n\n\n\nE.g:\n\n\nkalliope install --git-url https://github.com/kalliope-project/kalliope_neuron_wikipedia.git\n\n\n\n\n\nYou may be prompted to type your \nsudo\n password during the process.\n\n\nYou can also install a module manually.\nFist, clone the repo in the right resource folder.\n\n\ncd\n /path/to/resource_folder\ngit clone \nplugin_url\n\n\n\n\n\n\nThen install it manually via Ansible (Ansible has been installed with kalliope)\n\n\ncd\n \ncloned_repo\n\nansible-playbook install.yml -K\n\n\n\n\n\nExample\n\n\ncd\n /home/me/my_kalliope_config/resources/neurons\ngit clone https://github.com/kalliope-project/kalliope_neuron_hue.git\n\ncd\n hue\nansible-playbook install.yml -K\n\n\n\n\n\nUninstall a community module\n\n\nCLI syntax\n\n\nkalliope uninstall --neuron-name \nneuron_name\n\nkalliope uninstall --tts-name \ntts_name\n\nkalliope uninstall --trigger-name \ntrigger_name\n\nkalliope uninstall --ignal-name \nsignal_name\n\n\n\n\n\n\nE.g:\n\n\nkalliope uninstall --neuron-name hue\n\n\n\n\n\nList of community modules\n\n\n\n\nCommunity neurons\n\n\nCommunity signals", 
            "title": "Community modules"
        }, 
        {
            "location": "/brain/community_modules/#install-a-community-module", 
            "text": "Install via Kalliope CLI  kalliope install --git-url  git_url   E.g:  kalliope install --git-url https://github.com/kalliope-project/kalliope_neuron_wikipedia.git  You may be prompted to type your  sudo  password during the process.  You can also install a module manually.\nFist, clone the repo in the right resource folder.  cd  /path/to/resource_folder\ngit clone  plugin_url   Then install it manually via Ansible (Ansible has been installed with kalliope)  cd   cloned_repo \nansible-playbook install.yml -K  Example  cd  /home/me/my_kalliope_config/resources/neurons\ngit clone https://github.com/kalliope-project/kalliope_neuron_hue.git cd  hue\nansible-playbook install.yml -K", 
            "title": "Install a community module"
        }, 
        {
            "location": "/brain/community_modules/#uninstall-a-community-module", 
            "text": "CLI syntax  kalliope uninstall --neuron-name  neuron_name \nkalliope uninstall --tts-name  tts_name \nkalliope uninstall --trigger-name  trigger_name \nkalliope uninstall --ignal-name  signal_name   E.g:  kalliope uninstall --neuron-name hue", 
            "title": "Uninstall a community module"
        }, 
        {
            "location": "/brain/community_modules/#list-of-community-modules", 
            "text": "Community neurons  Community signals", 
            "title": "List of community modules"
        }, 
        {
            "location": "/cli/", 
            "text": "Kalliope Command-line interface\n\n\nSYNOPSIS\n\n\nThis is the syntax used to run Kalliope from command line\n\n\nkalliope \ncommand\n --option \nargument\n\n\n\n\n\n\nFor example, to start Kalliope we simply use\n\n\nkalliope start\n\n\n\n\n\n\n\nNote:\n Do not use the CLI as root user or with sudo. Kalliope must run with standard user privileges.\n\n\n\n\nARGUMENTS\n\n\nstart\n\n\nStart Kalliope main program\n\n\nExample of use\n\n\nkalliope start\n\n\n\n\n\nTo kill Kalliope, you can press \"Ctrl-C\" on your keyboard.\n\n\ninstall\n\n\nInstall a community module. You must set an install type option. Currently the only available option is \n--git-url\n.\n\n\nSyntax\n\n\nkalliope install --git-url \nurl\n\n\n\n\n\n\nExample of use\n\n\nkalliope install --git-url https://github.com/kalliope-project/kalliope_neuron_wikipedia.git\n\n\n\n\n\nOPTIONS\n\n\nCommands can be completed by the following options:\n\n\n-v or --version\n\n\nDisplay the current isntalled version of Kalliope.\n\n\nExample of use\n\n\nkalliope --version\n\n\n\n\n\nkalliope -v\n\n\n\n\n\n--run-synapse SYNAPSE_NAME\n\n\nRun a specific synapse from the brain file.\n\n\nExample of use\n\n\nkalliope start --run-synapse \nsay-hello\n\n\n\n\n\n\n--run-order \"Your Order\"\n\n\nRun a specific order from command line.\n\n\nExample of use\n\n\nkalliope start --run-order \nhello\n\n\n\n\n\n\n--brain-file BRAIN_FILE\n\n\nReplace the default brain file from the root of the project folder by a custom one.\n\n\n\n\nImportant note:\n The path must be absolute. The absolute path contains the root directory and all other subdirectories in which a file or folder is contained.\n\n\n\n\nExample of use\n\n\nkalliope start --brain-file /home/me/my_other_brain.yml\n\n\n\n\n\nYou can combine the options together like, for example:\n\n\nkalliope start --run-synapse \nsay-hello\n --brain-file /home/me/my_other_brain.yml\n\n\n\n\n\n--deaf\n\n\nStarts Kalliope in a deaf state, the trigger is paused.\n\n\nExample of use\n\n\nkalliope start --deaf\n\n\n\n\n\nYou can combine the options together like, for example:\n\n\nkalliope start --deaf --brain-file /home/me/my_other_brain.yml\n\n\n\n\n\n--debug\n\n\nShow debug output in the console\n\n\nExample of use\n\n\nkalliope start --debug\n\n\n\n\n\n--git-url\n\n\nUsed by the \ninstall\n argument to specify the URL of a git repository of the module to install.", 
            "title": "CLI"
        }, 
        {
            "location": "/cli/#kalliope-command-line-interface", 
            "text": "", 
            "title": "Kalliope Command-line interface"
        }, 
        {
            "location": "/cli/#synopsis", 
            "text": "This is the syntax used to run Kalliope from command line  kalliope  command  --option  argument   For example, to start Kalliope we simply use  kalliope start   Note:  Do not use the CLI as root user or with sudo. Kalliope must run with standard user privileges.", 
            "title": "SYNOPSIS"
        }, 
        {
            "location": "/cli/#arguments", 
            "text": "", 
            "title": "ARGUMENTS"
        }, 
        {
            "location": "/cli/#start", 
            "text": "Start Kalliope main program  Example of use  kalliope start  To kill Kalliope, you can press \"Ctrl-C\" on your keyboard.", 
            "title": "start"
        }, 
        {
            "location": "/cli/#install", 
            "text": "Install a community module. You must set an install type option. Currently the only available option is  --git-url .  Syntax  kalliope install --git-url  url   Example of use  kalliope install --git-url https://github.com/kalliope-project/kalliope_neuron_wikipedia.git", 
            "title": "install"
        }, 
        {
            "location": "/cli/#options", 
            "text": "Commands can be completed by the following options:", 
            "title": "OPTIONS"
        }, 
        {
            "location": "/cli/#-v-or-version", 
            "text": "Display the current isntalled version of Kalliope.  Example of use  kalliope --version  kalliope -v", 
            "title": "-v or --version"
        }, 
        {
            "location": "/cli/#-run-synapse-synapse_name", 
            "text": "Run a specific synapse from the brain file.  Example of use  kalliope start --run-synapse  say-hello", 
            "title": "--run-synapse SYNAPSE_NAME"
        }, 
        {
            "location": "/cli/#-run-order-your-order", 
            "text": "Run a specific order from command line.  Example of use  kalliope start --run-order  hello", 
            "title": "--run-order \"Your Order\""
        }, 
        {
            "location": "/cli/#-brain-file-brain_file", 
            "text": "Replace the default brain file from the root of the project folder by a custom one.   Important note:  The path must be absolute. The absolute path contains the root directory and all other subdirectories in which a file or folder is contained.   Example of use  kalliope start --brain-file /home/me/my_other_brain.yml  You can combine the options together like, for example:  kalliope start --run-synapse  say-hello  --brain-file /home/me/my_other_brain.yml", 
            "title": "--brain-file BRAIN_FILE"
        }, 
        {
            "location": "/cli/#-deaf", 
            "text": "Starts Kalliope in a deaf state, the trigger is paused.  Example of use  kalliope start --deaf  You can combine the options together like, for example:  kalliope start --deaf --brain-file /home/me/my_other_brain.yml", 
            "title": "--deaf"
        }, 
        {
            "location": "/cli/#-debug", 
            "text": "Show debug output in the console  Example of use  kalliope start --debug", 
            "title": "--debug"
        }, 
        {
            "location": "/cli/#-git-url", 
            "text": "Used by the  install  argument to specify the URL of a git repository of the module to install.", 
            "title": "--git-url"
        }, 
        {
            "location": "/rest_api/", 
            "text": "Rest API\n\n\nKalliope provides the REST API to manage the synapses. For configuring the API refer to the \nsettings documentation\n.\n\n\nAPI ref\n\n\n\n\n\n\n\n\nMethod\n\n\nURL\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nGET\n\n\n/\n\n\nGet kaliope version\n\n\n\n\n\n\nGET\n\n\n/synapses\n\n\nList synapses\n\n\n\n\n\n\nGET\n\n\n/synapses/\n\n\nGet synapse details by name\n\n\n\n\n\n\nPOST\n\n\n/synapses/start/id/\n\n\nRun a synapse by its name\n\n\n\n\n\n\nPOST\n\n\n/synapses/start/order\n\n\nRun a synapse from a text order\n\n\n\n\n\n\nPOST\n\n\n/synapses/start/audio\n\n\nRun a synapse from an audio sample\n\n\n\n\n\n\nGET\n\n\n/settings/deaf\n\n\nGet the current deaf status\n\n\n\n\n\n\nPOST\n\n\n/settings/deaf\n\n\nSwitch the deaf status\n\n\n\n\n\n\nGET\n\n\n/settings/mute\n\n\nGet the current mute status\n\n\n\n\n\n\nPOST\n\n\n/settings/mute\n\n\nSwitch the mute status\n\n\n\n\n\n\nGET\n\n\n/settings/energy_threshold\n\n\nGet the current energy_threshold\n\n\n\n\n\n\nPOST\n\n\n/settings/energy_threshold\n\n\nUpdate the energy_threshold value\n\n\n\n\n\n\nGET\n\n\n/settings/ambient_noise_second\n\n\nGet the ambient_noise_second\n\n\n\n\n\n\nPOST\n\n\n/settings/ambient_noise_second\n\n\nUpdate the ambient_noise_second\n\n\n\n\n\n\nGET\n\n\n/settings/hooks\n\n\nGet the current hooks\n\n\n\n\n\n\nPOST\n\n\n/settings/hooks\n\n\nUpdate the hooks list\n\n\n\n\n\n\nGET\n\n\n/settings/variables\n\n\nGet the variables list\n\n\n\n\n\n\nPOST\n\n\n/settings/variables\n\n\nUpdate the variables list\n\n\n\n\n\n\nGET\n\n\n/settings/default_tts\n\n\nGet current tts\n\n\n\n\n\n\nPOST\n\n\n/settings/default_tts\n\n\nUpdate current tts\n\n\n\n\n\n\nGET\n\n\n/settings/default_stt\n\n\nGet current stt\n\n\n\n\n\n\nPOST\n\n\n/settings/default_stt\n\n\nUpdate current stt\n\n\n\n\n\n\nGET\n\n\n/settings/default_player\n\n\nGet the current player\n\n\n\n\n\n\nPOST\n\n\n/settings/default_player\n\n\nUpdate current player\n\n\n\n\n\n\nGET\n\n\n/settings/default_trigger\n\n\nGet the current trigger\n\n\n\n\n\n\nPOST\n\n\n/settings/default_trigger\n\n\nUpdate the current trigger\n\n\n\n\n\n\n\n\n\n\nNote:\n --user is only needed if \npassword_protected\n is True\n\n\n\n\nGet Kalliope's version\n\n\nNormal response codes: 200\nError response codes: unauthorized(401)\nCurl command:\n\n\ncurl -i --user admin:secret -X GET  http://localhost:5000/\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nKalliope version\n:\n \n0.4.2\n\n\n}\n\n\n\n\n\n\nBrain\n\n\nList synapses\n\n\nNormal response codes: 200\nError response codes: unauthorized(401), itemNotFound(404)\nCurl command:\n\n\ncurl -i --user admin:secret -X GET  http://localhost:5000/synapses\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nsynapses\n:\n \n[\n\n    \n[\n\n      \n{\n\n        \nname\n:\n \nstop-kalliope\n,\n\n        \nneurons\n:\n \n[\n\n          \n{\n\n            \nsay\n:\n \n{\n\n              \nmessage\n:\n \nGood bye\n\n            \n}\n\n          \n},\n\n          \nkill_switch\n\n        \n],\n\n        \nsignals\n:\n \n[\n\n          \n{\n\n            \norder\n:\n \nclose\n\n          \n}\n\n        \n]\n\n      \n}\n\n    \n],\n\n    \n[\n\n      \n{\n\n        \nname\n:\n \nsay-hello\n,\n\n        \nneurons\n:\n \n[\n\n          \n{\n\n            \nsay\n:\n \n{\n\n              \nmessage\n:\n \n[\n\n                \nBonjour monsieur\n\n              \n]\n\n            \n}\n\n          \n}\n\n        \n],\n\n        \nsignals\n:\n \n[\n\n          \n{\n\n            \norder\n:\n \nbonjour\n\n          \n}\n\n        \n]\n\n      \n}\n\n    \n]\n\n  \n]\n\n\n}\n\n\n\n\n\n\nShow synapse details\n\n\nNormal response codes: 200\nError response codes: unauthorized(401), itemNotFound(404)\nCurl command:\n\n\ncurl -i --user admin:secret -X GET  http://localhost:5000/synapses/say-hello\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nsynapses\n:\n \n{\n\n    \nname\n:\n \nsay-hello\n,\n\n    \nneurons\n:\n \n[\n\n      \n{\n\n        \nsay\n:\n \n{\n\n          \nmessage\n:\n \n[\n\n            \nBonjour monsieur\n\n          \n]\n\n        \n}\n\n      \n}\n\n    \n],\n\n    \nsignals\n:\n \n[\n\n      \n{\n\n        \norder\n:\n \nbonjour\n\n      \n}\n\n    \n]\n\n  \n}\n\n\n}\n\n\n\n\n\n\nRun a synapse by its name\n\n\nNormal response codes: 201\nError response codes: unauthorized(401), itemNotFound(404)\nCurl command:\n\n\ncurl -i --user admin:secret -X POST  http://localhost:5000/synapses/start/id/say-hello\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nmatched_synapses\n:\n \n[\n\n    \n{\n\n      \nmatched_order\n:\n \nnull\n,\n\n      \nneuron_module_list\n:\n \n[\n\n        \n{\n\n          \ngenerated_message\n:\n \nBonjour monsieur\n,\n\n          \nneuron_name\n:\n \nSay\n\n        \n}\n\n      \n],\n\n      \nsynapse_name\n:\n \nsay-hello-fr\n\n    \n}\n\n  \n],\n\n  \nstatus\n:\n \ncomplete\n,\n\n  \nuser_order\n:\n \nnull\n\n\n}\n\n\n\n\n\n\nThe \nmute flag\n can be added to this call.\nCurl command:\n\n\ncurl -i -H \nContent-Type: application/json\n --user admin:secret -X POST \n\\\n\n-d \n{\nmute\n:\ntrue\n}\n http://127.0.0.1:5000/synapses/start/id/say-hello-fr\n\n\n\n\n\nSome neuron inside a synapse will wait for parameters that comes from the order.\nYou can provide those parameters by adding a \nparameters\n list of data.\nCurl command:\n\n\ncurl -i -H \nContent-Type: application/json\n --user admin:secret -X POST  \n\\\n\n-d \n{\nparameters\n: {\nparameter1\n: \nvalue1\n }}\n \n\\\n\nhttp://127.0.0.1:5000/synapses/start/id/synapse-id\n\n\n\n\n\nRun a synapse from an order\n\n\nNormal response codes: 201\nError response codes: unauthorized(401), itemNotFound(404)\n\n\nCurl command:\n\n\ncurl -i --user admin:secret -H \nContent-Type: application/json\n -X POST -d \n{\norder\n:\nmy order\n}\n http://localhost:5000/synapses/start/order\n\n\n\n\n\nIf the order contains accent or quotes, use a file for testing with curl\n\n\ncat post.json\n\n{\norder\n:\nj\naime\n}\n\n\n\n\n\n\nThen\n\n\ncurl -i --user admin:secret -H \nContent-Type: application/json\n -X POST --data @post.json http://localhost:5000/synapses/start/order\n\n\n\n\n\nOutput example if the order have matched and so launched synapses:\n\n\n{\n\n  \nmatched_synapses\n:\n \n[\n\n    \n{\n\n      \nmatched_order\n:\n \nBonjour\n,\n\n      \nneuron_module_list\n:\n \n[\n\n        \n{\n\n          \ngenerated_message\n:\n \nBonjour monsieur\n,\n\n          \nneuron_name\n:\n \nSay\n\n        \n}\n\n      \n],\n\n      \nsynapse_name\n:\n \nsay-hello-fr\n\n    \n}\n\n  \n],\n\n  \nstatus\n:\n \ncomplete\n,\n\n  \nuser_order\n:\n \nbonjour\n\n\n}\n\n\n\n\n\n\nIf the order haven't match any synapses it will try to run the default synapse if it exists in your settings:\n\n\n{\n\n  \nmatched_synapses\n:\n \n[\n\n    \n{\n\n      \nmatched_order\n:\n \nnull\n,\n\n      \nneuron_module_list\n:\n \n[\n\n        \n{\n\n          \ngenerated_message\n:\n \nJe n\nai pas compris votre ordre\n,\n\n          \nneuron_name\n:\n \nSay\n\n        \n}\n\n      \n],\n\n      \nsynapse_name\n:\n \ndefault-synapse\n\n    \n}\n\n  \n],\n\n  \nstatus\n:\n \ncomplete\n,\n\n  \nuser_order\n:\n \nnot existing order\n\n\n}\n\n\n\n\n\n\nOr return an empty list of matched synapse\n\n\n{\n  \nmatched_synapses\n: [],\n  \nstatus\n: null,\n  \nuser_order\n: \nnot existing order\n\n}\n\n\n\n\n\nThe \nmute flag\n can be added to this call.\nCurl command:\n\n\ncurl -i --user admin:secret -H \nContent-Type: application/json\n -X POST \n\\\n\n-d \n{\norder\n:\nmy order\n, \nmute\n:\ntrue\n}\n http://localhost:5000/synapses/start/order\n\n\n\n\n\nRun a synapse from an audio file\n\n\nNormal response codes: 201\nError response codes: unauthorized(401), itemNotFound(404)\n\n\nThe audio file must use WAV or MP3 extension.\n\n\nCurl command:\n\n\ncurl -i --user admin:secret -X POST  http://localhost:5000/synapses/start/audio -F \nfile=@/home/nico/Desktop/input.wav\n\n\n\n\n\n\nOutput example if the order inside the audio have matched and so launched synapses:\n\n\n{\n\n  \nmatched_synapses\n:\n \n[\n\n    \n{\n\n      \nmatched_order\n:\n \nBonjour\n,\n\n      \nneuron_module_list\n:\n \n[\n\n        \n{\n\n          \ngenerated_message\n:\n \nBonjour monsieur\n,\n\n          \nneuron_name\n:\n \nSay\n\n        \n}\n\n      \n],\n\n      \nsynapse_name\n:\n \nsay-hello-fr\n\n    \n}\n\n  \n],\n\n  \nstatus\n:\n \ncomplete\n,\n\n  \nuser_order\n:\n \nbonjour\n\n\n}\n\n\n\n\n\n\nIf the order haven't match any synapses it will try to run the default synapse if it exists in your settings:\n\n\n{\n\n  \nmatched_synapses\n:\n \n[\n\n    \n{\n\n      \nmatched_order\n:\n \nnull\n,\n\n      \nneuron_module_list\n:\n \n[\n\n        \n{\n\n          \ngenerated_message\n:\n \nJe n\nai pas compris votre ordre\n,\n\n          \nneuron_name\n:\n \nSay\n\n        \n}\n\n      \n],\n\n      \nsynapse_name\n:\n \ndefault-synapse\n\n    \n}\n\n  \n],\n\n  \nstatus\n:\n \ncomplete\n,\n\n  \nuser_order\n:\n \nnot existing order\n\n\n}\n\n\n\n\n\n\nOr return an empty list of matched synapse\n\n\n{\n\n  \nmatched_synapses\n:\n \n[],\n\n  \nstatus\n:\n \nnull\n,\n\n  \nuser_order\n:\n \nnot existing order\n\n\n}\n\n\n\n\n\n\nThe \nmute flag\n can be added to this call with a form.\nCurl command:\n\n\ncurl -i --user admin:secret -X POST http://localhost:5000/synapses/start/audio -F \nfile=@path/to/file.wav\n -F \nmute\n=\ntrue\n\n\n\n\n\n\nThe neurotransmitter case\n\n\nIn case of leveraging the \nneurotransmitter neuron\n, Kalliope expects back and forth answers.\nFortunately, the API provides a way to continue interaction with Kalliope and still use neurotransmitter neurons while doing API calls.\n\n\nWhen you start a synapse via its name or an order (like shown above), the answer of the API call will tell you in the response that kalliope is waiting for a response via the \"status\" return.\n\n\nStatus can either by \ncomplete\n (nothing else to do) or \nwaiting_for_answer\n, in which case Kalliope is waiting for your response :).\n\n\nIn this case, you can launch another order containing your response.\n\n\nLet's take as an example the simple \nneurotransmitter brain of the EN starter kit\n:\n\n\nFirst step is to fire the \"ask me a question order\":\n\n\ncurl -i --user admin:secret -H \nContent-Type: application/json\n -X POST -d \n{\norder\n:\nask me a question\n}\n http://localhost:5000/synapses/start/order\n\n\n\n\n\nThe response should be as follow:\n\n\n{\n\n  \nmatched_synapses\n:\n \n[\n\n    \n{\n\n      \nmatched_order\n:\n \nask me a question\n,\n\n      \nneuron_module_list\n:\n \n[\n\n        \n{\n\n          \ngenerated_message\n:\n \ndo you like french fries?\n,\n\n          \nneuron_name\n:\n \nSay\n\n        \n}\n\n      \n],\n\n      \nsynapse_name\n:\n \nsynapse1\n\n    \n}\n\n  \n],\n\n  \nstatus\n:\n \nwaiting_for_answer\n,\n\n  \nuser_order\n:\n \nask me a question\n\n\n}\n\n\n\n\n\n\nThe \n\"status\": \"waiting_for_answer\"\n indicates that it waits for a response, so let's send it:\n\n\ncurl -i --user admin:secret -H \nContent-Type: application/json\n -X POST -d \n{\norder\n:\nnot at all\n}\n http://localhost:5000/synapses/start/order\n\n\n\n\n\n{\n\n  \nmatched_synapses\n:\n \n[\n\n    \n{\n\n      \nmatched_order\n:\n \nask me a question\n,\n\n      \nneuron_module_list\n:\n \n[\n\n        \n{\n\n          \ngenerated_message\n:\n \ndo you like french fries?\n,\n\n          \nneuron_name\n:\n \nSay\n\n        \n},\n\n        \n{\n\n          \ngenerated_message\n:\n \nnull\n,\n\n          \nneuron_name\n:\n \nNeurotransmitter\n\n        \n}\n\n      \n],\n\n      \nsynapse_name\n:\n \nsynapse1\n\n    \n},\n\n    \n{\n\n      \nmatched_order\n:\n \nnot at all\n,\n\n      \nneuron_module_list\n:\n \n[\n\n        \n{\n\n          \ngenerated_message\n:\n \nYou don\nt like french fries.\n,\n\n          \nneuron_name\n:\n \nSay\n\n        \n}\n\n      \n],\n\n      \nsynapse_name\n:\n \nsynapse3\n\n    \n}\n\n  \n],\n\n  \nstatus\n:\n \ncomplete\n,\n\n  \nuser_order\n:\n \nnull\n\n\n}\n\n\n\n\n\n\nAnd now the status is complete. This works also when you have nested neurotransmitter neurons, you just need to keep monitoring the status from the API answer.\n\n\nSettings\n\n\nGet current settings\n\n\nNormal response codes: 200\nError response codes: unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nsettings\n:\n \n{\n\n    \ncache_path\n:\n \n/tmp/kalliope_tts_cache\n,\n\n    \ndefault_player_name\n:\n \nmplayer\n,\n\n    \ndefault_stt_name\n:\n \ngoogle\n,\n\n    \ndefault_trigger_name\n:\n \nsnowboy\n,\n\n    \ndefault_tts_name\n:\n \npico2wave\n,\n\n    \nhooks\n:\n \n{\n\n      \non_deaf\n:\n \nnull\n,\n\n      \non_mute\n:\n \nnull\n,\n\n      \non_order_found\n:\n \nnull\n,\n\n      \non_order_not_found\n:\n \norder-not-found-synapse\n,\n\n      \non_processed_synapses\n:\n \nnull\n,\n\n      \non_start\n:\n \non-start-synapse\n,\n\n      \non_start_listening\n:\n \nnull\n,\n\n      \non_start_speaking\n:\n \nnull\n,\n\n      \non_stop_listening\n:\n \nnull\n,\n\n      \non_stop_speaking\n:\n \nnull\n,\n\n      \non_stt_error\n:\n \nnull\n,\n\n      \non_triggered\n:\n \non-triggered-synapse\n,\n\n      \non_undeaf\n:\n \nnull\n,\n\n      \non_unmute\n:\n \nnull\n,\n\n      \non_waiting_for_trigger\n:\n \nnull\n\n    \n},\n\n    \nkalliope_version\n:\n \n0.5.1b\n,\n\n    \nmachine\n:\n \nx86_64\n,\n\n    \noptions\n:\n \n{\n\n      \nadjust_for_ambient_noise_second\n:\n \n0\n,\n\n      \ndeaf\n:\n \nfalse\n,\n\n      \nenergy_threshold\n:\n \n4000\n,\n\n      \nmute\n:\n \nfalse\n,\n\n      \nname\n:\n \nOptions\n,\n\n      \nstt_timeout\n:\n \n0\n\n    \n},\n\n    \nplayers\n:\n \n[\n\n      \n{\n\n        \nname\n:\n \nmplayer\n,\n\n        \nparameters\n:\n \n{}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \npyalsaaudio\n,\n\n        \nparameters\n:\n \n{\n\n          \nconvert_to_wav\n:\n \ntrue\n,\n\n          \ndevice\n:\n \ndefault\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \npyaudioplayer\n,\n\n        \nparameters\n:\n \n{\n\n          \nconvert_to_wav\n:\n \ntrue\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \nsounddeviceplayer\n,\n\n        \nparameters\n:\n \n{\n\n          \nconvert_to_wav\n:\n \ntrue\n\n        \n}\n\n      \n}\n\n    \n],\n\n    \nresources\n:\n \n{\n\n      \nneuron_folder\n:\n \nnull\n,\n\n      \nsignal_folder\n:\n \nnull\n,\n\n      \nstt_folder\n:\n \nnull\n,\n\n      \ntrigger_folder\n:\n \nnull\n,\n\n      \ntts_folder\n:\n \nnull\n\n    \n},\n\n    \nrest_api\n:\n \n{\n\n      \nactive\n:\n \ntrue\n,\n\n      \nallowed_cors_origin\n:\n \nfalse\n,\n\n      \nlogin\n:\n \nadmin\n,\n\n      \npassword\n:\n \nsecret\n,\n\n      \npassword_protected\n:\n \ntrue\n,\n\n      \nport\n:\n \n5000\n\n    \n},\n\n    \nstts\n:\n \n[\n\n      \n{\n\n        \nname\n:\n \ngoogle\n,\n\n        \nparameters\n:\n \n{\n\n          \nlanguage\n:\n \nfr-FR\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \nwit\n,\n\n        \nparameters\n:\n \n{\n\n          \nkey\n:\n \nfakekey\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \nbing\n,\n\n        \nparameters\n:\n \n{\n\n          \nkey\n:\n \nfakekey\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \napiai\n,\n\n        \nparameters\n:\n \n{\n\n          \nkey\n:\n \nfakekey\n,\n\n          \nlanguage\n:\n \nfr\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \nhoundify\n,\n\n        \nparameters\n:\n \n{\n\n          \nclient_id\n:\n \nfakeclientid\n,\n\n          \nkey\n:\n \nfakekey\n\n        \n}\n\n      \n}\n\n    \n],\n\n    \ntriggers\n:\n \n[\n\n      \n{\n\n        \nname\n:\n \nsnowboy\n,\n\n        \nparameters\n:\n \n{\n\n          \npmdl_file\n:\n \ntrigger/snowboy/resources/kalliope-FR-40samples.pmdl\n\n        \n}\n\n      \n}\n\n    \n],\n\n    \nttss\n:\n \n[\n\n      \n{\n\n        \nname\n:\n \npico2wave\n,\n\n        \nparameters\n:\n \n{\n\n          \ncache\n:\n \ntrue\n,\n\n          \nlanguage\n:\n \nfr-FR\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \ngoogletts\n,\n\n        \nparameters\n:\n \n{\n\n          \ncache\n:\n \ntrue\n,\n\n          \nlanguage\n:\n \nfr\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \nvoicerss\n,\n\n        \nparameters\n:\n \n{\n\n          \ncache\n:\n \ntrue\n,\n\n          \nkey\n:\n \nAPI_Key\n,\n\n          \nlanguage\n:\n \nfr-fr\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \nname\n:\n \nwatson\n,\n\n        \nparameters\n:\n \n{\n\n          \npassword\n:\n \npassword\n,\n\n          \nusername\n:\n \nme\n,\n\n          \nvoice\n:\n \nfr-FR_ReneeVoice\n\n        \n}\n\n      \n}\n\n    \n],\n\n    \nvariables\n:\n \n{}\n\n  \n}\n\n\n}\n\n\n\n\n\n\nDeaf\n\n\nGet deaf status\n\n\nNormal response codes: 200\nError response codes: unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/deaf\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \ndeaf\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nSwitch deaf status\n\n\nKalliope can switch to 'deaf' mode, so she can not ear you anymore, the trigger/hotword is desactivated.\nHowever Kalliope continues to process synapses.\n\n\nNormal response codes: 200\nError response codes: unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i -H \nContent-Type: application/json\n --user admin:secret  -X POST -d \n{\ndeaf\n: \nTrue\n}\n http://127.0.0.1:5000/deaf\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \ndeaf\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nMute\n\n\nWhen you use the API, by default Kalliope will generate a text and process it into the TTS engine.\nSome calls to the API can be done with a flag that will tell Kalliope to only return the generated text without processing it into the audio player.\nWhen \nmute\n is switched to true, Kalliope will not speak out loud on the server side.\n\n\nGet mute status\n\n\nNormal response codes: 200\nError response codes : unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/mute\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nmute\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nSet mute status\n\n\nNormal response codes: 200\nError response codes : unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i -H \nContent-Type: application/json\n --user admin:secret  -X POST -d \n{\nmute\n: \nTrue\n}\n http://127.0.0.1:5000/mute\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nmute\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\nenergy_threshold\n\n\nDefine the \nenergy_threshold\n in the settings.\n\n\nGet energy_threshold status\n\n\nNormal response codes: 200\nError response codes : unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/energy_threshold\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nenergy_threshold\n:\n \n4000\n\n\n}\n\n\n\n\n\n\nSet energy_threshold status\n\n\nNormal response codes: 200\nError response codes : unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i -H \nContent-Type: application/json\n --user admin:secret  -X POST -d \n{\nenergy_threshold\n: 4000}\n http://127.0.0.1:5000/settings/energy_threshold\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nenergy_threshold\n:\n \n4000\n\n\n}\n\n\n\n\n\n\nVariables\n\n\nGet variables list\n\n\nNormal response codes: 200\nError response codes : unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/variables\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nvariables\n:\n \n{\n\n    \nmy_variable\n:\n \nblabla\n,\n\n    \nnickname\n:\n \nmonf\n\n  \n}\n\n\n}\n\n\n\n\n\n\nUpdate Variables\n\n\nNormal response codes: 200\nError response codes : unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i -H \nContent-Type: application/json\n --user admin:secret  -X POST -d \n{\nmySecondVariable\n: \nSecondValue\n, \nNickname2\n: \nNico\n}\n http://127.0.0.1:5000/settings/variables\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \nvariables\n:\n \n{\n\n    \nmy_variable \n:\n \nblabla\n,\n\n    \nnickname\n:\n \nmonf\n,\n\n    \nmysecondVariable\n:\n \nSecondValue\n,\n\n    \nNickname2\n:\n \nNico\n\n  \n}\n\n\n}\n\n\n\n\n\n\ndefault tts, stt, player, trigger\n\n\nGet\n\n\nNormal response codes: 200\nError response codes : unauthorized(401), Bad request(400)\n\n\nCurl command:\n\n\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/default_tts\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/default_stt\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/default_player\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/default_trigger\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \ndefault_tts\n:\n \npico2wave\n\n\n}\n\n\n\n\n\n\nUpdate\n\n\nNormal response codes: 200\nError response codes : unauthorized(401), Bad request(400)\n\n\n/!\\ Note: To update a tts, stt, player, trigger it should be properly defined in the 'settings.yml' in the corresponding list.\n\n\nCurl command:\n\n\ncurl -i -H \nContent-Type: application/json\n --user admin:secret  -X POST -d \n{\ndefault_tts\n: \npico2wave\n}\n http://127.0.0.1:5000/settings/default_tts\n\n\n\n\n\nOutput example:\n\n\n{\n\n  \ndefault_tts\n:\n \ngoogletts\n\n\n}", 
            "title": "API"
        }, 
        {
            "location": "/rest_api/#rest-api", 
            "text": "Kalliope provides the REST API to manage the synapses. For configuring the API refer to the  settings documentation .", 
            "title": "Rest API"
        }, 
        {
            "location": "/rest_api/#api-ref", 
            "text": "Method  URL  Action      GET  /  Get kaliope version    GET  /synapses  List synapses    GET  /synapses/  Get synapse details by name    POST  /synapses/start/id/  Run a synapse by its name    POST  /synapses/start/order  Run a synapse from a text order    POST  /synapses/start/audio  Run a synapse from an audio sample    GET  /settings/deaf  Get the current deaf status    POST  /settings/deaf  Switch the deaf status    GET  /settings/mute  Get the current mute status    POST  /settings/mute  Switch the mute status    GET  /settings/energy_threshold  Get the current energy_threshold    POST  /settings/energy_threshold  Update the energy_threshold value    GET  /settings/ambient_noise_second  Get the ambient_noise_second    POST  /settings/ambient_noise_second  Update the ambient_noise_second    GET  /settings/hooks  Get the current hooks    POST  /settings/hooks  Update the hooks list    GET  /settings/variables  Get the variables list    POST  /settings/variables  Update the variables list    GET  /settings/default_tts  Get current tts    POST  /settings/default_tts  Update current tts    GET  /settings/default_stt  Get current stt    POST  /settings/default_stt  Update current stt    GET  /settings/default_player  Get the current player    POST  /settings/default_player  Update current player    GET  /settings/default_trigger  Get the current trigger    POST  /settings/default_trigger  Update the current trigger      Note:  --user is only needed if  password_protected  is True", 
            "title": "API ref"
        }, 
        {
            "location": "/rest_api/#get-kalliopes-version", 
            "text": "Normal response codes: 200\nError response codes: unauthorized(401)\nCurl command:  curl -i --user admin:secret -X GET  http://localhost:5000/  Output example:  { \n   Kalliope version :   0.4.2  }", 
            "title": "Get Kalliope's version"
        }, 
        {
            "location": "/rest_api/#brain", 
            "text": "", 
            "title": "Brain"
        }, 
        {
            "location": "/rest_api/#list-synapses", 
            "text": "Normal response codes: 200\nError response codes: unauthorized(401), itemNotFound(404)\nCurl command:  curl -i --user admin:secret -X GET  http://localhost:5000/synapses  Output example:  { \n   synapses :   [ \n     [ \n       { \n         name :   stop-kalliope , \n         neurons :   [ \n           { \n             say :   { \n               message :   Good bye \n             } \n           }, \n           kill_switch \n         ], \n         signals :   [ \n           { \n             order :   close \n           } \n         ] \n       } \n     ], \n     [ \n       { \n         name :   say-hello , \n         neurons :   [ \n           { \n             say :   { \n               message :   [ \n                 Bonjour monsieur \n               ] \n             } \n           } \n         ], \n         signals :   [ \n           { \n             order :   bonjour \n           } \n         ] \n       } \n     ] \n   ]  }", 
            "title": "List synapses"
        }, 
        {
            "location": "/rest_api/#show-synapse-details", 
            "text": "Normal response codes: 200\nError response codes: unauthorized(401), itemNotFound(404)\nCurl command:  curl -i --user admin:secret -X GET  http://localhost:5000/synapses/say-hello  Output example:  { \n   synapses :   { \n     name :   say-hello , \n     neurons :   [ \n       { \n         say :   { \n           message :   [ \n             Bonjour monsieur \n           ] \n         } \n       } \n     ], \n     signals :   [ \n       { \n         order :   bonjour \n       } \n     ] \n   }  }", 
            "title": "Show synapse details"
        }, 
        {
            "location": "/rest_api/#run-a-synapse-by-its-name", 
            "text": "Normal response codes: 201\nError response codes: unauthorized(401), itemNotFound(404)\nCurl command:  curl -i --user admin:secret -X POST  http://localhost:5000/synapses/start/id/say-hello  Output example:  { \n   matched_synapses :   [ \n     { \n       matched_order :   null , \n       neuron_module_list :   [ \n         { \n           generated_message :   Bonjour monsieur , \n           neuron_name :   Say \n         } \n       ], \n       synapse_name :   say-hello-fr \n     } \n   ], \n   status :   complete , \n   user_order :   null  }   The  mute flag  can be added to this call.\nCurl command:  curl -i -H  Content-Type: application/json  --user admin:secret -X POST  \\ \n-d  { mute : true }  http://127.0.0.1:5000/synapses/start/id/say-hello-fr  Some neuron inside a synapse will wait for parameters that comes from the order.\nYou can provide those parameters by adding a  parameters  list of data.\nCurl command:  curl -i -H  Content-Type: application/json  --user admin:secret -X POST   \\ \n-d  { parameters : { parameter1 :  value1  }}   \\ \nhttp://127.0.0.1:5000/synapses/start/id/synapse-id", 
            "title": "Run a synapse by its name"
        }, 
        {
            "location": "/rest_api/#run-a-synapse-from-an-order", 
            "text": "Normal response codes: 201\nError response codes: unauthorized(401), itemNotFound(404)  Curl command:  curl -i --user admin:secret -H  Content-Type: application/json  -X POST -d  { order : my order }  http://localhost:5000/synapses/start/order  If the order contains accent or quotes, use a file for testing with curl  cat post.json { order : j aime }   Then  curl -i --user admin:secret -H  Content-Type: application/json  -X POST --data @post.json http://localhost:5000/synapses/start/order  Output example if the order have matched and so launched synapses:  { \n   matched_synapses :   [ \n     { \n       matched_order :   Bonjour , \n       neuron_module_list :   [ \n         { \n           generated_message :   Bonjour monsieur , \n           neuron_name :   Say \n         } \n       ], \n       synapse_name :   say-hello-fr \n     } \n   ], \n   status :   complete , \n   user_order :   bonjour  }   If the order haven't match any synapses it will try to run the default synapse if it exists in your settings:  { \n   matched_synapses :   [ \n     { \n       matched_order :   null , \n       neuron_module_list :   [ \n         { \n           generated_message :   Je n ai pas compris votre ordre , \n           neuron_name :   Say \n         } \n       ], \n       synapse_name :   default-synapse \n     } \n   ], \n   status :   complete , \n   user_order :   not existing order  }   Or return an empty list of matched synapse  {\n   matched_synapses : [],\n   status : null,\n   user_order :  not existing order \n}  The  mute flag  can be added to this call.\nCurl command:  curl -i --user admin:secret -H  Content-Type: application/json  -X POST  \\ \n-d  { order : my order ,  mute : true }  http://localhost:5000/synapses/start/order", 
            "title": "Run a synapse from an order"
        }, 
        {
            "location": "/rest_api/#run-a-synapse-from-an-audio-file", 
            "text": "Normal response codes: 201\nError response codes: unauthorized(401), itemNotFound(404)  The audio file must use WAV or MP3 extension.  Curl command:  curl -i --user admin:secret -X POST  http://localhost:5000/synapses/start/audio -F  file=@/home/nico/Desktop/input.wav   Output example if the order inside the audio have matched and so launched synapses:  { \n   matched_synapses :   [ \n     { \n       matched_order :   Bonjour , \n       neuron_module_list :   [ \n         { \n           generated_message :   Bonjour monsieur , \n           neuron_name :   Say \n         } \n       ], \n       synapse_name :   say-hello-fr \n     } \n   ], \n   status :   complete , \n   user_order :   bonjour  }   If the order haven't match any synapses it will try to run the default synapse if it exists in your settings:  { \n   matched_synapses :   [ \n     { \n       matched_order :   null , \n       neuron_module_list :   [ \n         { \n           generated_message :   Je n ai pas compris votre ordre , \n           neuron_name :   Say \n         } \n       ], \n       synapse_name :   default-synapse \n     } \n   ], \n   status :   complete , \n   user_order :   not existing order  }   Or return an empty list of matched synapse  { \n   matched_synapses :   [], \n   status :   null , \n   user_order :   not existing order  }   The  mute flag  can be added to this call with a form.\nCurl command:  curl -i --user admin:secret -X POST http://localhost:5000/synapses/start/audio -F  file=@path/to/file.wav  -F  mute = true", 
            "title": "Run a synapse from an audio file"
        }, 
        {
            "location": "/rest_api/#the-neurotransmitter-case", 
            "text": "In case of leveraging the  neurotransmitter neuron , Kalliope expects back and forth answers.\nFortunately, the API provides a way to continue interaction with Kalliope and still use neurotransmitter neurons while doing API calls.  When you start a synapse via its name or an order (like shown above), the answer of the API call will tell you in the response that kalliope is waiting for a response via the \"status\" return.  Status can either by  complete  (nothing else to do) or  waiting_for_answer , in which case Kalliope is waiting for your response :).  In this case, you can launch another order containing your response.  Let's take as an example the simple  neurotransmitter brain of the EN starter kit :  First step is to fire the \"ask me a question order\":  curl -i --user admin:secret -H  Content-Type: application/json  -X POST -d  { order : ask me a question }  http://localhost:5000/synapses/start/order  The response should be as follow:  { \n   matched_synapses :   [ \n     { \n       matched_order :   ask me a question , \n       neuron_module_list :   [ \n         { \n           generated_message :   do you like french fries? , \n           neuron_name :   Say \n         } \n       ], \n       synapse_name :   synapse1 \n     } \n   ], \n   status :   waiting_for_answer , \n   user_order :   ask me a question  }   The  \"status\": \"waiting_for_answer\"  indicates that it waits for a response, so let's send it:  curl -i --user admin:secret -H  Content-Type: application/json  -X POST -d  { order : not at all }  http://localhost:5000/synapses/start/order  { \n   matched_synapses :   [ \n     { \n       matched_order :   ask me a question , \n       neuron_module_list :   [ \n         { \n           generated_message :   do you like french fries? , \n           neuron_name :   Say \n         }, \n         { \n           generated_message :   null , \n           neuron_name :   Neurotransmitter \n         } \n       ], \n       synapse_name :   synapse1 \n     }, \n     { \n       matched_order :   not at all , \n       neuron_module_list :   [ \n         { \n           generated_message :   You don t like french fries. , \n           neuron_name :   Say \n         } \n       ], \n       synapse_name :   synapse3 \n     } \n   ], \n   status :   complete , \n   user_order :   null  }   And now the status is complete. This works also when you have nested neurotransmitter neurons, you just need to keep monitoring the status from the API answer.", 
            "title": "The neurotransmitter case"
        }, 
        {
            "location": "/rest_api/#settings", 
            "text": "", 
            "title": "Settings"
        }, 
        {
            "location": "/rest_api/#get-current-settings", 
            "text": "Normal response codes: 200\nError response codes: unauthorized(401), Bad request(400)  Curl command:  curl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings  Output example:  { \n   settings :   { \n     cache_path :   /tmp/kalliope_tts_cache , \n     default_player_name :   mplayer , \n     default_stt_name :   google , \n     default_trigger_name :   snowboy , \n     default_tts_name :   pico2wave , \n     hooks :   { \n       on_deaf :   null , \n       on_mute :   null , \n       on_order_found :   null , \n       on_order_not_found :   order-not-found-synapse , \n       on_processed_synapses :   null , \n       on_start :   on-start-synapse , \n       on_start_listening :   null , \n       on_start_speaking :   null , \n       on_stop_listening :   null , \n       on_stop_speaking :   null , \n       on_stt_error :   null , \n       on_triggered :   on-triggered-synapse , \n       on_undeaf :   null , \n       on_unmute :   null , \n       on_waiting_for_trigger :   null \n     }, \n     kalliope_version :   0.5.1b , \n     machine :   x86_64 , \n     options :   { \n       adjust_for_ambient_noise_second :   0 , \n       deaf :   false , \n       energy_threshold :   4000 , \n       mute :   false , \n       name :   Options , \n       stt_timeout :   0 \n     }, \n     players :   [ \n       { \n         name :   mplayer , \n         parameters :   {} \n       }, \n       { \n         name :   pyalsaaudio , \n         parameters :   { \n           convert_to_wav :   true , \n           device :   default \n         } \n       }, \n       { \n         name :   pyaudioplayer , \n         parameters :   { \n           convert_to_wav :   true \n         } \n       }, \n       { \n         name :   sounddeviceplayer , \n         parameters :   { \n           convert_to_wav :   true \n         } \n       } \n     ], \n     resources :   { \n       neuron_folder :   null , \n       signal_folder :   null , \n       stt_folder :   null , \n       trigger_folder :   null , \n       tts_folder :   null \n     }, \n     rest_api :   { \n       active :   true , \n       allowed_cors_origin :   false , \n       login :   admin , \n       password :   secret , \n       password_protected :   true , \n       port :   5000 \n     }, \n     stts :   [ \n       { \n         name :   google , \n         parameters :   { \n           language :   fr-FR \n         } \n       }, \n       { \n         name :   wit , \n         parameters :   { \n           key :   fakekey \n         } \n       }, \n       { \n         name :   bing , \n         parameters :   { \n           key :   fakekey \n         } \n       }, \n       { \n         name :   apiai , \n         parameters :   { \n           key :   fakekey , \n           language :   fr \n         } \n       }, \n       { \n         name :   houndify , \n         parameters :   { \n           client_id :   fakeclientid , \n           key :   fakekey \n         } \n       } \n     ], \n     triggers :   [ \n       { \n         name :   snowboy , \n         parameters :   { \n           pmdl_file :   trigger/snowboy/resources/kalliope-FR-40samples.pmdl \n         } \n       } \n     ], \n     ttss :   [ \n       { \n         name :   pico2wave , \n         parameters :   { \n           cache :   true , \n           language :   fr-FR \n         } \n       }, \n       { \n         name :   googletts , \n         parameters :   { \n           cache :   true , \n           language :   fr \n         } \n       }, \n       { \n         name :   voicerss , \n         parameters :   { \n           cache :   true , \n           key :   API_Key , \n           language :   fr-fr \n         } \n       }, \n       { \n         name :   watson , \n         parameters :   { \n           password :   password , \n           username :   me , \n           voice :   fr-FR_ReneeVoice \n         } \n       } \n     ], \n     variables :   {} \n   }  }", 
            "title": "Get current settings"
        }, 
        {
            "location": "/rest_api/#deaf", 
            "text": "", 
            "title": "Deaf"
        }, 
        {
            "location": "/rest_api/#get-deaf-status", 
            "text": "Normal response codes: 200\nError response codes: unauthorized(401), Bad request(400)  Curl command:  curl -i --user admin:secret  -X GET  http://127.0.0.1:5000/deaf  Output example:  { \n   deaf :   true  }", 
            "title": "Get deaf status"
        }, 
        {
            "location": "/rest_api/#switch-deaf-status", 
            "text": "Kalliope can switch to 'deaf' mode, so she can not ear you anymore, the trigger/hotword is desactivated.\nHowever Kalliope continues to process synapses.  Normal response codes: 200\nError response codes: unauthorized(401), Bad request(400)  Curl command:  curl -i -H  Content-Type: application/json  --user admin:secret  -X POST -d  { deaf :  True }  http://127.0.0.1:5000/deaf  Output example:  { \n   deaf :   true  }", 
            "title": "Switch deaf status"
        }, 
        {
            "location": "/rest_api/#mute", 
            "text": "When you use the API, by default Kalliope will generate a text and process it into the TTS engine.\nSome calls to the API can be done with a flag that will tell Kalliope to only return the generated text without processing it into the audio player.\nWhen  mute  is switched to true, Kalliope will not speak out loud on the server side.", 
            "title": "Mute"
        }, 
        {
            "location": "/rest_api/#get-mute-status", 
            "text": "Normal response codes: 200\nError response codes : unauthorized(401), Bad request(400)  Curl command:  curl -i --user admin:secret  -X GET  http://127.0.0.1:5000/mute  Output example:  { \n   mute :   true  }", 
            "title": "Get mute status"
        }, 
        {
            "location": "/rest_api/#set-mute-status", 
            "text": "Normal response codes: 200\nError response codes : unauthorized(401), Bad request(400)  Curl command:  curl -i -H  Content-Type: application/json  --user admin:secret  -X POST -d  { mute :  True }  http://127.0.0.1:5000/mute  Output example:  { \n   mute :   true  }", 
            "title": "Set mute status"
        }, 
        {
            "location": "/rest_api/#energy_threshold", 
            "text": "Define the  energy_threshold  in the settings.", 
            "title": "energy_threshold"
        }, 
        {
            "location": "/rest_api/#get-energy_threshold-status", 
            "text": "Normal response codes: 200\nError response codes : unauthorized(401), Bad request(400)  Curl command:  curl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/energy_threshold  Output example:  { \n   energy_threshold :   4000  }", 
            "title": "Get energy_threshold status"
        }, 
        {
            "location": "/rest_api/#set-energy_threshold-status", 
            "text": "Normal response codes: 200\nError response codes : unauthorized(401), Bad request(400)  Curl command:  curl -i -H  Content-Type: application/json  --user admin:secret  -X POST -d  { energy_threshold : 4000}  http://127.0.0.1:5000/settings/energy_threshold  Output example:  { \n   energy_threshold :   4000  }", 
            "title": "Set energy_threshold status"
        }, 
        {
            "location": "/rest_api/#variables", 
            "text": "", 
            "title": "Variables"
        }, 
        {
            "location": "/rest_api/#get-variables-list", 
            "text": "Normal response codes: 200\nError response codes : unauthorized(401), Bad request(400)  Curl command:  curl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/variables  Output example:  { \n   variables :   { \n     my_variable :   blabla , \n     nickname :   monf \n   }  }", 
            "title": "Get variables list"
        }, 
        {
            "location": "/rest_api/#update-variables", 
            "text": "Normal response codes: 200\nError response codes : unauthorized(401), Bad request(400)  Curl command:  curl -i -H  Content-Type: application/json  --user admin:secret  -X POST -d  { mySecondVariable :  SecondValue ,  Nickname2 :  Nico }  http://127.0.0.1:5000/settings/variables  Output example:  { \n   variables :   { \n     my_variable  :   blabla , \n     nickname :   monf , \n     mysecondVariable :   SecondValue , \n     Nickname2 :   Nico \n   }  }", 
            "title": "Update Variables"
        }, 
        {
            "location": "/rest_api/#default-tts-stt-player-trigger", 
            "text": "", 
            "title": "default tts, stt, player, trigger"
        }, 
        {
            "location": "/rest_api/#get", 
            "text": "Normal response codes: 200\nError response codes : unauthorized(401), Bad request(400)  Curl command:  curl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/default_tts\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/default_stt\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/default_player\ncurl -i --user admin:secret  -X GET  http://127.0.0.1:5000/settings/default_trigger  Output example:  { \n   default_tts :   pico2wave  }", 
            "title": "Get"
        }, 
        {
            "location": "/rest_api/#update", 
            "text": "Normal response codes: 200\nError response codes : unauthorized(401), Bad request(400)  /!\\ Note: To update a tts, stt, player, trigger it should be properly defined in the 'settings.yml' in the corresponding list.  Curl command:  curl -i -H  Content-Type: application/json  --user admin:secret  -X POST -d  { default_tts :  pico2wave }  http://127.0.0.1:5000/settings/default_tts  Output example:  { \n   default_tts :   googletts  }", 
            "title": "Update"
        }, 
        {
            "location": "/contribute/core/", 
            "text": "Contributing: core\n\n\nThe community can contribute to the Core of Kalliope by providing some new features.\n\n\nHow to contribute\n\n\n\n\nFork it!\n\n\nCheckout the dev branch \ngit checkout dev\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request in the \ndev\n branch\n\n\n\n\nConstraints\n\n\n\n\n\n\nRespect \nPEP 257\n -- Docstring conventions. For each class or method add a description with summary, input parameter, returned parameter,  type of parameter\n    \npython\n    def my_method(my_parameter):\n        \"\"\"\n        Description of he method\n        :param my_parameter: description of he parameter\n        :type my_parameter: str\n        \"\"\"\n\n\n\n\n\n\nRespect \nPEP 8\n -- Style Guide for Python Code\nWe recommend the usage of an IDE like \nPycharm\n\n\n\n\n\n\nLimitations\n\n\n\n\nThe management of incoming variable from the signal order when they are \nnumbers or float are not efficient\n.\n\n\nBecause of the differences between the STTs outputs: some are returning word some numbers (two != 2).\n\n\nBecause of the i18n, we are not able to know if a variable should be  interpreted in english, french, spanish, etc ... (\"two\" != \"deux\" != \"dos\")", 
            "title": "Core"
        }, 
        {
            "location": "/contribute/core/#contributing-core", 
            "text": "The community can contribute to the Core of Kalliope by providing some new features.  How to contribute   Fork it!  Checkout the dev branch  git checkout dev  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request in the  dev  branch", 
            "title": "Contributing: core"
        }, 
        {
            "location": "/contribute/core/#constraints", 
            "text": "Respect  PEP 257  -- Docstring conventions. For each class or method add a description with summary, input parameter, returned parameter,  type of parameter\n     python\n    def my_method(my_parameter):\n        \"\"\"\n        Description of he method\n        :param my_parameter: description of he parameter\n        :type my_parameter: str\n        \"\"\"    Respect  PEP 8  -- Style Guide for Python Code\nWe recommend the usage of an IDE like  Pycharm", 
            "title": "Constraints"
        }, 
        {
            "location": "/contribute/core/#limitations", 
            "text": "The management of incoming variable from the signal order when they are  numbers or float are not efficient .  Because of the differences between the STTs outputs: some are returning word some numbers (two != 2).  Because of the i18n, we are not able to know if a variable should be  interpreted in english, french, spanish, etc ... (\"two\" != \"deux\" != \"dos\")", 
            "title": "Limitations"
        }, 
        {
            "location": "/contribute/neuron/", 
            "text": "Contributing: Create a neuron\n\n\nNeurons are independent projects so they can be developed under a github project. Anyone can clone them, place them under the neurons repository and reuse them.\n\n\nCreating a new Neuron must follow some rules:\n\n\nRepository Structure\n\n\n\n\nThe Neuron repository name is in \nlowercase\n.\n\n\nUnder the Neuron repository, the Neuron has a \nREADME.md file\n describing the Neuron following this structure:\n\n\nNeuron name:\n\n\nInstallation:     The CLI command used to install the neuron\n\n\nSynopsis:         Description of the Neuron\n\n\nOptions:          A table of the incoming parameters managed by the Neuron.\n\n\nReturn Values:    A table of the returned values which can be catched by the \nsay_template attribute\n.\n\n\nSynapses example: An example of how to use the Neuron inside a Synapse.\n\n\nNotes:            Something which needs to be add.\n\n\n\n\n\n\nUnder the Neuron repository, include a \nTests repository\n to manage the test of the Neuron.\n\n\nUnder the neuron repository, a \ndna.yml file\n must be added that contains information about the neuron. type = \"neuron\"\n\n\nUnder the neuron repository, a \ninstall.yml file\n must be added that contains the installation process.\n\n\n\n\nCode\n\n\n\n\nUnder the Neuron repository, the Neuron file name .py is also in \nlowercase\n.\n\n\nThe Neuron must be coded in \nPython 2.7\n.\n\n\nUnder the Neuron repository, include the \ninit\n.py file which contains: \nfrom neuron import Neuron\n (/!\\ respect the Case)\n\n\nInside the Neuron file, the Neuron Class name is in \nuppercase\n.\n\n\n\n\nThe Neuron \ninherits from the NeuronModule\n coming from the Core.\n\n\npython\nfrom core.NeuronModule import NeuronModule\nclass Say(NeuronModule):\n\n\n\n\n\n\nThe Neuron has a constructor \ninit\n which is the entry point.\nThe constructor has a \n**kwargs argument\n which is corresponding to the Dict of incoming variables:values defined either in the brain file or in the signal.\n\n\n\n\n\n\nThe Neuron must refer to its \nparent structure\n in the init by calling the super of NeuronModule.\n\n\nPython\ndef __init__(self, **kwargs):\n    super(Say, self).__init__(**kwargs)\n\n\n\n\n\n\nYou must run unit tests with success before sending a pull request. Add new tests that cover the code you want to publish.\n    \nbash\n    cd /path/to/kalliope\n    python -m unittest discover\n\n\n\n\n\n\n(\noptionnal-\n good practice\n) The Neuron can implement a \nprivate method _is_parameters_ok(self)\n which checks if entries are ok. \nreturn: true if parameters are ok, raise an exception otherwise\n\n\n\n\n\n\n(\noptionnal-\n good practice\n) The Neuron can \nimport and raise exceptions\n coming from NeuronModule:\n\n\n\n\nMissingParameterException: \nSome Neuron parameters are missing.\n\n\nInvalidParameterException: \nSome Neuron parameters are invalid.\n\n\n\n\n\n\n\n\nThe Neuron can use a \nself.say(message) method\n to speak out some return values using the \nsay_template\n attribute in the brain file.\nthe message variable must be a Dict of variable:values where variables can be defined as output.\n\n\n\n\n\n\nThe Neuron must (as much as possible) ensure the i18n. This means that they should \nnot manage a specific language\n inside its own logic.\nOnly synapse by the use of order must interact with the languages. This allow a Neuron to by reused by anyone, speaking any language.\n\n\n\n\n\n\nCode example\n\n\nExample of neuron structure\n\n\nmyneuron/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 myneuron.py\n\u251c\u2500\u2500 dna.yml\n\u251c\u2500\u2500 install.yml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_myneuron.py\n\n\n\n\n\nExample of neuron code\n\n\nclass\n \nMyneuron\n(\nNeuronModule\n):\n\n\ndef\n \n__init__\n(\nself\n,\n \n**\nkwargs\n):\n\n    \nsuper\n(\nMyneuron\n,\n \nself\n)\n.\n__init__\n(\n**\nkwargs\n)\n\n    \n# the args from the neuron configuration\n\n    \nself\n.\narg1\n \n=\n \nkwargs\n.\nget\n(\narg1\n,\n \nNone\n)\n\n    \nself\n.\narg2\n \n=\n \nkwargs\n.\nget\n(\narg2\n,\n \nNone\n)\n\n\n    \n# check if parameters have been provided\n\n    \nif\n \nself\n.\n_is_parameters_ok\n():\n\n        \n# -------------------\n\n        \n# do amazing code\n\n        \n# -------------------\n\n\n\ndef\n \n_is_parameters_ok\n(\nself\n):\n\n    \n\n\n    Check if received parameters are ok to perform operations in the neuron\n\n\n    :return: true if parameters are ok, raise an exception otherwise\n\n\n\n    .. raises:: MissingParameterException\n\n\n    \n\n    \nif\n \nself\n.\narg1\n \nis\n \nNone\n:\n\n        \nraise\n \nMissingParameterException\n(\nYou must specify a arg1\n)\n\n    \nif\n \nnot\n \nisinstance\n(\nself\n.\narg2\n,\n \nint\n):\n\n        \nraise\n \nMissingParameterException\n(\narg2 must be an integer\n)\n\n    \nreturn\n \nTrue\n\n\n\n\n\n\nShare it\n\n\nWe are maintaining a list of all the Neurons available from the community, let us know you've developed your own by opening \nan issue\n with the link of your neuron or send a pull request to update the \nneuron list\n on the Kalliope's website directly.", 
            "title": "Neuron"
        }, 
        {
            "location": "/contribute/neuron/#contributing-create-a-neuron", 
            "text": "Neurons are independent projects so they can be developed under a github project. Anyone can clone them, place them under the neurons repository and reuse them.  Creating a new Neuron must follow some rules:", 
            "title": "Contributing: Create a neuron"
        }, 
        {
            "location": "/contribute/neuron/#repository-structure", 
            "text": "The Neuron repository name is in  lowercase .  Under the Neuron repository, the Neuron has a  README.md file  describing the Neuron following this structure:  Neuron name:  Installation:     The CLI command used to install the neuron  Synopsis:         Description of the Neuron  Options:          A table of the incoming parameters managed by the Neuron.  Return Values:    A table of the returned values which can be catched by the  say_template attribute .  Synapses example: An example of how to use the Neuron inside a Synapse.  Notes:            Something which needs to be add.    Under the Neuron repository, include a  Tests repository  to manage the test of the Neuron.  Under the neuron repository, a  dna.yml file  must be added that contains information about the neuron. type = \"neuron\"  Under the neuron repository, a  install.yml file  must be added that contains the installation process.", 
            "title": "Repository Structure"
        }, 
        {
            "location": "/contribute/neuron/#code", 
            "text": "Under the Neuron repository, the Neuron file name .py is also in  lowercase .  The Neuron must be coded in  Python 2.7 .  Under the Neuron repository, include the  init .py file which contains:  from neuron import Neuron  (/!\\ respect the Case)  Inside the Neuron file, the Neuron Class name is in  uppercase .   The Neuron  inherits from the NeuronModule  coming from the Core.  python\nfrom core.NeuronModule import NeuronModule\nclass Say(NeuronModule):    The Neuron has a constructor  init  which is the entry point.\nThe constructor has a  **kwargs argument  which is corresponding to the Dict of incoming variables:values defined either in the brain file or in the signal.    The Neuron must refer to its  parent structure  in the init by calling the super of NeuronModule.  Python\ndef __init__(self, **kwargs):\n    super(Say, self).__init__(**kwargs)    You must run unit tests with success before sending a pull request. Add new tests that cover the code you want to publish.\n     bash\n    cd /path/to/kalliope\n    python -m unittest discover    ( optionnal-  good practice ) The Neuron can implement a  private method _is_parameters_ok(self)  which checks if entries are ok.  return: true if parameters are ok, raise an exception otherwise    ( optionnal-  good practice ) The Neuron can  import and raise exceptions  coming from NeuronModule:   MissingParameterException:  Some Neuron parameters are missing.  InvalidParameterException:  Some Neuron parameters are invalid.     The Neuron can use a  self.say(message) method  to speak out some return values using the  say_template  attribute in the brain file.\nthe message variable must be a Dict of variable:values where variables can be defined as output.    The Neuron must (as much as possible) ensure the i18n. This means that they should  not manage a specific language  inside its own logic.\nOnly synapse by the use of order must interact with the languages. This allow a Neuron to by reused by anyone, speaking any language.", 
            "title": "Code"
        }, 
        {
            "location": "/contribute/neuron/#code-example", 
            "text": "Example of neuron structure  myneuron/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 myneuron.py\n\u251c\u2500\u2500 dna.yml\n\u251c\u2500\u2500 install.yml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_myneuron.py  Example of neuron code  class   Myneuron ( NeuronModule ):  def   __init__ ( self ,   ** kwargs ): \n     super ( Myneuron ,   self ) . __init__ ( ** kwargs ) \n     # the args from the neuron configuration \n     self . arg1   =   kwargs . get ( arg1 ,   None ) \n     self . arg2   =   kwargs . get ( arg2 ,   None ) \n\n     # check if parameters have been provided \n     if   self . _is_parameters_ok (): \n         # ------------------- \n         # do amazing code \n         # -------------------  def   _is_parameters_ok ( self ): \n          Check if received parameters are ok to perform operations in the neuron      :return: true if parameters are ok, raise an exception otherwise      .. raises:: MissingParameterException       \n     if   self . arg1   is   None : \n         raise   MissingParameterException ( You must specify a arg1 ) \n     if   not   isinstance ( self . arg2 ,   int ): \n         raise   MissingParameterException ( arg2 must be an integer ) \n     return   True", 
            "title": "Code example"
        }, 
        {
            "location": "/contribute/neuron/#share-it", 
            "text": "We are maintaining a list of all the Neurons available from the community, let us know you've developed your own by opening  an issue  with the link of your neuron or send a pull request to update the  neuron list  on the Kalliope's website directly.", 
            "title": "Share it"
        }, 
        {
            "location": "/contribute/stt/", 
            "text": "Contributing: Create a STT\n\n\nSTT are independent projects so they can be developed under a github project.\nAnyone can clone them and place them under the STT repository and reuse them or directly install them via the CLI.\n\n\nCreating a new STT must follow some rules:\n\n\nRepository Structure\n\n\n\n\nThe STT repository name is in \nlowercase\n.\n\n\nUnder the STT repository, the STT has a \nREADME.md file\n describing the STT following this structure:\n\n\nSTT name:\n\n\nInstallation:     The CLI command used to install the STT\n\n\nSynopsis:         Description of the STT\n\n\nOptions:          A table of the incoming parameters managed by the STT.\n\n\nNotes:            Something which needs to be add.\n\n\nLicence:          The licence you want to use\n\n\n\n\n\n\nUnder the STT repository, a \ndna.yml file\n must be added that contains information about the STT. type = \"stt\"\n\n\nUnder the STT repository, a \ninstall.yml file\n must be added that contains the installation process.\n\n\n\n\nCode\n\n\n\n\nUnder the STT repository, the STT file name .py is also in \nlowercase\n.\n\n\nThe STT must be coded in \nPython 2.7\n.\n\n\nUnder the STT repository, include the \ninit\n.py file which contains: \nfrom stt import STT\n (/!\\ respect the Case)\n\n\nInside the STT file, the STT Class name is in \nuppercase\n.\n\n\n\n\nThe STT \ninherits from the SpeechRecognition\n coming from the Utils file in the STT package.\n\n\npython\nfrom kalliope.stt.Utils import SpeechRecognition\nclass Google(SpeechRecognition):\n\n\n\n\n\n\nThe STT has a constructor \ninit\n which is the entry point.\nThe constructor has an incoming callback to call once we get the text.\nThe constructor has a \n**kwargs argument\n which is corresponding to the Dict of incoming variables:values defined either in the settings file.\n\n\n\n\nThe STT must init itself first.\n\n\nAttach the incoming callback to the self.main_controller_callback attribute. This callback come from the main controller and will receive the text at the end of the process\n\n\nObtain audio from the microphone in the constructor. (Note : we mostly use the \nspeech_recognition library\n)\n\n\nSet your callback method into the mother class with \nself.set_callback(self.google_callback)\n. This callback is the one which will process the audio into a text.\n\n\nUse self.start_processing() from the mother class to get an audio from the microphone or read the audio file path if provided. The mother class will give the audio stream to the callback you've set before.\n\n\nThe callback method must implement two arguments: recognizer and audio. The audio argument contains the stream caught by the microphone or read from an audio file path\n\n\nDo magic stuff with the audio in order to get a string that contains the translated text\n\n\nOnce you get the text, let give it to the main_controller_callback method received in the constructor by calling it with the text string as argument \nself.main_controller_callback(audio_to_text)\n\n\n\n\nCode example:\n\n\ndef\n \n__init__\n(\nself\n,\n \ncallback\n=\nNone\n,\n \n**\nkwargs\n):\n\n    \n# give the audio file path to process directly to the mother class if exist\n\n    \nSpeechRecognition\n.\n__init__\n(\nself\n,\n \nkwargs\n.\nget\n(\naudio_file_path\n,\n \nNone\n))\n\n    \n# here is the main controller callback. We will return the text at the end of the process\n\n    \nself\n.\nmain_controller_callback\n \n=\n \ncallback\n\n\n    \nself\n.\nargument_from_settings\n \n=\n \nkwargs\n.\nget\n(\nargument_from_settings\n,\n \nNone\n)\n\n\n    \n#  give our callback\n\n    \nself\n.\nset_callback\n(\nself\n.\nmy_callback\n)\n\n    \n# start processing, record a sample from the microphone if no audio file path provided, else read the file\n\n    \nself\n.\nstart_processing\n()\n\n\n    \ndef\n \nmy_callback\n((\nself\n,\n \nrecognizer\n,\n \naudio\n):\n\n        \n# ---------------------------------------------\n\n        \n# do amazing code to translate the audio stream into text\n\n        \n# \naudio\n contain stream caught by the microphone\n\n        \n# ---------------------------------------------\n\n\n        \n# at the end of the process, send the text into the received callback method\n\n        \nself\n.\nmain_controller_callback\n(\naudio_to_text\n)", 
            "title": "STT"
        }, 
        {
            "location": "/contribute/stt/#contributing-create-a-stt", 
            "text": "STT are independent projects so they can be developed under a github project.\nAnyone can clone them and place them under the STT repository and reuse them or directly install them via the CLI.  Creating a new STT must follow some rules:", 
            "title": "Contributing: Create a STT"
        }, 
        {
            "location": "/contribute/stt/#repository-structure", 
            "text": "The STT repository name is in  lowercase .  Under the STT repository, the STT has a  README.md file  describing the STT following this structure:  STT name:  Installation:     The CLI command used to install the STT  Synopsis:         Description of the STT  Options:          A table of the incoming parameters managed by the STT.  Notes:            Something which needs to be add.  Licence:          The licence you want to use    Under the STT repository, a  dna.yml file  must be added that contains information about the STT. type = \"stt\"  Under the STT repository, a  install.yml file  must be added that contains the installation process.", 
            "title": "Repository Structure"
        }, 
        {
            "location": "/contribute/stt/#code", 
            "text": "Under the STT repository, the STT file name .py is also in  lowercase .  The STT must be coded in  Python 2.7 .  Under the STT repository, include the  init .py file which contains:  from stt import STT  (/!\\ respect the Case)  Inside the STT file, the STT Class name is in  uppercase .   The STT  inherits from the SpeechRecognition  coming from the Utils file in the STT package.  python\nfrom kalliope.stt.Utils import SpeechRecognition\nclass Google(SpeechRecognition):    The STT has a constructor  init  which is the entry point.\nThe constructor has an incoming callback to call once we get the text.\nThe constructor has a  **kwargs argument  which is corresponding to the Dict of incoming variables:values defined either in the settings file.   The STT must init itself first.  Attach the incoming callback to the self.main_controller_callback attribute. This callback come from the main controller and will receive the text at the end of the process  Obtain audio from the microphone in the constructor. (Note : we mostly use the  speech_recognition library )  Set your callback method into the mother class with  self.set_callback(self.google_callback) . This callback is the one which will process the audio into a text.  Use self.start_processing() from the mother class to get an audio from the microphone or read the audio file path if provided. The mother class will give the audio stream to the callback you've set before.  The callback method must implement two arguments: recognizer and audio. The audio argument contains the stream caught by the microphone or read from an audio file path  Do magic stuff with the audio in order to get a string that contains the translated text  Once you get the text, let give it to the main_controller_callback method received in the constructor by calling it with the text string as argument  self.main_controller_callback(audio_to_text)   Code example:  def   __init__ ( self ,   callback = None ,   ** kwargs ): \n     # give the audio file path to process directly to the mother class if exist \n     SpeechRecognition . __init__ ( self ,   kwargs . get ( audio_file_path ,   None )) \n     # here is the main controller callback. We will return the text at the end of the process \n     self . main_controller_callback   =   callback \n\n     self . argument_from_settings   =   kwargs . get ( argument_from_settings ,   None ) \n\n     #  give our callback \n     self . set_callback ( self . my_callback ) \n     # start processing, record a sample from the microphone if no audio file path provided, else read the file \n     self . start_processing () \n\n     def   my_callback (( self ,   recognizer ,   audio ): \n         # --------------------------------------------- \n         # do amazing code to translate the audio stream into text \n         #  audio  contain stream caught by the microphone \n         # --------------------------------------------- \n\n         # at the end of the process, send the text into the received callback method \n         self . main_controller_callback ( audio_to_text )", 
            "title": "Code"
        }, 
        {
            "location": "/contribute/tts/", 
            "text": "Contributing: Create a TTS\n\n\nTTS are independent projects so they can be developed under a github project. \nAnyone can clone them and place them under the TTS repository and reuse them or directly install them.\n\n\nCreating a new TTS must follow some rules:\n\n\nRepository Structure\n\n\n\n\nThe TTS repository name is in \nlowercase\n.\n\n\nUnder the TTS repository, the TTS has a \nREADME.md file\n describing the TTS following this structure:\n\n\nTTS name:\n\n\nInstallation:     The CLI command used to install the TTS\n\n\nSynopsis:         Description of the TTS\n\n\nOptions:          A table of the incoming parameters managed by the TTS.\n\n\nNotes:            Something which needs to be add.\n\n\nLicence:          The licence you want to use\n\n\n\n\n\n\nUnder the TTS repository, a \ndna.yml file\n must be added that contains information about the TTS. type = \"tts\"\n\n\nUnder the TTS repository, a \ninstall.yml file\n must be added that contains the installation process.\n\n\n\n\nCode\n\n\n\n\nUnder the TTS repository, the TTS file name .py is also in \nlowercase\n.\n\n\nThe TTS must be coded in \nPython 2.7\n.\n\n\nUnder the TTS repository, include the \ninit\n.py file which contains: \nfrom tts import TTS\n (/!\\ respect the Case)\n\n\nInside the TTS file, the TTS Class name is in \nuppercase\n.\n\n\n\n\nThe TTS \ninherits from the TTSModule\n coming from the Core.\n\n\npython\nfrom kalliope.core.TTS.TTSModule import TTSModule\nclass Pico2wave(TTSModule):\n\n\n\n\n\n\nThe TTS has a constructor \ninit\n which is the entry point.\nThe constructor has a \n**kwargs argument\n which is corresponding to the Dict of incoming variables:values defined either in the settings file.\n\n\n\n\n\n\nThe TTS must refer to its \nparent structure\n in the init by calling the super of TTSModule.\n\n\npython\ndef __init__(self, **kwargs):\n    super(Pico2wave, self).__init__(**kwargs)\n\n\n\n\n\n\nThe TTS \nmust\n implements a method _say(self, words) which must run call a method coming from the mother Class self.generate_and_play(words, callback).\n\n\n\n\nImplement a callback in a separate method to run the audio. \nThis callback is in charge to get the sound and save it on the disk. You can use our lib \"FileManager.write_in_file(file_path, content)\"\n\n\nThe module must use \nself.file_path\n from the mother class to know the full path where to save the generated audio file. The file path is handled by the core in order to allow caching.\n\n\nThe generated audio file must be supported by Mplayer. Try to play a generated file with \nmplayer /path/to/the/generated_audio_file\n\n\n\n\nCode example\n\n\nExample of TTS structure\n\n\nmytts/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 mytts.py\n\u251c\u2500\u2500 dna.yml\n\u251c\u2500\u2500 install.yml\n\u2514\u2500\u2500 README.md\n\n\n\n\n\nExample of TTS code\n\n\nclass\n \nMytts\n(\nTTSModule\n):\n\n\ndef\n \n__init__\n(\nself\n,\n \n**\nkwargs\n):\n\n    \nsuper\n(\nMytts\n,\n \nself\n)\n.\n__init__\n(\n**\nkwargs\n)\n\n    \n# the args from the tts configuration\n\n    \nself\n.\narg1\n \n=\n \nkwargs\n.\nget\n(\narg1\n,\n \nNone\n)\n\n    \nself\n.\narg2\n \n=\n \nkwargs\n.\nget\n(\narg2\n,\n \nNone\n)\n\n\n    \ndef\n \nsay\n(\nself\n,\n \nwords\n):\n\n        \n\n\n        :param words: The sentence to say\n\n\n        \n\n\n        \nself\n.\ngenerate_and_play\n(\nwords\n,\n \nself\n.\n_generate_audio_file\n)\n\n\n    \ndef\n \n_generate_audio_file\n(\nself\n):\n\n    \n\n\n    Generic method used as a Callback in TTSModule\n\n\n        - must provided the audio file and write it on the disk in self.file_path\n\n\n\n    .. raises:: FailToLoadSoundFile\n\n\n    \n\n    \n# -------------------\n\n    \n# - do amazing code to get the sound \n\n    \n# - save it to the disk using self.file_path\n\n    \n# - Attach the sound file path to the attribute : self.file_path = audio_file_path !\n\n    \n# -------------------", 
            "title": "TTS"
        }, 
        {
            "location": "/contribute/tts/#contributing-create-a-tts", 
            "text": "TTS are independent projects so they can be developed under a github project. \nAnyone can clone them and place them under the TTS repository and reuse them or directly install them.  Creating a new TTS must follow some rules:", 
            "title": "Contributing: Create a TTS"
        }, 
        {
            "location": "/contribute/tts/#repository-structure", 
            "text": "The TTS repository name is in  lowercase .  Under the TTS repository, the TTS has a  README.md file  describing the TTS following this structure:  TTS name:  Installation:     The CLI command used to install the TTS  Synopsis:         Description of the TTS  Options:          A table of the incoming parameters managed by the TTS.  Notes:            Something which needs to be add.  Licence:          The licence you want to use    Under the TTS repository, a  dna.yml file  must be added that contains information about the TTS. type = \"tts\"  Under the TTS repository, a  install.yml file  must be added that contains the installation process.", 
            "title": "Repository Structure"
        }, 
        {
            "location": "/contribute/tts/#code", 
            "text": "Under the TTS repository, the TTS file name .py is also in  lowercase .  The TTS must be coded in  Python 2.7 .  Under the TTS repository, include the  init .py file which contains:  from tts import TTS  (/!\\ respect the Case)  Inside the TTS file, the TTS Class name is in  uppercase .   The TTS  inherits from the TTSModule  coming from the Core.  python\nfrom kalliope.core.TTS.TTSModule import TTSModule\nclass Pico2wave(TTSModule):    The TTS has a constructor  init  which is the entry point.\nThe constructor has a  **kwargs argument  which is corresponding to the Dict of incoming variables:values defined either in the settings file.    The TTS must refer to its  parent structure  in the init by calling the super of TTSModule.  python\ndef __init__(self, **kwargs):\n    super(Pico2wave, self).__init__(**kwargs)    The TTS  must  implements a method _say(self, words) which must run call a method coming from the mother Class self.generate_and_play(words, callback).   Implement a callback in a separate method to run the audio. \nThis callback is in charge to get the sound and save it on the disk. You can use our lib \"FileManager.write_in_file(file_path, content)\"  The module must use  self.file_path  from the mother class to know the full path where to save the generated audio file. The file path is handled by the core in order to allow caching.  The generated audio file must be supported by Mplayer. Try to play a generated file with  mplayer /path/to/the/generated_audio_file", 
            "title": "Code"
        }, 
        {
            "location": "/contribute/tts/#code-example", 
            "text": "Example of TTS structure  mytts/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 mytts.py\n\u251c\u2500\u2500 dna.yml\n\u251c\u2500\u2500 install.yml\n\u2514\u2500\u2500 README.md  Example of TTS code  class   Mytts ( TTSModule ):  def   __init__ ( self ,   ** kwargs ): \n     super ( Mytts ,   self ) . __init__ ( ** kwargs ) \n     # the args from the tts configuration \n     self . arg1   =   kwargs . get ( arg1 ,   None ) \n     self . arg2   =   kwargs . get ( arg2 ,   None ) \n\n     def   say ( self ,   words ): \n                  :param words: The sentence to say           \n\n         self . generate_and_play ( words ,   self . _generate_audio_file ) \n\n     def   _generate_audio_file ( self ): \n          Generic method used as a Callback in TTSModule          - must provided the audio file and write it on the disk in self.file_path      .. raises:: FailToLoadSoundFile       \n     # ------------------- \n     # - do amazing code to get the sound  \n     # - save it to the disk using self.file_path \n     # - Attach the sound file path to the attribute : self.file_path = audio_file_path ! \n     # -------------------", 
            "title": "Code example"
        }, 
        {
            "location": "/contribute/documentation/", 
            "text": "Contributing: core documentation\n\n\nThe main documentation is written in markdown and then generated with \nmkdocs\n.\n\n\nInstall python packages\n\n\nsudo pip install mkdocs mkdocs-material markdown-include pygments\n\n\n\n\n\nUpdate the documentation in the \ndocs\n folder placed in the root of the project.\nThen, run dev server locally to check the result\n\n\nmkdocs serve\n\n\n\n\n\nWhen ready, send a pull request in the \ndev\n branch.", 
            "title": "Documentation"
        }, 
        {
            "location": "/contribute/documentation/#contributing-core-documentation", 
            "text": "The main documentation is written in markdown and then generated with  mkdocs .  Install python packages  sudo pip install mkdocs mkdocs-material markdown-include pygments  Update the documentation in the  docs  folder placed in the root of the project.\nThen, run dev server locally to check the result  mkdocs serve  When ready, send a pull request in the  dev  branch.", 
            "title": "Contributing: core documentation"
        }, 
        {
            "location": "/contribute/installation_file/", 
            "text": "install.yml file\n\n\nThe installation file, called install.yml, must be placed at the root of a repository. This one will be read by Kalliope in order to install your module from the \ncommand line\n by any Kalliope user.\n\n\nHow to create an install.yml file\n\n\nThe module installation process is based on the Ansible program. Ansible is an IT orchestrator. It means it can help you to perform configuration management, application deployment or task automation.\n\n\nThe \ninstall.yml\n file must contains what we called a Playbook in the Ansible world.\nA playbook is like a recipe or an instructions manual which tells Ansible what to do against an host. In our case, the host will be the local machine of the current user who asked Kalliope to install the module.\n\n\nLet's see a basic playbook, the one used by the neuron wikipedia_searcher\n\n\n-\n \nname\n:\n \nKalliope wikipedia_searcher neuron install\n\n  \nhosts\n:\n \nlocalhost\n\n  \ngather_facts\n:\n \nno\n\n  \nconnection\n:\n \nlocal\n\n  \nbecome\n:\n \ntrue\n\n\n  \ntasks\n:\n\n    \n-\n \nname\n:\n \nInstall\n \npip\n \ndependencies\n\n      \npip\n:\n\n        \nname\n:\n \nwikipedia\n\n        \nversion\n:\n \n1.4.0\n\n\n\n\n\n\nAs the file is a \nplaybook\n, it can contains multiple \nplay\n. That's why the file start with a \"-\", the yaml syntax to define a list of element. In this example, our playbook contains only one play.\n\n\nThe first element is the \nname\n. It can be anything you want. Here we've set what the play do.\n\n\nThe \nhosts\n parameter is, like the name sugest us, to design on which host we want to apply our configuration. In the context of a Kalliope module installation, it will always be \nlocalhost\n.\n\n\nBy default, ansible call a module to \ngather useful variables\n about remote hosts that can be used in playbooks.\nIn this example, we don't need it and so we disable the \ngather_facts\n feature in order to win a couple seconds during the installation process.\n\n\nIn most of case, our play will need to apply admin operations. In this case, installing a python lib. So we set \nbecome\n to true to be allowed to install our lib as root user.\n\n\nThe next part is \ntasks\n. This key must contains a list of task to apply on the target system.\n\n\nThe only task we've added here is based on the \npip Ansible module\n.\n\n\nAnsible comes with a lot of modules, see the \ncomplete list here\n.\n\n\nHere is an example which use the \napt module\n to install Debian packages\n\n\ntasks\n:\n\n  \n-\n \nname\n:\n \nInstall packages\n\n    \napt\n:\n \nname={{ item }} update_cache=yes\n\n    \nwith_items\n:\n\n      \n-\n \nflac\n\n      \n-\n \nmplayer", 
            "title": "install.yml"
        }, 
        {
            "location": "/contribute/installation_file/#installyml-file", 
            "text": "The installation file, called install.yml, must be placed at the root of a repository. This one will be read by Kalliope in order to install your module from the  command line  by any Kalliope user.", 
            "title": "install.yml file"
        }, 
        {
            "location": "/contribute/installation_file/#how-to-create-an-installyml-file", 
            "text": "The module installation process is based on the Ansible program. Ansible is an IT orchestrator. It means it can help you to perform configuration management, application deployment or task automation.  The  install.yml  file must contains what we called a Playbook in the Ansible world.\nA playbook is like a recipe or an instructions manual which tells Ansible what to do against an host. In our case, the host will be the local machine of the current user who asked Kalliope to install the module.  Let's see a basic playbook, the one used by the neuron wikipedia_searcher  -   name :   Kalliope wikipedia_searcher neuron install \n   hosts :   localhost \n   gather_facts :   no \n   connection :   local \n   become :   true \n\n   tasks : \n     -   name :   Install   pip   dependencies \n       pip : \n         name :   wikipedia \n         version :   1.4.0   As the file is a  playbook , it can contains multiple  play . That's why the file start with a \"-\", the yaml syntax to define a list of element. In this example, our playbook contains only one play.  The first element is the  name . It can be anything you want. Here we've set what the play do.  The  hosts  parameter is, like the name sugest us, to design on which host we want to apply our configuration. In the context of a Kalliope module installation, it will always be  localhost .  By default, ansible call a module to  gather useful variables  about remote hosts that can be used in playbooks.\nIn this example, we don't need it and so we disable the  gather_facts  feature in order to win a couple seconds during the installation process.  In most of case, our play will need to apply admin operations. In this case, installing a python lib. So we set  become  to true to be allowed to install our lib as root user.  The next part is  tasks . This key must contains a list of task to apply on the target system.  The only task we've added here is based on the  pip Ansible module .  Ansible comes with a lot of modules, see the  complete list here .  Here is an example which use the  apt module  to install Debian packages  tasks : \n   -   name :   Install packages \n     apt :   name={{ item }} update_cache=yes \n     with_items : \n       -   flac \n       -   mplayer", 
            "title": "How to create an install.yml file"
        }, 
        {
            "location": "/contribute/dna/", 
            "text": "dna.yml file\n\n\nThe dna file is the descriptor of your module.\nThis file has a yaml syntax and must be present to allow Kalliope to install it from the \nCLI\n.\n\n\nDNA parameters\n\n\n\n\n\n\n\n\nparameter\n\n\ntype\n\n\nrequired\n\n\nchoices\n\n\ncomment\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nyes\n\n\n\n\nLowercase. It will be the name of the folder installed in ressources_dir for the target type of resource\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nyes\n\n\nneuron, stt, tts\n\n\nThe type of resource. This will be used by Kalliope install process to place the resource in the right directory set in resources_dir\n\n\n\n\n\n\nauthor\n\n\nstring\n\n\nno\n\n\n\n\nString that contain info about the author of the modul like a name or a github profile page\n\n\n\n\n\n\nkalliope_supported_version\n\n\nlist\n\n\nyes\n\n\n0.4\n\n\nlist of kalliope \nMAJOR\n version the module support. E.g \n- 0.4\n\n\n\n\n\n\ntags\n\n\nlist\n\n\nno\n\n\n\n\nlist of tags that can help to categorize the module. E.g: \"email\", \"social network\", \"search engine\"\n\n\n\n\n\n\n\n\nDNA file examples\n\n\nA dna file for a neuron\n\n\nname\n:\n \nwikipedia_searcher\n\n\ntype\n:\n \nneuron\n\n\nauthor\n:\n \nThe\n \ndream\n \nteam\n \nof\n \nKalliope\n \nproject\n\n\n\nkalliope_supported_version\n:\n\n  \n-\n \n0.5\n\n\n\ntags\n:\n\n  \n-\n \nsearch\n \nengine\n\n  \n-\n \nwiki", 
            "title": "dna.yml"
        }, 
        {
            "location": "/contribute/dna/#dnayml-file", 
            "text": "The dna file is the descriptor of your module.\nThis file has a yaml syntax and must be present to allow Kalliope to install it from the  CLI .", 
            "title": "dna.yml file"
        }, 
        {
            "location": "/contribute/dna/#dna-parameters", 
            "text": "parameter  type  required  choices  comment      name  string  yes   Lowercase. It will be the name of the folder installed in ressources_dir for the target type of resource    type  string  yes  neuron, stt, tts  The type of resource. This will be used by Kalliope install process to place the resource in the right directory set in resources_dir    author  string  no   String that contain info about the author of the modul like a name or a github profile page    kalliope_supported_version  list  yes  0.4  list of kalliope  MAJOR  version the module support. E.g  - 0.4    tags  list  no   list of tags that can help to categorize the module. E.g: \"email\", \"social network\", \"search engine\"", 
            "title": "DNA parameters"
        }, 
        {
            "location": "/contribute/dna/#dna-file-examples", 
            "text": "A dna file for a neuron  name :   wikipedia_searcher  type :   neuron  author :   The   dream   team   of   Kalliope   project  kalliope_supported_version : \n   -   0.5  tags : \n   -   search   engine \n   -   wiki", 
            "title": "DNA file examples"
        }
    ]
}